[tool.poetry]
name = "lathe"
version = "0.1.0"
description = "Procedurally generated spherical worlds."
authors = [
    "NorthernScott <stonejester@protonmail.com>",
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/northernscott/lathe"
homepage = "https://lathe.northernscott.github.io"
documentation = "https://github.com/NorthernScott/lathe/wiki"
keywords = [
    "procedural",
    "generation",
    "gis",
    "spherical",
    "worlds",
    "ttrpg",
    "fantasy",
    "world",
    "generator",
    "3d",
    "visualization",
    "geospatial",
    "data",
    "science",
    "geography",
    "cartography",
    "mapping",
    "terrain",
    "landscape",
    "environment",
    "climate",
    "biome",
    "ecology",
    "planet",
    "earth",
    "globe",
    "sphere",
    "map",
    "globe",
    "worldbuilding",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Environment :: GPU :: NVIDIA CUDA",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Operating System :: POSIX :: Linux",
    "Topic :: Database",
    "Topic :: Database :: Front-Ends",
    "Topic :: Games/Entertainment",
    "Topic :: Games/Entertainment :: Role-Playing",
    "Topic :: Games/Entertainment :: Simulation",
    "Topic :: Scientific/Engineering :: GIS",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.13"
django = "^5.1.2"
opensimplex = "^0.4.5.1"
pyvista = "^0.44.1"
pyvistaqt = "^0.11.1"
typer = "^0.12.5"
rich = "^13.8.1"
numba = "^0.60.0"
numpy = "2.0"
cmocean = "^4.0.3"
meshio = "^5.3.5"
pillow = "^10.4.0"
imageio = "^2.35.1"
vtk = "^9.3.1"
matplotlib = "^3.9.2"
colorcet = "^3.1.0"
trame = "^3.6.5"

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.8"
pytest = "^8.3.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
