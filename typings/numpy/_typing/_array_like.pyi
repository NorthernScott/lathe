"""
This type stub file was generated by pyright.
"""

import sys
import numpy as np
from collections.abc import Buffer, Callable, Collection, Sequence
from typing import Any, Never as _UnknownType, Protocol, TypeAlias, TypeVar, runtime_checkable
from numpy import bytes_, complexfloating, datetime64, dtype, floating, generic, integer, ndarray, number, object_, str_, timedelta64, unsignedinteger, void
from ._nested_sequence import _NestedSequence

_T = TypeVar("_T")
_ScalarType = TypeVar("_ScalarType", bound=generic)
_ScalarType_co = TypeVar("_ScalarType_co", bound=generic, covariant=True)
_DType = TypeVar("_DType", bound=dtype[Any])
_DType_co = TypeVar("_DType_co", covariant=True, bound=dtype[Any])
NDArray: TypeAlias = ndarray[Any, dtype[_ScalarType_co]]
@runtime_checkable
class _SupportsArray(Protocol[_DType_co]):
    def __array__(self) -> ndarray[Any, _DType_co]:
        ...
    


@runtime_checkable
class _SupportsArrayFunc(Protocol):
    """A protocol class representing `~class.__array_function__`."""
    def __array_function__(self, func: Callable[..., Any], types: Collection[type[Any]], args: tuple[Any, ...], kwargs: dict[str, Any]) -> object:
        ...
    


_FiniteNestedSequence: TypeAlias = (_T | Sequence[_T] | Sequence[Sequence[_T]] | Sequence[Sequence[Sequence[_T]]] | Sequence[Sequence[Sequence[Sequence[_T]]]])
_ArrayLike: TypeAlias = (_SupportsArray[dtype[_ScalarType]] | _NestedSequence[_SupportsArray[dtype[_ScalarType]]])
_DualArrayLike: TypeAlias = (_SupportsArray[_DType] | _NestedSequence[_SupportsArray[_DType]] | _T | _NestedSequence[_T])
if sys.version_info >= (3, 12):
    ArrayLike: TypeAlias = Buffer | _DualArrayLike[dtype[Any], bool | int | float | complex | str | bytes,]
else:
    ...
_ArrayLikeBool_co: TypeAlias = _DualArrayLike[dtype[np.bool], bool,]
_ArrayLikeUInt_co: TypeAlias = _DualArrayLike[dtype[np.bool] | dtype[unsignedinteger[Any]], bool,]
_ArrayLikeInt_co: TypeAlias = _DualArrayLike[dtype[np.bool] | dtype[integer[Any]], bool | int,]
_ArrayLikeFloat_co: TypeAlias = _DualArrayLike[dtype[np.bool] | dtype[integer[Any]] | dtype[floating[Any]], bool | int | float,]
_ArrayLikeComplex_co: TypeAlias = _DualArrayLike[(dtype[np.bool] | dtype[integer[Any]] | dtype[floating[Any]] | dtype[complexfloating[Any, Any]]), bool | int | float | complex,]
_ArrayLikeNumber_co: TypeAlias = _DualArrayLike[dtype[np.bool] | dtype[number[Any]], bool | int | float | complex,]
_ArrayLikeTD64_co: TypeAlias = _DualArrayLike[dtype[np.bool] | dtype[integer[Any]] | dtype[timedelta64], bool | int,]
_ArrayLikeDT64_co: TypeAlias = (_SupportsArray[dtype[datetime64]] | _NestedSequence[_SupportsArray[dtype[datetime64]]])
_ArrayLikeObject_co: TypeAlias = (_SupportsArray[dtype[object_]] | _NestedSequence[_SupportsArray[dtype[object_]]])
_ArrayLikeVoid_co: TypeAlias = (_SupportsArray[dtype[void]] | _NestedSequence[_SupportsArray[dtype[void]]])
_ArrayLikeStr_co: TypeAlias = _DualArrayLike[dtype[str_], str,]
_ArrayLikeBytes_co: TypeAlias = _DualArrayLike[dtype[bytes_], bytes,]
_ArrayLikeInt: TypeAlias = _DualArrayLike[dtype[integer[Any]], int,]
if sys.version_info >= (3, 11):
    ...
else:
    ...
_ArrayLikeUnknown: TypeAlias = _DualArrayLike[dtype[_UnknownType], _UnknownType,]
