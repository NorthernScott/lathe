"""
This type stub file was generated by pyright.
"""

import numpy as np
from collections.abc import Sequence
from typing import Any, Protocol, TypeAlias, TypeVar, TypedDict, runtime_checkable
from ._shape import _ShapeLike
from ._char_codes import _BoolCodes, _ByteCodes, _BytesCodes, _CDoubleCodes, _CLongDoubleCodes, _CSingleCodes, _Complex128Codes, _Complex64Codes, _DT64Codes, _DoubleCodes, _Float16Codes, _Float32Codes, _Float64Codes, _HalfCodes, _Int16Codes, _Int32Codes, _Int64Codes, _Int8Codes, _IntCCodes, _IntCodes, _IntPCodes, _LongCodes, _LongDoubleCodes, _LongLongCodes, _ObjectCodes, _ShortCodes, _SingleCodes, _StrCodes, _TD64Codes, _UByteCodes, _UInt16Codes, _UInt32Codes, _UInt64Codes, _UInt8Codes, _UIntCCodes, _UIntCodes, _UIntPCodes, _ULongLongCodes, _UShortCodes, _VoidCodes

_SCT = TypeVar("_SCT", bound=np.generic)
_DType_co = TypeVar("_DType_co", covariant=True, bound=np.dtype[Any])
_DTypeLikeNested: TypeAlias = Any
class _DTypeDictBase(TypedDict):
    names: Sequence[str]
    formats: Sequence[_DTypeLikeNested]
    ...


class _DTypeDict(_DTypeDictBase, total=False):
    offsets: Sequence[int]
    titles: Sequence[Any]
    itemsize: int
    aligned: bool
    ...


@runtime_checkable
class _SupportsDType(Protocol[_DType_co]):
    @property
    def dtype(self) -> _DType_co:
        ...
    


_DTypeLike: TypeAlias = (np.dtype[_SCT] | type[_SCT] | _SupportsDType[np.dtype[_SCT]])
_VoidDTypeLike: TypeAlias = (tuple[_DTypeLikeNested, int] | tuple[_DTypeLikeNested, _ShapeLike] | list[Any] | _DTypeDict | tuple[_DTypeLikeNested, _DTypeLikeNested])
DTypeLike: TypeAlias = (np.dtype[Any] | None | type[Any] | _SupportsDType[np.dtype[Any]] | str | _VoidDTypeLike)
_DTypeLikeBool: TypeAlias = (type[bool] | type[np.bool] | np.dtype[np.bool] | _SupportsDType[np.dtype[np.bool]] | _BoolCodes)
_DTypeLikeUInt: TypeAlias = (type[np.unsignedinteger] | np.dtype[np.unsignedinteger] | _SupportsDType[np.dtype[np.unsignedinteger]] | _UInt8Codes | _UInt16Codes | _UInt32Codes | _UInt64Codes | _UByteCodes | _UShortCodes | _UIntCCodes | _LongCodes | _ULongLongCodes | _UIntPCodes | _UIntCodes)
_DTypeLikeInt: TypeAlias = (type[int] | type[np.signedinteger] | np.dtype[np.signedinteger] | _SupportsDType[np.dtype[np.signedinteger]] | _Int8Codes | _Int16Codes | _Int32Codes | _Int64Codes | _ByteCodes | _ShortCodes | _IntCCodes | _LongCodes | _LongLongCodes | _IntPCodes | _IntCodes)
_DTypeLikeFloat: TypeAlias = (type[float] | type[np.floating] | np.dtype[np.floating] | _SupportsDType[np.dtype[np.floating]] | _Float16Codes | _Float32Codes | _Float64Codes | _HalfCodes | _SingleCodes | _DoubleCodes | _LongDoubleCodes)
_DTypeLikeComplex: TypeAlias = (type[complex] | type[np.complexfloating] | np.dtype[np.complexfloating] | _SupportsDType[np.dtype[np.complexfloating]] | _Complex64Codes | _Complex128Codes | _CSingleCodes | _CDoubleCodes | _CLongDoubleCodes)
_DTypeLikeDT64: TypeAlias = (type[np.timedelta64] | np.dtype[np.timedelta64] | _SupportsDType[np.dtype[np.timedelta64]] | _TD64Codes)
_DTypeLikeTD64: TypeAlias = (type[np.datetime64] | np.dtype[np.datetime64] | _SupportsDType[np.dtype[np.datetime64]] | _DT64Codes)
_DTypeLikeStr: TypeAlias = (type[str] | type[np.str_] | np.dtype[np.str_] | _SupportsDType[np.dtype[np.str_]] | _StrCodes)
_DTypeLikeBytes: TypeAlias = (type[bytes] | type[np.bytes_] | np.dtype[np.bytes_] | _SupportsDType[np.dtype[np.bytes_]] | _BytesCodes)
_DTypeLikeVoid: TypeAlias = (type[np.void] | np.dtype[np.void] | _SupportsDType[np.dtype[np.void]] | _VoidCodes | _VoidDTypeLike)
_DTypeLikeObject: TypeAlias = (type | np.dtype[np.object_] | _SupportsDType[np.dtype[np.object_]] | _ObjectCodes)
_DTypeLikeComplex_co: TypeAlias = (_DTypeLikeBool | _DTypeLikeUInt | _DTypeLikeInt | _DTypeLikeFloat | _DTypeLikeComplex)
