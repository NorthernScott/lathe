"""
This type stub file was generated by pyright.
"""

"""Delegators for alternative backends in scipy.ndimage.

The signature of `func_signature` must match the signature of ndimage.func.
The job of a `func_signature` is to know which arguments of `ndimage.func`
are arrays.

* signatures are generated by

--------------
import inspect
from scipy import ndimage

names = [x for x in dir(ndimage) if not x.startswith('_')]
objs = [getattr(ndimage, name) for name in names]
funcs = [obj for obj in objs if inspect.isroutine(obj)]

for func in funcs:
    sig = inspect.signature(func)
    print(f"def {func.__name__}_signature{sig}:\n\tpass\n\n")
---------------

* which arguments to delegate on: manually trawled the documentation for
  array-like and array arguments

"""
def affine_transform_signature(input, matrix, offset=..., output_shape=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def binary_closing_signature(input, structure=..., iterations=..., output=..., *args, **kwds): # -> ModuleType:
    ...

binary_opening_signature = ...
def binary_dilation_signature(input, structure=..., iterations=..., mask=..., output=..., *args, **kwds): # -> ModuleType:
    ...

binary_erosion_signature = ...
def binary_fill_holes_signature(input, structure=..., output=..., origin=..., *args, **kwargs): # -> ModuleType:
    ...

def label_signature(input, structure=..., output=..., origin=...): # -> ModuleType:
    ...

def binary_hit_or_miss_signature(input, structure1=..., structure2=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def binary_propagation_signature(input, structure=..., mask=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def convolve_signature(input, weights, output=..., *args, **kwds): # -> ModuleType:
    ...

correlate_signature = ...
def convolve1d_signature(input, weights, axis=..., output=..., *args, **kwds): # -> ModuleType:
    ...

correlate1d_signature = ...
def distance_transform_bf_signature(input, metric=..., sampling=..., return_distances=..., return_indices=..., distances=..., indices=...): # -> ModuleType:
    ...

def distance_transform_cdt_signature(input, metric=..., return_distances=..., return_indices=..., distances=..., indices=...): # -> ModuleType:
    ...

def distance_transform_edt_signature(input, sampling=..., return_distances=..., return_indices=..., distances=..., indices=...): # -> ModuleType:
    ...

def find_objects_signature(input, max_label=...): # -> ModuleType:
    ...

def fourier_ellipsoid_signature(input, size, n=..., axis=..., output=...): # -> ModuleType:
    ...

fourier_uniform_signature = ...
def fourier_gaussian_signature(input, sigma, n=..., axis=..., output=...): # -> ModuleType:
    ...

def fourier_shift_signature(input, shift, n=..., axis=..., output=...): # -> ModuleType:
    ...

def gaussian_filter_signature(input, sigma, order=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def gaussian_filter1d_signature(input, sigma, axis=..., order=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def gaussian_gradient_magnitude_signature(input, sigma, output=..., *args, **kwds): # -> ModuleType:
    ...

gaussian_laplace_signature = ...
def generate_binary_structure_signature(rank, connectivity): # -> Any:
    ...

def generic_filter_signature(input, function, size=..., footprint=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def generic_filter1d_signature(input, function, filter_size, axis=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def generic_gradient_magnitude_signature(input, derivative, output=..., *args, **kwds): # -> ModuleType:
    ...

def generic_laplace_signature(input, derivative2, output=..., *args, **kwds): # -> ModuleType:
    ...

def geometric_transform_signature(input, mapping, output_shape=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def histogram_signature(input, min, max, bins, labels=..., index=...): # -> ModuleType:
    ...

def iterate_structure_signature(structure, iterations, origin=...): # -> ModuleType:
    ...

def labeled_comprehension_signature(input, labels, *args, **kwds): # -> ModuleType:
    ...

def laplace_signature(input, output=..., *args, **kwds): # -> ModuleType:
    ...

def map_coordinates_signature(input, coordinates, output=..., *args, **kwds): # -> ModuleType:
    ...

def maximum_filter1d_signature(input, size, axis=..., output=..., *args, **kwds): # -> ModuleType:
    ...

minimum_filter1d_signature = ...
uniform_filter1d_signature = ...
def maximum_signature(input, labels=..., index=...): # -> ModuleType:
    ...

minimum_signature = ...
median_signature = ...
mean_signature = ...
variance_signature = ...
standard_deviation_signature = ...
sum_labels_signature = ...
sum_signature = ...
maximum_position_signature = ...
minimum_position_signature = ...
extrema_signature = ...
center_of_mass_signature = ...
def median_filter_signature(input, size=..., footprint=..., output=..., *args, **kwds): # -> ModuleType:
    ...

minimum_filter_signature = ...
maximum_filter_signature = ...
def morphological_gradient_signature(input, size=..., footprint=..., structure=..., output=..., *args, **kwds): # -> ModuleType:
    ...

morphological_laplace_signature = ...
white_tophat_signature = ...
black_tophat_signature = ...
grey_closing_signature = ...
grey_dilation_signature = ...
grey_erosion_signature = ...
grey_opening_signature = ...
def percentile_filter_signature(input, percentile, size=..., footprint=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def prewitt_signature(input, axis=..., output=..., *args, **kwds): # -> ModuleType:
    ...

sobel_signature = ...
def rank_filter_signature(input, rank, size=..., footprint=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def rotate_signature(input, angle, axes=..., reshape=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def shift_signature(input, shift, output=..., *args, **kwds): # -> ModuleType:
    ...

def spline_filter_signature(input, order=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def spline_filter1d_signature(input, order=..., axis=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def uniform_filter_signature(input, size=..., output=..., *args, **kwds): # -> ModuleType:
    ...

def value_indices_signature(arr, *args, **kwds): # -> ModuleType:
    ...

def watershed_ift_signature(input, markers, structure=..., output=...): # -> ModuleType:
    ...

def zoom_signature(input, zoom, output=..., *args, **kwds): # -> ModuleType:
    ...

