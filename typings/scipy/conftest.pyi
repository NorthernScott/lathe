"""
This type stub file was generated by pyright.
"""

import pytest
from contextlib import contextmanager
from scipy._lib._array_api import SCIPY_ARRAY_API, SCIPY_DEVICE

HAVE_SCPDT = ...
PARALLEL_RUN_AVAILABLE = ...
def pytest_configure(config): # -> None:
    ...

def pytest_runtest_setup(item): # -> None:
    ...

@pytest.fixture(scope="function", autouse=True)
def check_fpu_mode(request): # -> Generator[None, Any, None]:
    """
    Check FPU mode was not changed during the test.
    """
    ...

if not PARALLEL_RUN_AVAILABLE:
    @pytest.fixture
    def num_parallel_threads(): # -> Literal[1]:
        ...
    
xp_available_backends = ...
if SCIPY_ARRAY_API and isinstance(SCIPY_ARRAY_API, str):
    ...
if 'cupy' in xp_available_backends:
    SCIPY_DEVICE = ...
array_api_compatible = ...
skip_xp_invalid_arg = ...
@pytest.fixture
def skip_xp_backends(xp, request): # -> None:
    """skip_xp_backends(backend=None, reason=None, np_only=False, cpu_only=False, exceptions=None)

    Skip a decorated test for the provided backend, or skip a category of backends.

    See ``skip_or_xfail_backends`` docstring for details. Note that, contrary to
    ``skip_or_xfail_backends``, the ``backend`` and ``reason`` arguments are optional
    single strings: this function only skips a single backend at a time.
    To skip multiple backends, provide multiple decorators.
    """
    ...

@pytest.fixture
def xfail_xp_backends(xp, request): # -> None:
    """xfail_xp_backends(backend=None, reason=None, np_only=False, cpu_only=False, exceptions=None)

    xfail a decorated test for the provided backend, or xfail a category of backends.

    See ``skip_or_xfail_backends`` docstring for details. Note that, contrary to
    ``skip_or_xfail_backends``, the ``backend`` and ``reason`` arguments are optional
    single strings: this function only xfails a single backend at a time.
    To xfail multiple backends, provide multiple decorators.
    """
    ...

def skip_or_xfail_xp_backends(xp, backends, kwargs, skip_or_xfail=...): # -> None:
    """
    Skip based on the ``skip_xp_backends`` or ``xfail_xp_backends`` marker.

    See the "Support for the array API standard" docs page for usage examples.

    Parameters
    ----------
    backends : tuple
        Backends to skip/xfail, e.g. ``("array_api_strict", "torch")``.
        These are overriden when ``np_only`` is ``True``, and are not
        necessary to provide for non-CPU backends when ``cpu_only`` is ``True``.
        For a custom reason to apply, you should pass a dict ``{'reason': '...'}``
        to a keyword matching the name of the backend.
    reason : str, optional
        A reason for the skip/xfail in the case of ``np_only=True``.
        If unprovided, a default reason is used. Note that it is not possible
        to specify a custom reason with ``cpu_only``.
    np_only : bool, optional
        When ``True``, the test is skipped/xfailed for all backends other
        than the default NumPy backend. There is no need to provide
        any ``backends`` in this case. To specify a reason, pass a
        value to ``reason``. Default: ``False``.
    cpu_only : bool, optional
        When ``True``, the test is skipped/xfailed on non-CPU devices.
        There is no need to provide any ``backends`` in this case,
        but any ``backends`` will also be skipped on the CPU.
        Default: ``False``.
    exceptions : list, optional
        A list of exceptions for use with ``cpu_only`` or ``np_only``.
        This should be provided when delegation is implemented for some,
        but not all, non-CPU/non-NumPy backends.
    skip_or_xfail : str
        ``'skip'`` to skip, ``'xfail'`` to xfail.
    """
    ...

SCIPY_HYPOTHESIS_PROFILE = ...
if HAVE_SCPDT:
    @contextmanager
    def warnings_errors_and_rng(test=...): # -> Generator[None, Any, None]:
        """Temporarily turn (almost) all warnings to errors.

        Filter out known warnings which we allow.
        """
        ...
    
