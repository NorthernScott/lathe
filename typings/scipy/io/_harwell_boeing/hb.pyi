"""
This type stub file was generated by pyright.
"""

"""
Implementation of Harwell-Boeing read/write.

At the moment not the full Harwell-Boeing format is supported. Supported
features are:

    - assembled, non-symmetric, real matrices
    - integer for pointer/indices
    - exponential format for float values, and int format

"""
__all__ = ["hb_read", "hb_write"]
class MalformedHeader(Exception):
    ...


class LineOverflow(Warning):
    ...


class HBInfo:
    @classmethod
    def from_data(cls, m, title=..., key=..., mxtype=..., fmt=...): # -> Self:
        """Create a HBInfo instance from an existing sparse matrix.

        Parameters
        ----------
        m : sparse array or matrix
            the HBInfo instance will derive its parameters from m
        title : str
            Title to put in the HB header
        key : str
            Key
        mxtype : HBMatrixType
            type of the input matrix
        fmt : dict
            not implemented

        Returns
        -------
        hb_info : HBInfo instance
        """
        ...
    
    @classmethod
    def from_file(cls, fid): # -> Self:
        """Create a HBInfo instance from a file object containing a matrix in the
        HB format.

        Parameters
        ----------
        fid : file-like matrix
            File or file-like object containing a matrix in the HB format.

        Returns
        -------
        hb_info : HBInfo instance
        """
        ...
    
    def __init__(self, title, key, total_nlines, pointer_nlines, indices_nlines, values_nlines, mxtype, nrows, ncols, nnon_zeros, pointer_format_str, indices_format_str, values_format_str, right_hand_sides_nlines=..., nelementals=...) -> None:
        """Do not use this directly, but the class ctrs (from_* functions)."""
        ...
    
    def dump(self): # -> str:
        """Gives the header corresponding to this instance as a string."""
        ...
    


class HBMatrixType:
    """Class to hold the matrix type."""
    _q2f_type = ...
    _q2f_structure = ...
    _q2f_storage = ...
    _f2q_type = ...
    _f2q_structure = ...
    _f2q_storage = ...
    @classmethod
    def from_fortran(cls, fmt): # -> Self:
        ...
    
    def __init__(self, value_type, structure, storage=...) -> None:
        ...
    
    @property
    def fortran_format(self): # -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class HBFile:
    def __init__(self, file, hb_info=...) -> None:
        """Create a HBFile instance.

        Parameters
        ----------
        file : file-object
            StringIO work as well
        hb_info : HBInfo, optional
            Should be given as an argument for writing, in which case the file
            should be writable.
        """
        ...
    
    @property
    def title(self): # -> str:
        ...
    
    @property
    def key(self): # -> str:
        ...
    
    @property
    def type(self):
        ...
    
    @property
    def structure(self):
        ...
    
    @property
    def storage(self):
        ...
    
    def read_matrix(self): # -> csc_array:
        ...
    
    def write_matrix(self, m): # -> None:
        ...
    


def hb_read(path_or_open_file, *, spmatrix=...): # -> csc_matrix | csc_array:
    """Read HB-format file.

    Parameters
    ----------
    path_or_open_file : path-like or file-like
        If a file-like object, it is used as-is. Otherwise, it is opened
        before reading.
    spmatrix : bool, optional (default: True)
        If ``True``, return sparse ``coo_matrix``. Otherwise return ``coo_array``.

    Returns
    -------
    data : csc_array or csc_matrix
        The data read from the HB file as a sparse array.

    Notes
    -----
    At the moment not the full Harwell-Boeing format is supported. Supported
    features are:

        - assembled, non-symmetric, real matrices
        - integer for pointer/indices
        - exponential format for float values, and int format

    Examples
    --------
    We can read and write a harwell-boeing format file:

    >>> from scipy.io import hb_read, hb_write
    >>> from scipy.sparse import csr_array, eye
    >>> data = csr_array(eye(3))  # create a sparse array
    >>> hb_write("data.hb", data)  # write a hb file
    >>> print(hb_read("data.hb", spmatrix=False))  # read a hb file
    <Compressed Sparse Column sparse array of dtype 'float64'
        with 3 stored elements and shape (3, 3)>
        Coords	Values
        (0, 0)	1.0
        (1, 1)	1.0
        (2, 2)	1.0
    """
    ...

def hb_write(path_or_open_file, m, hb_info=...): # -> None:
    """Write HB-format file.

    Parameters
    ----------
    path_or_open_file : path-like or file-like
        If a file-like object, it is used as-is. Otherwise, it is opened
        before writing.
    m : sparse array or matrix
        the sparse array to write
    hb_info : HBInfo
        contains the meta-data for write

    Returns
    -------
    None

    Notes
    -----
    At the moment not the full Harwell-Boeing format is supported. Supported
    features are:

        - assembled, non-symmetric, real matrices
        - integer for pointer/indices
        - exponential format for float values, and int format

    Examples
    --------
    We can read and write a harwell-boeing format file:

    >>> from scipy.io import hb_read, hb_write
    >>> from scipy.sparse import csr_array, eye
    >>> data = csr_array(eye(3))  # create a sparse array
    >>> hb_write("data.hb", data)  # write a hb file
    >>> print(hb_read("data.hb", spmatrix=False))  # read a hb file
    <Compressed Sparse Column sparse array of dtype 'float64'
        with 3 stored elements and shape (3, 3)>
        Coords	Values
        (0, 0)	1.0
        (1, 1)	1.0
        (2, 2)	1.0
    """
    ...

