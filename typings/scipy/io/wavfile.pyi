"""
This type stub file was generated by pyright.
"""

from enum import IntEnum

"""
Module to read / write wav files using NumPy arrays

Functions
---------
`read`: Return the sample rate (in samples/sec) and data from a WAV file.

`write`: Write a NumPy array as a WAV file.

"""
__all__ = ['WavFileWarning', 'read', 'write']
class WavFileWarning(UserWarning):
    ...


class WAVE_FORMAT(IntEnum):
    """
    WAVE form wFormatTag IDs

    Complete list is in mmreg.h in Windows 10 SDK.  ALAC and OPUS are the
    newest additions, in v10.0.14393 2016-07
    """
    UNKNOWN = ...
    PCM = ...
    ADPCM = ...
    IEEE_FLOAT = ...
    VSELP = ...
    IBM_CVSD = ...
    ALAW = ...
    MULAW = ...
    DTS = ...
    DRM = ...
    WMAVOICE9 = ...
    WMAVOICE10 = ...
    OKI_ADPCM = ...
    DVI_ADPCM = ...
    IMA_ADPCM = ...
    MEDIASPACE_ADPCM = ...
    SIERRA_ADPCM = ...
    G723_ADPCM = ...
    DIGISTD = ...
    DIGIFIX = ...
    DIALOGIC_OKI_ADPCM = ...
    MEDIAVISION_ADPCM = ...
    CU_CODEC = ...
    HP_DYN_VOICE = ...
    YAMAHA_ADPCM = ...
    SONARC = ...
    DSPGROUP_TRUESPEECH = ...
    ECHOSC1 = ...
    AUDIOFILE_AF36 = ...
    APTX = ...
    AUDIOFILE_AF10 = ...
    PROSODY_1612 = ...
    LRC = ...
    DOLBY_AC2 = ...
    GSM610 = ...
    MSNAUDIO = ...
    ANTEX_ADPCME = ...
    CONTROL_RES_VQLPC = ...
    DIGIREAL = ...
    DIGIADPCM = ...
    CONTROL_RES_CR10 = ...
    NMS_VBXADPCM = ...
    CS_IMAADPCM = ...
    ECHOSC3 = ...
    ROCKWELL_ADPCM = ...
    ROCKWELL_DIGITALK = ...
    XEBEC = ...
    G721_ADPCM = ...
    G728_CELP = ...
    MSG723 = ...
    INTEL_G723_1 = ...
    INTEL_G729 = ...
    SHARP_G726 = ...
    MPEG = ...
    RT24 = ...
    PAC = ...
    MPEGLAYER3 = ...
    LUCENT_G723 = ...
    CIRRUS = ...
    ESPCM = ...
    VOXWARE = ...
    CANOPUS_ATRAC = ...
    G726_ADPCM = ...
    G722_ADPCM = ...
    DSAT = ...
    DSAT_DISPLAY = ...
    VOXWARE_BYTE_ALIGNED = ...
    VOXWARE_AC8 = ...
    VOXWARE_AC10 = ...
    VOXWARE_AC16 = ...
    VOXWARE_AC20 = ...
    VOXWARE_RT24 = ...
    VOXWARE_RT29 = ...
    VOXWARE_RT29HW = ...
    VOXWARE_VR12 = ...
    VOXWARE_VR18 = ...
    VOXWARE_TQ40 = ...
    VOXWARE_SC3 = ...
    VOXWARE_SC3_1 = ...
    SOFTSOUND = ...
    VOXWARE_TQ60 = ...
    MSRT24 = ...
    G729A = ...
    MVI_MVI2 = ...
    DF_G726 = ...
    DF_GSM610 = ...
    ISIAUDIO = ...
    ONLIVE = ...
    MULTITUDE_FT_SX20 = ...
    INFOCOM_ITS_G721_ADPCM = ...
    CONVEDIA_G729 = ...
    CONGRUENCY = ...
    SBC24 = ...
    DOLBY_AC3_SPDIF = ...
    MEDIASONIC_G723 = ...
    PROSODY_8KBPS = ...
    ZYXEL_ADPCM = ...
    PHILIPS_LPCBB = ...
    PACKED = ...
    MALDEN_PHONYTALK = ...
    RACAL_RECORDER_GSM = ...
    RACAL_RECORDER_G720_A = ...
    RACAL_RECORDER_G723_1 = ...
    RACAL_RECORDER_TETRA_ACELP = ...
    NEC_AAC = ...
    RAW_AAC1 = ...
    RHETOREX_ADPCM = ...
    IRAT = ...
    VIVO_G723 = ...
    VIVO_SIREN = ...
    PHILIPS_CELP = ...
    PHILIPS_GRUNDIG = ...
    DIGITAL_G723 = ...
    SANYO_LD_ADPCM = ...
    SIPROLAB_ACEPLNET = ...
    SIPROLAB_ACELP4800 = ...
    SIPROLAB_ACELP8V3 = ...
    SIPROLAB_G729 = ...
    SIPROLAB_G729A = ...
    SIPROLAB_KELVIN = ...
    VOICEAGE_AMR = ...
    G726ADPCM = ...
    DICTAPHONE_CELP68 = ...
    DICTAPHONE_CELP54 = ...
    QUALCOMM_PUREVOICE = ...
    QUALCOMM_HALFRATE = ...
    TUBGSM = ...
    MSAUDIO1 = ...
    WMAUDIO2 = ...
    WMAUDIO3 = ...
    WMAUDIO_LOSSLESS = ...
    WMASPDIF = ...
    UNISYS_NAP_ADPCM = ...
    UNISYS_NAP_ULAW = ...
    UNISYS_NAP_ALAW = ...
    UNISYS_NAP_16K = ...
    SYCOM_ACM_SYC008 = ...
    SYCOM_ACM_SYC701_G726L = ...
    SYCOM_ACM_SYC701_CELP54 = ...
    SYCOM_ACM_SYC701_CELP68 = ...
    KNOWLEDGE_ADVENTURE_ADPCM = ...
    FRAUNHOFER_IIS_MPEG2_AAC = ...
    DTS_DS = ...
    CREATIVE_ADPCM = ...
    CREATIVE_FASTSPEECH8 = ...
    CREATIVE_FASTSPEECH10 = ...
    UHER_ADPCM = ...
    ULEAD_DV_AUDIO = ...
    ULEAD_DV_AUDIO_1 = ...
    QUARTERDECK = ...
    ILINK_VC = ...
    RAW_SPORT = ...
    ESST_AC3 = ...
    GENERIC_PASSTHRU = ...
    IPI_HSX = ...
    IPI_RPELP = ...
    CS2 = ...
    SONY_SCX = ...
    SONY_SCY = ...
    SONY_ATRAC3 = ...
    SONY_SPC = ...
    TELUM_AUDIO = ...
    TELUM_IA_AUDIO = ...
    NORCOM_VOICE_SYSTEMS_ADPCM = ...
    FM_TOWNS_SND = ...
    MICRONAS = ...
    MICRONAS_CELP833 = ...
    BTV_DIGITAL = ...
    INTEL_MUSIC_CODER = ...
    INDEO_AUDIO = ...
    QDESIGN_MUSIC = ...
    ON2_VP7_AUDIO = ...
    ON2_VP6_AUDIO = ...
    VME_VMPCM = ...
    TPC = ...
    LIGHTWAVE_LOSSLESS = ...
    OLIGSM = ...
    OLIADPCM = ...
    OLICELP = ...
    OLISBC = ...
    OLIOPR = ...
    LH_CODEC = ...
    LH_CODEC_CELP = ...
    LH_CODEC_SBC8 = ...
    LH_CODEC_SBC12 = ...
    LH_CODEC_SBC16 = ...
    NORRIS = ...
    ISIAUDIO_2 = ...
    SOUNDSPACE_MUSICOMPRESS = ...
    MPEG_ADTS_AAC = ...
    MPEG_RAW_AAC = ...
    MPEG_LOAS = ...
    NOKIA_MPEG_ADTS_AAC = ...
    NOKIA_MPEG_RAW_AAC = ...
    VODAFONE_MPEG_ADTS_AAC = ...
    VODAFONE_MPEG_RAW_AAC = ...
    MPEG_HEAAC = ...
    VOXWARE_RT24_SPEECH = ...
    SONICFOUNDRY_LOSSLESS = ...
    INNINGS_TELECOM_ADPCM = ...
    LUCENT_SX8300P = ...
    LUCENT_SX5363S = ...
    CUSEEME = ...
    NTCSOFT_ALF2CM_ACM = ...
    DVM = ...
    DTS2 = ...
    MAKEAVIS = ...
    DIVIO_MPEG4_AAC = ...
    NOKIA_ADAPTIVE_MULTIRATE = ...
    DIVIO_G726 = ...
    LEAD_SPEECH = ...
    LEAD_VORBIS = ...
    WAVPACK_AUDIO = ...
    OGG_VORBIS_MODE_1 = ...
    OGG_VORBIS_MODE_2 = ...
    OGG_VORBIS_MODE_3 = ...
    OGG_VORBIS_MODE_1_PLUS = ...
    OGG_VORBIS_MODE_2_PLUS = ...
    OGG_VORBIS_MODE_3_PLUS = ...
    ALAC = ...
    _3COM_NBX = ...
    OPUS = ...
    FAAD_AAC = ...
    AMR_NB = ...
    AMR_WB = ...
    AMR_WP = ...
    GSM_AMR_CBR = ...
    GSM_AMR_VBR_SID = ...
    COMVERSE_INFOSYS_G723_1 = ...
    COMVERSE_INFOSYS_AVQSBC = ...
    COMVERSE_INFOSYS_SBC = ...
    SYMBOL_G729_A = ...
    VOICEAGE_AMR_WB = ...
    INGENIENT_G726 = ...
    MPEG4_AAC = ...
    ENCORE_G726 = ...
    ZOLL_ASAO = ...
    SPEEX_VOICE = ...
    VIANIX_MASC = ...
    WM9_SPECTRUM_ANALYZER = ...
    WMF_SPECTRUM_ANAYZER = ...
    GSM_610 = ...
    GSM_620 = ...
    GSM_660 = ...
    GSM_690 = ...
    GSM_ADAPTIVE_MULTIRATE_WB = ...
    POLYCOM_G722 = ...
    POLYCOM_G728 = ...
    POLYCOM_G729_A = ...
    POLYCOM_SIREN = ...
    GLOBAL_IP_ILBC = ...
    RADIOTIME_TIME_SHIFT_RADIO = ...
    NICE_ACA = ...
    NICE_ADPCM = ...
    VOCORD_G721 = ...
    VOCORD_G726 = ...
    VOCORD_G722_1 = ...
    VOCORD_G728 = ...
    VOCORD_G729 = ...
    VOCORD_G729_A = ...
    VOCORD_G723_1 = ...
    VOCORD_LBC = ...
    NICE_G728 = ...
    FRACE_TELECOM_G729 = ...
    CODIAN = ...
    FLAC = ...
    EXTENSIBLE = ...
    DEVELOPMENT = ...


KNOWN_WAVE_FORMATS = ...
def read(filename, mmap=...): # -> tuple[Any, Any | ndarray[Any, dtype[Any]] | memmap[Any, dtype[Any]]]:
    """
    Open a WAV file.

    Return the sample rate (in samples/sec) and data from an LPCM WAV file.

    Parameters
    ----------
    filename : string or open file handle
        Input WAV file.
    mmap : bool, optional
        Whether to read data as memory-mapped (default: False).  Not compatible
        with some bit depths; see Notes.  Only to be used on real files.

        .. versionadded:: 0.12.0

    Returns
    -------
    rate : int
        Sample rate of WAV file.
    data : numpy array
        Data read from WAV file. Data-type is determined from the file;
        see Notes.  Data is 1-D for 1-channel WAV, or 2-D of shape
        (Nsamples, Nchannels) otherwise. If a file-like input without a
        C-like file descriptor (e.g., :class:`python:io.BytesIO`) is
        passed, this will not be writeable.

    Notes
    -----
    Common data types: [1]_

    =====================  ===========  ===========  =============
         WAV format            Min          Max       NumPy dtype
    =====================  ===========  ===========  =============
    32-bit floating-point  -1.0         +1.0         float32
    32-bit integer PCM     -2147483648  +2147483647  int32
    24-bit integer PCM     -2147483648  +2147483392  int32
    16-bit integer PCM     -32768       +32767       int16
    8-bit integer PCM      0            255          uint8
    =====================  ===========  ===========  =============

    WAV files can specify arbitrary bit depth, and this function supports
    reading any integer PCM depth from 1 to 64 bits.  Data is returned in the
    smallest compatible numpy int type, in left-justified format.  8-bit and
    lower is unsigned, while 9-bit and higher is signed.

    For example, 24-bit data will be stored as int32, with the MSB of the
    24-bit data stored at the MSB of the int32, and typically the least
    significant byte is 0x00.  (However, if a file actually contains data past
    its specified bit depth, those bits will be read and output, too. [2]_)

    This bit justification and sign matches WAV's native internal format, which
    allows memory mapping of WAV files that use 1, 2, 4, or 8 bytes per sample
    (so 24-bit files cannot be memory-mapped, but 32-bit can).

    IEEE float PCM in 32- or 64-bit format is supported, with or without mmap.
    Values exceeding [-1, +1] are not clipped.

    Non-linear PCM (mu-law, A-law) is not supported.

    References
    ----------
    .. [1] IBM Corporation and Microsoft Corporation, "Multimedia Programming
       Interface and Data Specifications 1.0", section "Data Format of the
       Samples", August 1991
       http://www.tactilemedia.com/info/MCI_Control_Info.html
    .. [2] Adobe Systems Incorporated, "Adobe Audition 3 User Guide", section
       "Audio file formats: 24-bit Packed Int (type 1, 20-bit)", 2007

    Examples
    --------
    >>> from os.path import dirname, join as pjoin
    >>> from scipy.io import wavfile
    >>> import scipy.io

    Get the filename for an example .wav file from the tests/data directory.

    >>> data_dir = pjoin(dirname(scipy.io.__file__), 'tests', 'data')
    >>> wav_fname = pjoin(data_dir, 'test-44100Hz-2ch-32bit-float-be.wav')

    Load the .wav file contents.

    >>> samplerate, data = wavfile.read(wav_fname)
    >>> print(f"number of channels = {data.shape[1]}")
    number of channels = 2
    >>> length = data.shape[0] / samplerate
    >>> print(f"length = {length}s")
    length = 0.01s

    Plot the waveform.

    >>> import matplotlib.pyplot as plt
    >>> import numpy as np
    >>> time = np.linspace(0., length, data.shape[0])
    >>> plt.plot(time, data[:, 0], label="Left channel")
    >>> plt.plot(time, data[:, 1], label="Right channel")
    >>> plt.legend()
    >>> plt.xlabel("Time [s]")
    >>> plt.ylabel("Amplitude")
    >>> plt.show()

    """
    ...

def write(filename, rate, data): # -> None:
    """
    Write a NumPy array as a WAV file.

    Parameters
    ----------
    filename : string or open file handle
        Output wav file.
    rate : int
        The sample rate (in samples/sec).
    data : ndarray
        A 1-D or 2-D NumPy array of either integer or float data-type.

    Notes
    -----
    * Writes a simple uncompressed WAV file.
    * To write multiple-channels, use a 2-D array of shape
      (Nsamples, Nchannels).
    * The bits-per-sample and PCM/float will be determined by the data-type.

    Common data types: [1]_

    =====================  ===========  ===========  =============
         WAV format            Min          Max       NumPy dtype
    =====================  ===========  ===========  =============
    32-bit floating-point  -1.0         +1.0         float32
    32-bit PCM             -2147483648  +2147483647  int32
    16-bit PCM             -32768       +32767       int16
    8-bit PCM              0            255          uint8
    =====================  ===========  ===========  =============

    Note that 8-bit PCM is unsigned.

    References
    ----------
    .. [1] IBM Corporation and Microsoft Corporation, "Multimedia Programming
       Interface and Data Specifications 1.0", section "Data Format of the
       Samples", August 1991
       http://www.tactilemedia.com/info/MCI_Control_Info.html

    Examples
    --------
    Create a 100Hz sine wave, sampled at 44100Hz.
    Write to 16-bit PCM, Mono.

    >>> from scipy.io.wavfile import write
    >>> import numpy as np
    >>> samplerate = 44100; fs = 100
    >>> t = np.linspace(0., 1., samplerate)
    >>> amplitude = np.iinfo(np.int16).max
    >>> data = amplitude * np.sin(2. * np.pi * fs * t)
    >>> write("example.wav", samplerate, data.astype(np.int16))

    """
    ...

