"""
This type stub file was generated by pyright.
"""

from ._matrix import spmatrix
from ._base import _spbase, sparray
from ._index import IndexMixin

"""List of Lists sparse matrix class
"""
__docformat__ = ...
__all__ = ['lil_array', 'lil_matrix', 'isspmatrix_lil']
class _lil_base(_spbase, IndexMixin):
    _format = ...
    def __init__(self, arg1, shape=..., dtype=..., copy=..., *, maxprint=...) -> None:
        ...
    
    def __iadd__(self, other): # -> Self:
        ...
    
    def __isub__(self, other): # -> Self:
        ...
    
    def __imul__(self, other): # -> Self | _NotImplementedType:
        ...
    
    def __itruediv__(self, other): # -> Self | _NotImplementedType:
        ...
    
    def count_nonzero(self, axis=...): # -> int | NDArray[signedinteger[_NBitIntP]]:
        ...
    
    def getrowview(self, i): # -> lil_array:
        """Returns a view of the 'i'th row (without copying).
        """
        ...
    
    def getrow(self, i): # -> lil_array:
        """Returns a copy of the 'i'th row.
        """
        ...
    
    def __getitem__(self, key): # -> Any | floating[_64Bit]:
        ...
    
    def __setitem__(self, key, x): # -> None:
        ...
    
    def __truediv__(self, other): # -> lil_array:
        ...
    
    def copy(self): # -> lil_array:
        ...
    
    def reshape(self, *args, **kwargs): # -> lil_array | Self:
        ...
    
    def resize(self, *shape): # -> None:
        ...
    
    def toarray(self, order=..., out=...):
        ...
    
    def transpose(self, axes=..., copy=...): # -> lil_array:
        ...
    
    def tolil(self, copy=...): # -> lil_array | Self:
        ...
    
    def tocsr(self, copy=...): # -> csr_array:
        ...
    


def isspmatrix_lil(x): # -> bool:
    """Is `x` of lil_matrix type?

    Parameters
    ----------
    x
        object to check for being a lil matrix

    Returns
    -------
    bool
        True if `x` is a lil matrix, False otherwise

    Examples
    --------
    >>> from scipy.sparse import lil_array, lil_matrix, coo_matrix, isspmatrix_lil
    >>> isspmatrix_lil(lil_matrix([[5]]))
    True
    >>> isspmatrix_lil(lil_array([[5]]))
    False
    >>> isspmatrix_lil(coo_matrix([[5]]))
    False
    """
    ...

class lil_array(_lil_base, sparray):
    """
    Row-based LIst of Lists sparse array.

    This is a structure for constructing sparse arrays incrementally.
    Note that inserting a single item can take linear time in the worst case;
    to construct the array efficiently, make sure the items are pre-sorted by
    index, per row.

    This can be instantiated in several ways:
        lil_array(D)
            where D is a 2-D ndarray

        lil_array(S)
            with another sparse array or matrix S (equivalent to S.tolil())

        lil_array((M, N), [dtype])
            to construct an empty array with shape (M, N)
            dtype is optional, defaulting to dtype='d'.

    Attributes
    ----------
    dtype : dtype
        Data type of the array
    shape : 2-tuple
        Shape of the array
    ndim : int
        Number of dimensions (this is always 2)
    nnz
    size
    data
        LIL format data array of the array
    rows
        LIL format row index array of the array
    T

    Notes
    -----
    Sparse arrays can be used in arithmetic operations: they support
    addition, subtraction, multiplication, division, and matrix power.

    Advantages of the LIL format
        - supports flexible slicing
        - changes to the array sparsity structure are efficient

    Disadvantages of the LIL format
        - arithmetic operations LIL + LIL are slow (consider CSR or CSC)
        - slow column slicing (consider CSC)
        - slow matrix vector products (consider CSR or CSC)

    Intended Usage
        - LIL is a convenient format for constructing sparse arrays
        - once an array has been constructed, convert to CSR or
          CSC format for fast arithmetic and matrix vector operations
        - consider using the COO format when constructing large arrays

    Data Structure
        - An array (``self.rows``) of rows, each of which is a sorted
          list of column indices of non-zero elements.
        - The corresponding nonzero values are stored in similar
          fashion in ``self.data``.

    """
    ...


class lil_matrix(spmatrix, _lil_base):
    """
    Row-based LIst of Lists sparse matrix.

    This is a structure for constructing sparse matrices incrementally.
    Note that inserting a single item can take linear time in the worst case;
    to construct the matrix efficiently, make sure the items are pre-sorted by
    index, per row.

    This can be instantiated in several ways:
        lil_matrix(D)
            where D is a 2-D ndarray

        lil_matrix(S)
            with another sparse array or matrix S (equivalent to S.tolil())

        lil_matrix((M, N), [dtype])
            to construct an empty matrix with shape (M, N)
            dtype is optional, defaulting to dtype='d'.

    Attributes
    ----------
    dtype : dtype
        Data type of the matrix
    shape : 2-tuple
        Shape of the matrix
    ndim : int
        Number of dimensions (this is always 2)
    nnz
    size
    data
        LIL format data array of the matrix
    rows
        LIL format row index array of the matrix
    T

    Notes
    -----
    Sparse matrices can be used in arithmetic operations: they support
    addition, subtraction, multiplication, division, and matrix power.

    Advantages of the LIL format
        - supports flexible slicing
        - changes to the matrix sparsity structure are efficient

    Disadvantages of the LIL format
        - arithmetic operations LIL + LIL are slow (consider CSR or CSC)
        - slow column slicing (consider CSC)
        - slow matrix vector products (consider CSR or CSC)

    Intended Usage
        - LIL is a convenient format for constructing sparse matrices
        - once a matrix has been constructed, convert to CSR or
          CSC format for fast arithmetic and matrix vector operations
        - consider using the COO format when constructing large matrices

    Data Structure
        - An array (``self.rows``) of rows, each of which is a sorted
          list of column indices of non-zero elements.
        - The corresponding nonzero values are stored in similar
          fashion in ``self.data``.

    """
    ...


