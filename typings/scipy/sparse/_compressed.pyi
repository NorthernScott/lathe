"""
This type stub file was generated by pyright.
"""

from ._data import _data_matrix, _minmax_mixin
from ._index import IndexMixin

"""Base class for sparse matrix formats using compressed storage."""
__all__ = []
class _cs_matrix(_data_matrix, _minmax_mixin, IndexMixin):
    """
    base array/matrix class for compressed row- and column-oriented arrays/matrices
    """
    def __init__(self, arg1, shape=..., dtype=..., copy=..., *, maxprint=...) -> None:
        ...
    
    def count_nonzero(self, axis=...): # -> int | NDArray[intp] | NDArray[Any]:
        ...
    
    def check_format(self, full_check=...): # -> None:
        """Check whether the array/matrix respects the CSR or CSC format.

        Parameters
        ----------
        full_check : bool, optional
            If `True`, run rigorous check, scanning arrays for valid values.
            Note that activating those check might copy arrays for casting,
            modifying indices and index pointers' inplace.
            If `False`, run basic checks on attributes. O(1) operations.
            Default is `True`.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def multiply(self, other):
        """Point-wise multiplication by array/matrix, vector, or scalar."""
        ...
    
    def diagonal(self, k=...): # -> NDArray[float64]:
        ...
    
    def maximum(self, other): # -> Self:
        ...
    
    def minimum(self, other): # -> Self:
        ...
    
    def sum(self, axis=..., dtype=..., out=...): # -> matrix[Any, Any] | Any:
        """Sum the array/matrix over the given axis.  If the axis is None, sum
        over both rows and columns, returning a scalar.
        """
        ...
    
    def tocoo(self, copy=...): # -> coo_array:
        ...
    
    def toarray(self, order=..., out=...):
        ...
    
    def eliminate_zeros(self): # -> None:
        """Remove zero entries from the array/matrix

        This is an *in place* operation.
        """
        ...
    
    @property
    def has_canonical_format(self) -> bool:
        """Whether the array/matrix has sorted indices and no duplicates

        Returns
            - True: if the above applies
            - False: otherwise

        has_canonical_format implies has_sorted_indices, so if the latter flag
        is False, so will the former be; if the former is found True, the
        latter flag is also set.
        """
        ...
    
    @has_canonical_format.setter
    def has_canonical_format(self, val: bool): # -> None:
        ...
    
    def sum_duplicates(self): # -> None:
        """Eliminate duplicate entries by adding them together

        This is an *in place* operation.
        """
        ...
    
    @property
    def has_sorted_indices(self) -> bool:
        """Whether the indices are sorted

        Returns
            - True: if the indices of the array/matrix are in sorted order
            - False: otherwise
        """
        ...
    
    @has_sorted_indices.setter
    def has_sorted_indices(self, val: bool): # -> None:
        ...
    
    def sorted_indices(self):
        """Return a copy of this array/matrix with sorted indices
        """
        ...
    
    def sort_indices(self): # -> None:
        """Sort the indices of this array/matrix *in place*
        """
        ...
    
    def prune(self): # -> None:
        """Remove empty space after all non-zero elements.
        """
        ...
    
    def resize(self, *shape): # -> None:
        ...
    


