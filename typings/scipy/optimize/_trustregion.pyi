"""
This type stub file was generated by pyright.
"""

"""Trust-region optimization."""
__all__ = []
class BaseQuadraticSubproblem:
    """
    Base/abstract class defining the quadratic model for trust-region
    minimization. Child classes must implement the ``solve`` method.

    Values of the objective function, Jacobian and Hessian (if provided) at
    the current iterate ``x`` are evaluated on demand and then stored as
    attributes ``fun``, ``jac``, ``hess``.
    """
    def __init__(self, x, fun, jac, hess=..., hessp=...) -> None:
        ...
    
    def __call__(self, p):
        ...
    
    @property
    def fun(self):
        """Value of objective function at current iteration."""
        ...
    
    @property
    def jac(self):
        """Value of Jacobian of objective function at current iteration."""
        ...
    
    @property
    def hess(self):
        """Value of Hessian of objective function at current iteration."""
        ...
    
    def hessp(self, p): # -> Any:
        ...
    
    @property
    def jac_mag(self): # -> floating[Any]:
        """Magnitude of jacobian of objective function at current iteration."""
        ...
    
    def get_boundaries_intersections(self, z, d, trust_radius): # -> list[Any]:
        """
        Solve the scalar quadratic equation ``||z + t d|| == trust_radius``.
        This is like a line-sphere intersection.
        Return the two values of t, sorted from low to high.
        """
        ...
    
    def solve(self, trust_radius):
        ...
    


