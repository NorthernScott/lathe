"""
This type stub file was generated by pyright.
"""

from ._trustregion import BaseQuadraticSubproblem

"""Dog-leg trust-region optimization."""
__all__ = []
class DoglegSubproblem(BaseQuadraticSubproblem):
    """Quadratic subproblem solved by the dogleg method"""
    def cauchy_point(self):
        """
        The Cauchy point is minimal along the direction of steepest descent.
        """
        ...
    
    def newton_point(self): # -> NDArray[Any]:
        """
        The Newton point is a global minimum of the approximate function.
        """
        ...
    
    def solve(self, trust_radius): # -> tuple[NDArray[Any] | Any, Literal[False]] | tuple[Any, Literal[True]]:
        """
        Minimize a function using the dog-leg trust-region algorithm.

        This algorithm requires function values and first and second derivatives.
        It also performs a costly Hessian decomposition for most iterations,
        and the Hessian is required to be positive definite.

        Parameters
        ----------
        trust_radius : float
            We are allowed to wander only this far away from the origin.

        Returns
        -------
        p : ndarray
            The proposed step.
        hits_boundary : bool
            True if the proposed step is on the boundary of the trust region.

        Notes
        -----
        The Hessian is required to be positive definite.

        References
        ----------
        .. [1] Jorge Nocedal and Stephen Wright,
               Numerical Optimization, second edition,
               Springer-Verlag, 2006, page 73.
        """
        ...
    


