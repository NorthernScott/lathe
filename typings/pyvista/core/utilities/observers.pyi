"""
This type stub file was generated by pyright.
"""

from typing import NamedTuple

"""
This type stub file was generated by pyright.
"""
def set_error_output_file(filename):
    """Set a file to write out the VTK errors.

    Parameters
    ----------
    filename : str, Path
        Path to the file to write VTK errors to.

    Returns
    -------
    vtkFileOutputWindow
        VTK file output window.
    vtkOutputWindow
        VTK output window.

    """
    ...

class VtkErrorCatcher:
    """Context manager to temporarily catch VTK errors.

    Parameters
    ----------
    raise_errors : bool, default: False
        Raise a ``RuntimeError`` when a VTK error is encountered.

    send_to_logging : bool, default: True
        Determine whether VTK errors raised within the context should
        also be sent to logging.

    Examples
    --------
    Catch VTK errors using the context manager.

    >>> import pyvista as pv
    >>> with pv.VtkErrorCatcher() as error_catcher:
    ...     sphere = pv.Sphere()
    ...
    """
    def __init__(self, raise_errors=..., send_to_logging=...) -> None:
        """Initialize context manager."""
        ...
    
    def __enter__(self):
        """Observe VTK string output window for errors."""
        ...
    
    def __exit__(self, *args):
        """Stop observing VTK string output window."""
        ...
    


class VtkEvent(NamedTuple):
    """Named tuple to store VTK event information."""
    kind: str
    path: str
    address: str
    alert: str
    ...


class Observer:
    """A standard class for observing VTK objects."""
    def __init__(self, event_type=..., log=..., store_history=...) -> None:
        """Initialize observer."""
        ...
    
    @staticmethod
    def parse_message(message):
        """Parse the given message."""
        ...
    
    def log_message(self, kind, alert):
        """Parse different event types and passes them to logging."""
        ...
    
    def __call__(self, _obj, _event, message):
        """Declare standard call function for the observer.

        On an event occurrence, this function executes.

        """
        ...
    
    def has_event_occurred(self):
        """Ask self if an error has occurred since last queried.

        This resets the observer's status.

        """
        ...
    
    def get_message(self, etc=...):
        """Get the last set error message.

        Returns
        -------
            str: the last set error message

        """
        ...
    
    def observe(self, algorithm):
        """Make this an observer of an algorithm."""
        ...
    


def send_errors_to_logging():
    """Send all VTK error/warning messages to Python's logging module."""
    ...

class ProgressMonitor:
    """A standard class for monitoring the progress of a VTK algorithm.

    This must be use in a ``with`` context and it will block keyboard
    interrupts from happening until the exit event as interrupts will crash
    the kernel if the VTK algorithm is still executing.

    Parameters
    ----------
    algorithm
        VTK algorithm or filter.

    message : str, default: ""
        Message to display in the progress bar.

    """
    def __init__(self, algorithm, message=...) -> None:
        """Initialize observer."""
        ...
    
    def handler(self, sig, frame):
        """Pass signal to custom interrupt handler."""
        ...
    
    def __call__(self, obj, *args):
        """Call progress update callback.

        On an event occurrence, this function executes.
        """
        ...
    
    def __enter__(self):
        """Enter event for ``with`` context."""
        ...
    
    def __exit__(self, *args):
        """Exit event for ``with`` context."""
        ...
    


