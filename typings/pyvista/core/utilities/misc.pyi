"""
This type stub file was generated by pyright.
"""

import enum
from functools import lru_cache
from typing import TYPE_CHECKING, TypeVar
from .._typing_core import VectorLike

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
T = TypeVar('T', bound='AnnotatedIntEnum')
def assert_empty_kwargs(**kwargs):
    """Assert that all keyword arguments have been used (internal helper).

    If any keyword arguments are passed, a ``TypeError`` is raised.

    Parameters
    ----------
    **kwargs : dict
        Keyword arguments passed to the function.

    Returns
    -------
    bool
        ``True`` when successful.

    Raises
    ------
    TypeError
        If any keyword arguments are passed, a ``TypeError`` is raised.

    """
    ...

def check_valid_vector(point: VectorLike[float], name: str = ...) -> None:
    """
    Check if a vector contains three components.

    Parameters
    ----------
    point : VectorLike[float]
        Input vector to check. Must be an iterable with exactly three components.
    name : str, optional
        Name to use in the error messages. If not provided, "Vector" will be used.

    Raises
    ------
    TypeError
        If the input is not an iterable.
    ValueError
        If the input does not have exactly three components.

    """
    ...

def abstract_class(cls_):
    """Decorate a class, overriding __new__.

    Preventing a class from being instantiated similar to abc.ABCMeta
    but does not require an abstract method.

    Parameters
    ----------
    cls_ : type
        The class to be decorated as abstract.

    """
    ...

class AnnotatedIntEnum(int, enum.Enum):
    """Annotated enum type."""
    annotation: str
    def __new__(cls, value, annotation: str):
        """Initialize."""
        ...
    
    @classmethod
    def from_str(cls, input_str):
        """Create an enum member from a string.

        Parameters
        ----------
        input_str : str
            The string representation of the annotation for the enum member.

        Returns
        -------
        AnnotatedIntEnum
            The enum member with the specified annotation.

        Raises
        ------
        ValueError
            If there is no enum member with the specified annotation.
        """
        ...
    
    @classmethod
    def from_any(cls: type[T], value: T | int | str) -> T:
        """Create an enum member from a string, int, etc.

        Parameters
        ----------
        value : int | str | AnnotatedIntEnum
            The value used to determine the corresponding enum member.

        Returns
        -------
        AnnotatedIntEnum
            The enum member matching the specified value.

        Raises
        ------
        ValueError
            If there is no enum member matching the specified value.
        """
        ...
    


@lru_cache(maxsize=None)
def has_module(module_name):
    """Return if a module can be imported.

    Parameters
    ----------
    module_name : str
        Name of the module to check.

    Returns
    -------
    bool
        ``True`` if the module can be imported, otherwise ``False``.
    """
    ...

def try_callback(func, *args):
    """Wrap a given callback in a try statement.

    Parameters
    ----------
    func : callable
        Callable object.

    *args
        Any arguments.

    """
    ...

def threaded(fn):
    """Call a function using a thread.

    Parameters
    ----------
    fn : callable
        Callable object.

    Returns
    -------
    function
        Wrapped function.

    """
    ...

class conditional_decorator:
    """Conditional decorator for methods.

    Parameters
    ----------
    dec : callable
        The decorator to be applied conditionally.
    condition : bool
        Condition to match. If ``True``, the decorator is applied. If
        ``False``, the function is returned unchanged.

    """
    def __init__(self, dec, condition) -> None:
        """Initialize."""
        ...
    
    def __call__(self, func):
        """Call the decorated function if condition is matched."""
        ...
    


def no_new_attr(cls):
    """Override __setattr__ to not permit new attributes."""
    ...

