"""
This type stub file was generated by pyright.
"""

from pyvista.core.utilities.misc import abstract_class

"""Filters module with a class to manage filters/algorithms for composite datasets."""
@abstract_class
class CompositeFilters:
    """An internal class to manage filters/algorithms for composite datasets."""
    def extract_geometry(self): # -> DataSet | pyvista_ndarray | None:
        """Extract the surface the geometry of all blocks.

        Place this filter at the end of a pipeline before a polydata
        consumer such as a polydata mapper to extract geometry from
        all blocks and append them to one polydata object.

        Returns
        -------
        pyvista.PolyData
            Surface of the composite dataset.

        """
        ...
    
    def combine(self, merge_points=..., tolerance=...): # -> DataSet | pyvista_ndarray | None:
        """Combine all blocks into a single unstructured grid.

        Parameters
        ----------
        merge_points : bool, default: False
            Merge coincidental points.

        tolerance : float, default: 0.0
            The absolute tolerance to use to find coincident points when
            ``merge_points=True``.

        Returns
        -------
        pyvista.UnstructuredGrid
            Combined blocks.

        Examples
        --------
        Combine blocks within a multiblock without merging points.

        >>> import pyvista as pv
        >>> block = pv.MultiBlock(
        ...     [
        ...         pv.Cube(clean=False),
        ...         pv.Cube(center=(1, 0, 0), clean=False),
        ...     ]
        ... )
        >>> merged = block.combine()
        >>> merged.n_points
        48

        Combine blocks and merge points

        >>> merged = block.combine(merge_points=True)
        >>> merged.n_points
        12

        """
        ...
    
    clip = ...
    clip_box = ...
    slice = ...
    slice_orthogonal = ...
    slice_along_axis = ...
    slice_along_line = ...
    extract_all_edges = ...
    elevation = ...
    compute_cell_sizes = ...
    cell_centers = ...
    cell_data_to_point_data = ...
    point_data_to_cell_data = ...
    sample = ...
    triangulate = ...
    def outline(self, generate_faces=..., nested=..., progress_bar=...): # -> DataSet | pyvista_ndarray | Any | None:
        """Produce an outline of the full extent for the all blocks in this composite dataset.

        Parameters
        ----------
        generate_faces : bool, default: False
            Generate solid faces for the box.

        nested : bool, default: False
            If ``True``, these creates individual outlines for each nested dataset.

        progress_bar : bool, default: False
            Display a progress bar to indicate progress.

        Returns
        -------
        pyvista.PolyData
            Mesh containing the outline.

        """
        ...
    
    def outline_corners(self, factor=..., nested=..., progress_bar=...): # -> DataSet | pyvista_ndarray | Any | None:
        """Produce an outline of the corners for the all blocks in this composite dataset.

        Parameters
        ----------
        factor : float, default: 0.2
            Controls the relative size of the corners to the length of
            the corresponding bounds.

        nested : bool, default: False
            If ``True``, these creates individual outlines for each nested dataset.

        progress_bar : bool, default: False
            Display a progress bar to indicate progress.

        Returns
        -------
        pyvista.PolyData
            Mesh containing outlined corners.

        """
        ...
    


