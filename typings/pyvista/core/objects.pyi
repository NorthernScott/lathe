"""
This type stub file was generated by pyright.
"""

from . import _vtk_core as _vtk
from .dataset import DataObject

"""
This type stub file was generated by pyright.
"""
class Table(DataObject, _vtk.vtkTable):
    """Wrapper for the ``vtkTable`` class.

    Create by passing a 2D NumPy array of shape (``n_rows`` by ``n_columns``)
    or from a dictionary containing NumPy arrays.

    Examples
    --------
    >>> import pyvista as pv
    >>> import numpy as np
    >>> arrays = np.random.default_rng().random((100, 3))
    >>> table = pv.Table(arrays)

    """
    def __init__(self, *args, deep=..., **kwargs) -> None:
        """Initialize the table."""
        ...
    
    @property
    def n_rows(self):
        """Return the number of rows.

        Returns
        -------
        int
            The number of rows.

        """
        ...
    
    @n_rows.setter
    def n_rows(self, n):
        """Set the number of rows.

        Parameters
        ----------
        n : int
            The number of rows.

        """
        ...
    
    @property
    def n_columns(self):
        """Return the number of columns.

        Returns
        -------
        int
            The number of columns.

        """
        ...
    
    @property
    def n_arrays(self):
        """Return the number of columns.

        Alias for: ``n_columns``.

        Returns
        -------
        int
            The number of columns.

        """
        ...
    
    @property
    def row_arrays(self):
        """Return the all row arrays.

        Returns
        -------
        int
            The all row arrays.

        """
        ...
    
    def keys(self):
        """Return the table keys.

        Returns
        -------
        list
            List of the array names of this table.

        """
        ...
    
    def items(self):
        """Return the table items.

        Returns
        -------
        list
            List containing tuples pairs of the name and array of the table arrays.

        """
        ...
    
    def values(self):
        """Return the table values.

        Returns
        -------
        list
            List of the table arrays.

        """
        ...
    
    def update(self, data):
        """Set the table data using a dict-like update.

        Parameters
        ----------
        data : DataSetAttributes
            Other dataset attributes to update from.

        """
        ...
    
    def pop(self, name):
        """Pop off an array by the specified name.

        Parameters
        ----------
        name : int or str
            Index or name of the row array.

        Returns
        -------
        pyvista.pyvista_ndarray
            PyVista array.

        """
        ...
    
    def __getitem__(self, index):
        """Search row data for an array."""
        ...
    
    def get(self, index):
        """Get an array by its name.

        Parameters
        ----------
        index : int or str
            Index or name of the row.

        Returns
        -------
        pyvista.pyvista_ndarray
            PyVista array.
        """
        ...
    
    def __setitem__(self, name, scalars):
        """Add/set an array in the row_arrays."""
        ...
    
    def __delitem__(self, name):
        """Remove an array by the specified name."""
        ...
    
    def __iter__(self):
        """Return the iterator across all arrays."""
        ...
    
    def __repr__(self):
        """Return the object representation."""
        ...
    
    def __str__(self) -> str:
        """Return the object string representation."""
        ...
    
    def to_pandas(self):
        """Create a Pandas DataFrame from this Table.

        Returns
        -------
        pandas.DataFrame
            This table represented as a pandas dataframe.

        """
        ...
    
    def save(self, *args, **kwargs):
        """Save the table."""
        ...
    
    def get_data_range(self, arr: str | None = ..., preference: str = ...) -> tuple[float, float]:
        """Get the min and max of a named array.

        Parameters
        ----------
        arr : str, numpy.ndarray, optional
            The name of the array to get the range. If ``None``, the active scalar
            is used.

        preference : str, optional
            When scalars is specified, this is the preferred array type
            to search for in the dataset.  Must be either ``'row'`` or
            ``'field'``.

        Returns
        -------
        tuple
            ``(min, max)`` of the array.

        """
        ...
    


