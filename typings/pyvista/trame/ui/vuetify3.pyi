"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING
from .base_viewer import BaseViewer
from trame_client.ui.core import AbstractLayout

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
def button(click, icon, tooltip):
    """Create a vuetify button."""
    ...

def checkbox(model, icons, tooltip):
    """Create a vuetify checkbox."""
    ...

def slider(model, tooltip, **kwargs):
    """Create a vuetify slider."""
    ...

def text_field(model, tooltip, **kwargs):
    """Create a vuetify text field."""
    ...

def select(model, tooltip, **kwargs):
    """Create a vuetify select menu."""
    ...

def divider(**kwargs):
    """Create a vuetify divider."""
    ...

class Viewer(BaseViewer):
    """Viewer implementation compatible with Vue 3 Trame Applications."""
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def make_layout(self, *args, **kwargs) -> AbstractLayout:
        """Create instance of an AbstractLayout which is appropriate for this viewer.

        Parameters
        ----------
        *args : tuple
            Positional arguments.

        **kwargs : dict, optional
            Keyword arguments.

        Returns
        -------
        VAppLayout (vue3)
            A layout this viewer can be embedded in.
        """
        ...
    
    def ui_controls(self, mode=..., default_server_rendering=..., v_show=...):
        """Create a VRow for the UI controls.

        Parameters
        ----------
        mode : str, default: 'trame'
            The UI view mode. Options are:

            * ``'trame'``: Uses a view that can switch between client and server
              rendering modes.
            * ``'server'``: Uses a view that is purely server rendering.
            * ``'client'``: Uses a view that is purely client rendering (generally
              safe without a virtual frame buffer)

        default_server_rendering : bool, default: True
            Whether to use server-side or client-side rendering on-start when
              using the ``'trame'`` mode.

        v_show : bool, optional
            Conditionally show the viewer controls.

        """
        ...
    
    def ui(self, mode=..., default_server_rendering=..., collapse_menu=..., add_menu=..., add_menu_items=..., **kwargs):
        """Generate VContainer for PyVista Plotter.

        Parameters
        ----------
        mode : str, default: 'trame'
            The UI view mode. Options are:

            * ``'trame'``: Uses a view that can switch between client and server
              rendering modes.
            * ``'server'``: Uses a view that is purely server rendering.
            * ``'client'``: Uses a view that is purely client rendering (generally
              safe without a virtual frame buffer)

        default_server_rendering : bool, default: True
            Whether to use server-side or client-side rendering on-start when
              using the ``'trame'`` mode.

        collapse_menu : bool, default: False
            Collapse the UI menu (camera controls, etc.) on start.

        add_menu : bool, default: True
            Add a UI controls VCard to the VContainer.

        add_menu_items : callable, default: None
            Append more UI controls to the VCard menu. Should be a function similar to
            `Viewer.ui_controls()`.

        **kwargs : dict, optional
            Additional keyword arguments are passed to the view being created.

        Returns
        -------
        PyVistaRemoteLocalView, PyVistaRemoteView, or PyVistaLocalView
            Trame view interface for pyvista.

        """
        ...
    


