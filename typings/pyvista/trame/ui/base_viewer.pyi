"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING
from trame_client.ui.core import AbstractLayout

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
class BaseViewer:
    """Internal wrapper to sync trame view with Plotter.

    Parameters
    ----------
    plotter : pyvista.Plotter
        Target Plotter instance to view.
    server : trame.Server, optional
        Current Server for Trame Application.
    suppress_rendering : bool, default=False
        Whether to suppress rendering on the Plotter.
    """
    def __init__(self, plotter, server=..., suppress_rendering=...) -> None:
        """Initialize Viewer."""
        ...
    
    @property
    def views(self):
        """Get a set of all associate trame views for this viewer."""
        ...
    
    def update(self, **kwargs):
        """Update all associated views.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def push_camera(self, **kwargs):
        """Push camera to all associated views.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def reset_camera(self, **kwargs):
        """Reset camera for all associated views.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def update_image(self, **kwargs):
        """Update image for all associated views.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def update_camera(self, **kwargs):
        """Update image and camera for all associated views.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def view_isometric(self):
        """View isometric."""
        ...
    
    def view_yz(self):
        """View YZ plane."""
        ...
    
    def view_xz(self):
        """View XZ plane."""
        ...
    
    def view_xy(self):
        """View XY plane."""
        ...
    
    def on_parallel_projection_change(self, **kwargs):
        """Toggle parallel projection for all renderers.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def on_edge_visiblity_change(self, **kwargs):
        """Toggle edge visibility for all actors.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def on_grid_visiblity_change(self, **kwargs):
        """Handle axes grid visibility.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def on_outline_visiblity_change(self, **kwargs):
        """Handle outline visibility.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def on_axis_visiblity_change(self, **kwargs):
        """Handle outline visibility.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    def on_rendering_mode_change(self, **kwargs):
        """Handle any configurations when the render mode changes between client and server.

        Parameters
        ----------
        **kwargs : dict, optional
            Unused keyword arguments.

        """
        ...
    
    @property
    def actors(self):
        """Get dataset actors."""
        ...
    
    def screenshot(self):
        """Take screenshot and add attachament.

        Returns
        -------
        memoryview
            Screenshot as a ``memoryview``.

        """
        ...
    
    def export(self):
        """Export the scene as a zip file."""
        ...
    
    def ui(self):
        """Implement in derived classes."""
        ...
    
    def make_layout(self, *args, **kwargs) -> AbstractLayout:
        """Create an instance of an AbstractLayout which is appropriate for a concrete viewer.

        Parameters
        ----------
        *args : tuple
            Positional arguments.

        **kwargs : dict, optional
            Keyword arguments.

        Returns
        -------
        AbstractLayout
            A layout this viewer can be embedded in.
        """
        ...
    


