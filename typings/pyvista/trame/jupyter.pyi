"""
This type stub file was generated by pyright.
"""

from ipywidgets.widgets import HTML

"""
This type stub file was generated by pyright.
"""
SERVER_DOWN_MESSAGE = ...
JUPYTER_SERVER_DOWN_MESSAGE = ...
logger = ...
class TrameServerDownError(RuntimeError):
    """Exception when trame server is down for Jupyter."""
    def __init__(self, server_name) -> None:
        """Call the base class constructor with the custom message."""
        ...
    


class TrameJupyterServerDownError(RuntimeError):
    """Exception when trame server is down for Jupyter."""
    def __init__(self) -> None:
        """Call the base class constructor with the custom message."""
        ...
    


class Widget(HTML):
    """Custom HTML iframe widget for trame viewer."""
    def __init__(self, viewer, src, width=..., height=..., iframe_attrs=..., **kwargs) -> None:
        """Initialize."""
        ...
    
    @property
    def viewer(self):
        """Get the associated viewer instance."""
        ...
    
    @property
    def src(self):
        """Get the src URL."""
        ...
    


class EmbeddableWidget(HTML):
    """Custom HTML iframe widget for embedding the trame viewer."""
    def __init__(self, plotter, width, height, **kwargs) -> None:
        """Initialize."""
        ...
    


def launch_server(server=..., port=..., host=..., wslink_backend=..., **kwargs):
    """Launch a trame server for use with Jupyter.

    Parameters
    ----------
    server : str, optional
        By default this uses :attr:`pyvista.global_theme.trame.jupyter_server_name
        <pyvista.plotting.themes._TrameConfig.jupyter_server_name>`, which by default is
        set to ``'pyvista-jupyter'``.

        If a server name is given and such server is not available yet, it will
        be created otherwise the previously created instance will be returned.

    port : int, optional
        The port on which to bind the server. Defaults to 0 to automatically
        find an available port.

    host : str, optional
        The host name to bind the server to on launch. Server will bind to
        ``127.0.0.1`` by default unless user sets the environment variable ``TRAME_DEFAULT_HOST``.

    wslink_backend : str, optional
        The wslink backend that the server should use
        ``aiohttp`` by default, ``jupyter`` if the `trame_jupyter_extension <https://github.com/Kitware/trame-jupyter-extension>`_ is used.

    **kwargs : dict, optional
        Any additional keyword arguments to pass to ``pyvista.trame.views.get_server``.

    Returns
    -------
    trame_server.core.Server
        The launched Trame server. To ``await`` the launch, use the
        ``.ready`` future attribute on the server.

    """
    ...

def build_url(_server, ui=..., server_proxy_enabled=..., server_proxy_prefix=..., host=..., protocol=...):
    """Build the URL for the iframe."""
    ...

def initialize(server, plotter, mode=..., default_server_rendering=..., collapse_menu=..., **kwargs):
    """Generate the UI for a given plotter."""
    ...

def show_trame(plotter, mode=..., name=..., server_proxy_enabled=..., server_proxy_prefix=..., jupyter_extension_enabled=..., collapse_menu=..., add_menu=..., add_menu_items=..., default_server_rendering=..., handler=..., **kwargs):
    """Run and display the trame application in jupyter's event loop.

    Parameters
    ----------
    plotter : pyvista.Plotter
        The PyVista plotter to show.

    mode : str, optional
        The UI view mode. This can be set on the global theme. Options are:

        * ``'trame'``: Uses a view that can switch between client and server
          rendering modes.
        * ``'server'``: Uses a view that is purely server rendering.
        * ``'client'``: Uses a view that is purely client rendering (generally
          safe without a virtual frame buffer)
        * ``'html'``: Exports the scene for client rendering that can be
          embedded in a webpage.

    name : str, optional
        The name of the trame server on which the UI is defined.

    server_proxy_enabled : bool, default: False
        Build a relative URL for use with ``jupyter-server-proxy``.

    server_proxy_prefix : str, optional
        URL prefix when using ``server_proxy_enabled``. This can be set
        globally in the theme. To ignore, pass ``False``. For use with
        ``jupyter-server-proxy``, often set to ``proxy/``.

    jupyter_extension_enabled : bool, default: False
        Build a relative URL for use with ``trame-jupyter-extension``.

    collapse_menu : bool, default: False
        Collapse the UI menu (camera controls, etc.) on start.

    add_menu : bool, default: True
        Add a UI controls VCard to the VContainer.

    add_menu_items : callable, default: None
        Append more UI controls to the VCard menu. Should be a function similar to
        Viewer.ui_controls().

    default_server_rendering : bool, default: True
        Whether to use server-side or client-side rendering on-start when
        using the ``'trame'`` mode.

    handler : callable, optional
        Pass a callable that accptes the viewer instance, the string URL,
        and ``**kwargs`` to create custom HTML representations of the output.

        .. code:: python

            import pyvista as pv
            from IPython.display import IFrame

            mesh = pyvista.Wavelet()


            def handler(viewer, src, **kwargs):
                return IFrame(src, '75%', '500px')


            p = pyvista.Plotter(notebook=True)
            _ = p.add_mesh(mesh)
            iframe = p.show(
                jupyter_backend='trame',
                jupyter_kwargs=dict(handler=handler),
                return_viewer=True,
            )
            iframe

    **kwargs : dict, optional
        Mostly ignored, though ``protocol`` and ``host`` can be use to
        override the iframe src url and ``height`` and ``width`` can be
        used to override the iframe style. Remaining kwargs are passed to
        ``ipywidgets.widgets.HTML``.

    Returns
    -------
    ipywidgets.widgets.HTML or handler result
        Returns a HTML IFrame widget or the result of the passed handler.

    """
    ...

def elegantly_launch(*args, **kwargs):
    """Elegantly launch the Trame server without await.

    This provides a mechanism to launch the Trame Jupyter backend in
    a way that does not require users to await the call.

    This is a thin wrapper of
    :func:`launch_server() <pyvista.trame.jupyter.launch_server>`.

    Returns
    -------
    trame_server.core.Server
        The launched trame server.

    Warnings
    --------
    This uses `nest_asyncio <https://github.com/erdewit/nest_asyncio>`_ which
    patches the standard lib `asyncio` package and may have unintended
    consequences for some uses cases. We advise strongly to make sure PyVista's
    Jupyter backend is not set to use Trame when not in a Jupyter environment.

    """
    ...

