"""
This type stub file was generated by pyright.
"""

import pyvista
from typing import ClassVar, Sequence, TYPE_CHECKING
from pyvista.core.utilities.misc import no_new_attr
from . import _vtk
from .colors import Color
from pyvista.core._typing_core import VectorLike
from ._typing import ColorLike

"""Contains the pyvista.Text class."""
if TYPE_CHECKING:
    ...
@no_new_attr
class CornerAnnotation(_vtk.vtkCornerAnnotation):
    """Text annotation in four corners.

    This is an annotation object that manages four text actors / mappers to provide annotation in the four corners of a viewport.

    Parameters
    ----------
    position : str | bool
        Position of the text.

    text : str
        Text input.

    prop : pyvista.TextProperty, optional
        Text property.

    linear_font_scale_factor : float, optional
        Linear font scale factor.

    Examples
    --------
    Create text annotation in four corners.

    >>> from pyvista import CornerAnnotation
    >>> text = CornerAnnotation(0, 'text')
    >>> prop = text.prop
    """
    def __init__(self, position, text, prop=..., linear_font_scale_factor=...) -> None:
        """Initialize a new text annotation descriptor."""
        ...
    
    def get_text(self, position): # -> str:
        """Get the text to be displayed for each corner.

        Parameters
        ----------
        position : str | bool
            Position of the text.

        Returns
        -------
        str
            Text to be displayed for each corner.
        """
        ...
    
    def set_text(self, position, text): # -> None:
        """Set the text to be displayed for each corner.

        Parameters
        ----------
        position : str | bool
            Position of the text.

        text : str
            Text to be displayed for each corner.
        """
        ...
    
    @property
    def prop(self) -> TextProperty:
        """Property of this actor.

        Returns
        -------
        pyvista.TextProperty
            Property of this actor.
        """
        ...
    
    @prop.setter
    def prop(self, prop: TextProperty): # -> None:
        ...
    
    @property
    def linear_font_scale_factor(self) -> float:
        """Font scaling factors.

        Returns
        -------
        float
            Font scaling factors.
        """
        ...
    
    @linear_font_scale_factor.setter
    def linear_font_scale_factor(self, factor: float): # -> None:
        ...
    


@no_new_attr
class Text(_vtk.vtkTextActor):
    r"""Define text by default theme.

    Parameters
    ----------
    text : str, optional
        Text string to be displayed.
        "\n" is recognized as a carriage return/linefeed (line separator).
        The characters must be in the UTF-8 encoding.

    position : Sequence[float], optional
        The position coordinate.

    prop : pyvista.TextProperty, optional
        The property of this actor.

    Examples
    --------
    Create a text with text's property.

    >>> from pyvista import Text
    >>> text = Text()
    >>> prop = text.prop
    """
    def __init__(self, text=..., position=..., prop=...) -> None:
        """Initialize a new text descriptor."""
        ...
    
    @property
    def input(self): # -> str:
        r"""Text string to be displayed.

        Returns
        -------
        str
            Text string to be displayed.
            "\n" is recognized as a carriage return/linefeed (line separator).
            The characters must be in the UTF-8 encoding.
        """
        ...
    
    @input.setter
    def input(self, text: str): # -> None:
        ...
    
    @property
    def prop(self): # -> vtkTextProperty:
        """Property of this actor.

        Returns
        -------
        pyvista.TextProperty
            Property of this actor.
        """
        ...
    
    @prop.setter
    def prop(self, prop: TextProperty): # -> None:
        ...
    
    @property
    def position(self): # -> Tuple[float, float]:
        """Position coordinate.

        Returns
        -------
        Sequence[float]
            Position coordinate.
        """
        ...
    
    @position.setter
    def position(self, position: Sequence[float]): # -> None:
        ...
    


class Label(Text):
    """2D label actor with a 3D position coordinate.

    Parameters
    ----------
    text : str, optional
        Text string to be displayed.

    position : VectorLike[float]
        The position coordinate.

    size : int
        Size of the text label.

    prop : pyvista.TextProperty, optional
        The property of this actor.

    See Also
    --------
    pyvista.Plotter.add_point_labels

    Examples
    --------
    Create a label for a point of interest.

    >>> import pyvista as pv
    >>> mesh = pv.Cone()
    >>> tip_point = mesh.points[0]
    >>> label = pv.Label('tip', position=tip_point)

    Plot the mesh and label.

    >>> pl = pv.Plotter()
    >>> _ = pl.add_mesh(mesh)
    >>> _ = pl.add_actor(label)
    >>> pl.show()
    """
    _new_attr_exceptions: ClassVar[tuple[str]] = ...
    def __init__(self, text: str | None = ..., position: VectorLike[float] = ..., *, size: int = ..., prop: pyvista.Property | None = ...) -> None:
        ...
    
    @property
    def position(self) -> tuple[float, float, float]:
        """Text position coordinate in xyz space."""
        ...
    
    @position.setter
    def position(self, position: VectorLike[float]): # -> None:
        ...
    
    @property
    def size(self) -> int:
        """Size of the text label.

        Notes
        -----
        The text property's font size used to control the size of the label.
        """
        ...
    
    @size.setter
    def size(self, size: int): # -> None:
        ...
    


@no_new_attr
class TextProperty(_vtk.vtkTextProperty):
    """Define text's property.

    Parameters
    ----------
    theme : pyvista.plotting.themes.Theme, optional
        Plot-specific theme.

    color : pyvista.ColorLike, optional
        Either a string, RGB list, or hex color string.  For example:
        ``color='white'``, ``color='w'``, ``color=[1.0, 1.0, 1.0]``, or
        ``color='#FFFFFF'``. Color will be overridden if scalars are
        specified.

    font_family : str | None, optional
        Font family or None.

    orientation : float, optional
        Text's orientation (in degrees).

    font_size : int, optional
        Font size.

    font_file : str, optional
        Font file path.

    shadow : bool, optional
        If enable the shadow.

    justification_horizontal : str, optional
        Text's horizontal justification.
        Should be either "left", "center" or "right".

    justification_vertical : str, optional
        Text's vertical justification.
        Should be either "bottom", "center" or "top".

    italic : bool, default: False
        Italicises title and bar labels.

    bold : bool, default: True
        Bolds title and bar labels.

    background_color : pyvista.Color, optional
        Background color of text.

    background_opacity : pyvista.Color, optional
        Background opacity of text.

    Examples
    --------
    Create a text's property.

    >>> from pyvista import TextProperty
    >>> prop = TextProperty()
    >>> prop.opacity = 0.5
    >>> prop.background_color = "b"
    >>> prop.background_opacity = 0.5
    >>> prop.show_frame = True
    >>> prop.frame_color = "b"
    >>> prop.frame_width = 10
    >>> prop.frame_color
    Color(name='blue', hex='#0000ffff', opacity=255)

    """
    _theme = ...
    _color_set = ...
    _background_color_set = ...
    _font_family = ...
    def __init__(self, theme=..., color=..., font_family=..., orientation=..., font_size=..., font_file=..., shadow=..., justification_horizontal=..., justification_vertical=..., italic=..., bold=..., background_color=..., background_opacity=...) -> None:
        """Initialize text's property."""
        ...
    
    @property
    def color(self) -> Color:
        """Color of text's property.

        Returns
        -------
        pyvista.Color
            Color of text's property.

        """
        ...
    
    @color.setter
    def color(self, color: ColorLike): # -> None:
        ...
    
    @property
    def opacity(self) -> float:
        """Opacity of text's property.

        Returns
        -------
        float
            Opacity of the text. A single float value that will be applied globally
            opacity of the text and uniformly applied everywhere. Between 0 and 1.

        """
        ...
    
    @opacity.setter
    def opacity(self, opacity: float): # -> None:
        ...
    
    @property
    def background_color(self) -> Color:
        """Background color of text's property.

        Returns
        -------
        pyvista.Color
            Background color of text's property.

        """
        ...
    
    @background_color.setter
    def background_color(self, color: ColorLike): # -> None:
        ...
    
    @property
    def background_opacity(self) -> float:
        """Background opacity of text's property.

        Returns
        -------
        float
            Background opacity of the text. A single float value that will be applied globally.
            Background opacity of the text and uniformly applied everywhere. Between 0 and 1.

        """
        ...
    
    @background_opacity.setter
    def background_opacity(self, opacity: float): # -> None:
        ...
    
    @property
    def show_frame(self) -> bool:
        """Visibility of frame.

        Returns
        -------
        bool:
            If shows the frame.

        """
        ...
    
    @show_frame.setter
    def show_frame(self, frame: bool): # -> None:
        ...
    
    @property
    def frame_color(self) -> Color:
        """Frame color of text property.

        Returns
        -------
        pyvista.Color
            Frame color of text property.
        """
        ...
    
    @frame_color.setter
    def frame_color(self, color): # -> None:
        ...
    
    @property
    def frame_width(self) -> int:
        """Width of the frame.

        Returns
        -------
        int
            Width of the frame. The width is expressed in pixels.
            The default is 1 pixel.
        """
        ...
    
    @frame_width.setter
    def frame_width(self, width: int): # -> None:
        ...
    
    @property
    def font_family(self) -> str | None:
        """Font family.

        Returns
        -------
        str | None
            Font family or None.
        """
        ...
    
    @font_family.setter
    def font_family(self, font_family: str | None): # -> None:
        ...
    
    @property
    def font_size(self) -> int:
        """Font size.

        Returns
        -------
        int
            Font size.
        """
        ...
    
    @font_size.setter
    def font_size(self, font_size: int): # -> None:
        ...
    
    def enable_shadow(self) -> None:
        """Enable the shadow."""
        ...
    
    @property
    def orientation(self) -> float:
        """Text's orientation (in degrees).

        Returns
        -------
        float
            Text's orientation (in degrees).
        """
        ...
    
    @orientation.setter
    def orientation(self, orientation: float): # -> None:
        ...
    
    def set_font_file(self, font_file: str): # -> None:
        """Set the font file.

        Parameters
        ----------
        font_file : str
            Font file path.
        """
        ...
    
    @property
    def justification_horizontal(self) -> str:
        """Text's justification horizontal.

        Returns
        -------
        str
            Text's horizontal justification.
            Should be either "left", "center" or "right".
        """
        ...
    
    @justification_horizontal.setter
    def justification_horizontal(self, justification: str): # -> None:
        ...
    
    @property
    def justification_vertical(self) -> str:
        """Text's vertical justification.

        Returns
        -------
        str
            Text's vertical justification.
            Should be either "bottom", "center" or "top".
        """
        ...
    
    @justification_vertical.setter
    def justification_vertical(self, justification: str): # -> None:
        ...
    
    @property
    def italic(self) -> bool:
        """Italic of text's property.

        Returns
        -------
        bool
            If text is italic.

        """
        ...
    
    @italic.setter
    def italic(self, italic: bool): # -> None:
        ...
    
    @property
    def bold(self) -> bool:
        """Bold of text's property.

        Returns
        -------
        bool
            If text is bold.

        """
        ...
    
    @bold.setter
    def bold(self, bold: bool): # -> None:
        ...
    


