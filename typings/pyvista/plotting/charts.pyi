"""
This type stub file was generated by pyright.
"""

from typing import ClassVar, TYPE_CHECKING
from . import _vtk
from ._typing import Chart

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
class _vtkWrapperMeta(type):
    def __init__(cls, clsname, bases, attrs) -> None:
        ...
    
    def __call__(cls, *args, _wrap=..., **kwargs):
        ...
    


class _vtkWrapper(metaclass=_vtkWrapperMeta):
    def __getattribute__(self, item):
        ...
    
    def __str__(self) -> str:
        ...
    


class DocSubs:
    """Helper class to easily substitute the docstrings of the listed member functions or properties."""
    _DOC_SUBS: dict[str, str] | None = ...
    _DOC_STORE = ...
    _DOC_TAG = ...
    def __init_subclass__(cls, **kwargs):
        """Initialize subclasses."""
        ...
    


def doc_subs(member):
    """Doc subs wrapper.

    Only common attribute between methods and properties that we can
    modify is __doc__, so use that to mark members that need doc
    substitutions.
    Still, only methods can be marked for doc substitution (as for
    properties the docstring seems to be overwritten when specifying
    setters or deleters), hence this decorator should be applied
    before the property decorator.
    """
    ...

class Pen(_vtkWrapper, _vtk.vtkPen):
    """Pythonic wrapper for a VTK Pen, used to draw lines.

    Parameters
    ----------
    color : ColorLike, default: "k"
        Color of the lines drawn using this pen. Any color parsable by
        :class:`pyvista.Color` is allowed.

    width : float, default: 1
        Width of the lines drawn using this pen.

    style : str, default: "-"
        Style of the lines drawn using this pen. See
        :ref:`Pen.LINE_STYLES <pen_line_styles>` for a list of allowed
        line styles.

    Notes
    -----
    .. _pen_line_styles:

    LINE_STYLES : dict
        Dictionary containing all allowed line styles as its keys.

        .. include:: ../pen_line_styles.rst

    """
    LINE_STYLES: ClassVar[dict[str, dict[str, int | str]]] = ...
    def __init__(self, color=..., width=..., style=...) -> None:
        """Initialize a new Pen instance."""
        ...
    
    @property
    def color(self):
        """Return or set the pen's color.

        Examples
        --------
        Set the pen's color to red.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.line([0, 1, 2], [2, 1, 3])
           >>> plot.pen.color = 'r'
           >>> chart.show()

        """
        ...
    
    @color.setter
    def color(self, val):
        ...
    
    @property
    def width(self):
        """Return or set the pen's width.

        Examples
        --------
        Set the pen's width to 10

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.line([0, 1, 2], [2, 1, 3])
           >>> plot.pen.width = 10
           >>> chart.show()

        """
        ...
    
    @width.setter
    def width(self, val):
        ...
    
    @property
    def style(self):
        """Return or set the pen's line style.

        See :ref:`Pen.LINE_STYLES <pen_line_styles>` for a list of allowed line styles.

        Examples
        --------
        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.line([0, 1, 2], [2, 1, 3])
           >>> plot.pen.style = '-.'
           >>> chart.show()

        """
        ...
    
    @style.setter
    def style(self, val):
        ...
    


class Brush(_vtkWrapper, _vtk.vtkBrush):
    """Pythonic wrapper for a VTK Brush, used to fill shapes.

    Parameters
    ----------
    color : ColorLike, default: "k"
        Fill color of the shapes drawn using this brush. Any color
        parsable by :class:`pyvista.Color` is allowed.

    texture : pyvista.Texture, optional
        Texture used to fill shapes drawn using this brush. Any object
        convertible to a :class:`pyvista.Texture` is allowed. Defaults to
        ``None``.

    """
    def __init__(self, color=..., texture=...) -> None:
        """Initialize a new Pen instance."""
        ...
    
    @property
    def color(self):
        """Return or set the brush's color.

        Examples
        --------
        Set the brush's color to red.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [0, 0, 1], [1, 3, 2])
           >>> plot.brush.color = 'r'
           >>> chart.show()

        """
        ...
    
    @color.setter
    def color(self, val):
        ...
    
    @property
    def texture(self):
        """Return or set the brush's texture.

        Examples
        --------
        Set the brush's texture to the sample puppy texture.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> from pyvista import examples
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [0, 0, 1], [1, 3, 2])
           >>> plot.brush.texture = examples.download_puppy_texture()
           >>> chart.show()

        """
        ...
    
    @texture.setter
    def texture(self, val):
        ...
    
    @property
    def texture_interpolate(self):
        """Set texture interpolation mode.

        There are two modes:

        * ``False`` - NEAREST
        * ``True`` - LINEAR

        Examples
        --------
        Set up a brush with a texture.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> from pyvista import examples
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [0, 0, 1], [1, 3, 2])
           >>> plot.brush.texture = examples.download_puppy_texture()
           >>> chart.show()

           Disable linear interpolation.

           >>> plot.brush.texture_interpolate = False
           >>> chart.show()

        """
        ...
    
    @texture_interpolate.setter
    def texture_interpolate(self, val):
        ...
    
    @property
    def texture_repeat(self):
        """Return or set the texture repeat mode.

        There are two modes:

        * ``False`` - STRETCH
        * ``True`` - REPEAT

        Examples
        --------
        Set up a brush with a texture.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> from pyvista import examples
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [0, 0, 1], [1, 3, 2])
           >>> plot.brush.texture = examples.download_puppy_texture()
           >>> chart.show()

           Enable texture repeat.

           >>> plot.brush.texture_repeat = True
           >>> chart.show()

        """
        ...
    
    @texture_repeat.setter
    def texture_repeat(self, val):
        ...
    


class Axis(_vtkWrapper, _vtk.vtkAxis):
    """Pythonic interface for a VTK Axis, used by 2D charts.

    Parameters
    ----------
    label : str, default: ""
        Axis label.

    range : sequence[float], optional
        Axis range, denoting the minimum and maximum values
        displayed on this axis. Setting this to any valid value
        other than ``None`` will change this axis behavior to
        ``'fixed'``. Setting it to ``None`` will change the axis
        behavior to ``'auto'``.

    grid : bool, default: True
        Flag to toggle grid lines visibility for this axis.

    Attributes
    ----------
    pen : Pen
        Pen used to draw the axis.

    grid_pen : Pen
        Pen used to draw the grid lines.

    """
    BEHAVIORS: ClassVar[dict[str, int]] = ...
    def __init__(self, label=..., range=..., grid=...) -> None:
        """Initialize a new Axis instance."""
        ...
    
    @property
    def label(self):
        """Return or set the axis label.

        Examples
        --------
        Set the axis label to ``"Axis Label"``.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.label = "Axis Label"
           >>> chart.show()

        """
        ...
    
    @label.setter
    def label(self, val):
        ...
    
    @property
    def label_visible(self):
        """Return or set the axis label's visibility.

        Examples
        --------
        Hide the x-axis label of a 2D chart.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.label_visible = False
           >>> chart.show()

        """
        ...
    
    @label_visible.setter
    def label_visible(self, val):
        ...
    
    @property
    def label_size(self):
        """Return or set the size of the axis label font.

        Examples
        --------
        Set the x-axis label font size of a 2D chart to 20.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.label_size = 20
           >>> chart.x_axis.label_size
           20
           >>> chart.show()

        """
        ...
    
    @label_size.setter
    def label_size(self, size):
        ...
    
    @property
    def range(self):
        """Return or set the axis range.

        This will automatically set the axis behavior to ``"fixed"``
        when a valid range is given. Setting the range to ``None``
        will set the axis behavior to ``"auto"``.

        Examples
        --------
        Manually specify the x-axis range of a 2D chart.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.range = [0, 5]
           >>> chart.show()

           Revert to automatic axis scaling.

           >>> chart.x_axis.range = None
           >>> chart.show()

        """
        ...
    
    @range.setter
    def range(self, val):
        ...
    
    @property
    def behavior(self):
        """Set the axis' scaling behavior.

        Allowed behaviors are ``'auto'`` to automatically rescale the
        axis to fit all visible datapoints in the plot, or ``'fixed'``
        to use the user defined range.

        Examples
        --------
        Manually specify the x-axis range of a 2D chart.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.range = [0, 5]
           >>> chart.show()

           Revert to automatic axis scaling.

           >>> chart.x_axis.behavior = "auto"
           >>> chart.show()
           >>> chart.x_axis.range
           [0.0, 2.0]

        """
        ...
    
    @behavior.setter
    def behavior(self, val):
        ...
    
    @property
    def margin(self):
        """Return or set the axis margin.

        Examples
        --------
        Create a 2D chart.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> chart.background_color = 'c'
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.show()

           Manually specify a larger (bottom) margin for the x-axis and a
           larger (left) margin for the y-axis.

           >>> chart.x_axis.margin = 50
           >>> chart.y_axis.margin = 50
           >>> chart.show()

        """
        ...
    
    @margin.setter
    def margin(self, val):
        ...
    
    @property
    def log_scale(self):
        """Flag denoting whether a log scale is used for this axis.

        Note that setting this property to ``True`` will not guarantee
        that the log scale will be enabled.  Verify whether activating
        the log scale succeeded by rereading this property.

        Examples
        --------
        Create a 2D chart.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2, 3, 4], [1e0, 1e1, 1e2, 1e3, 1e4])
           >>> chart.show()

           Try to enable the log scale on the y-axis.

           >>> chart.y_axis.log_scale = True
           >>> chart.show()
           >>> chart.y_axis.log_scale
           True

        """
        ...
    
    @log_scale.setter
    def log_scale(self, val):
        ...
    
    @property
    def grid(self):
        """Return or set the axis' grid line visibility.

        Examples
        --------
        Create a 2D chart with grid lines disabled for the x-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.grid = False
           >>> chart.show()

        """
        ...
    
    @grid.setter
    def grid(self, val):
        ...
    
    @property
    def visible(self):
        """Return or set the axis' visibility.

        Examples
        --------
        Create a 2D chart with no visible y-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.y_axis.visible = False
           >>> chart.show()

        """
        ...
    
    @visible.setter
    def visible(self, val):
        ...
    
    def toggle(self):
        """Toggle the axis' visibility.

        Examples
        --------
        Create a 2D chart.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.show()

           Toggle the visibility of the y-axis.

           >>> chart.y_axis.toggle()
           >>> chart.show()

        """
        ...
    
    @property
    def tick_count(self):
        """Return or set the number of ticks drawn on this axis.

        Setting this property to a negative value or ``None`` will
        automatically determine the appropriate amount of ticks to
        draw.

        Examples
        --------
        Create a 2D chart with a reduced number of ticks on the x-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.tick_count = 5
           >>> chart.show()

           Revert back to automatic tick behavior.

           >>> chart.x_axis.tick_count = None
           >>> chart.show()

        """
        ...
    
    @tick_count.setter
    def tick_count(self, val):
        ...
    
    @property
    def tick_locations(self):
        """Return or set the tick locations for this axis.

        Setting this to ``None`` will revert back to the default,
        automatically determined, tick locations.

        Examples
        --------
        Create a 2D chart with custom tick locations and labels on the y-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.y_axis.tick_locations = (0.2, 0.4, 0.6, 1, 1.5, 2, 3)
           >>> chart.y_axis.tick_labels = ["Very small", "Small", "Still small",
           ...                             "Small?", "Not large", "Large?",
           ...                             "Very large"]
           >>> chart.show()

           Revert back to automatic tick placement.

           >>> chart.y_axis.tick_locations = None
           >>> chart.y_axis.tick_labels = None
           >>> chart.show()

        """
        ...
    
    @tick_locations.setter
    def tick_locations(self, val):
        ...
    
    @property
    def tick_labels(self):
        """Return or set the tick labels for this axis.

        You can specify a sequence, to provide a unique label to every
        tick position; a string, to describe the label format to use
        for each label; or ``None``, which will revert back to the
        default tick labels.  A label format is a string consisting of
        an integer part, denoting the precision to use, and a final
        character, denoting the notation to use.

        Allowed notations:

        * ``"f"`` for fixed notation
        * ``"e"`` for scientific notation.

        Examples
        --------
        Create a 2D chart with custom tick locations and labels on the y-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.y_axis.tick_locations = (0.2, 0.4, 0.6, 1, 1.5, 2, 3)
           >>> chart.y_axis.tick_labels = ["Very small", "Small", "Still small",
           ...                             "Small?", "Not large", "Large?",
           ...                             "Very large"]
           >>> chart.show()

           Revert back to automatic tick placement.

           >>> chart.y_axis.tick_locations = None
           >>> chart.y_axis.tick_labels = None
           >>> chart.show()

           Specify a custom label format to use (fixed notation with precision 2).

           >>> chart.y_axis.tick_labels = "2f"
           >>> chart.show()

        """
        ...
    
    @tick_labels.setter
    def tick_labels(self, val):
        ...
    
    @property
    def tick_label_size(self):
        """Return or set the size of the axis tick label font.

        Examples
        --------
        Set the x-axis tick label font size of a 2D chart to 20.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.tick_label_size = 20
           >>> chart.x_axis.tick_label_size
           20
           >>> chart.show()

        """
        ...
    
    @tick_label_size.setter
    def tick_label_size(self, size):
        ...
    
    @property
    def tick_size(self):
        """Return or set the size of this axis' ticks.

        Examples
        --------
        Create a 2D chart with an x-axis with an increased tick size
        and adjusted offset for the tick labels.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.tick_size += 10
           >>> chart.x_axis.tick_labels_offset += 12
           >>> chart.show()

        """
        ...
    
    @tick_size.setter
    def tick_size(self, val):
        ...
    
    @property
    def tick_labels_offset(self):
        """Return or set the offset of the tick labels for this axis.

        Examples
        --------
        Create a 2D chart with an x-axis with an increased tick size
        and adjusted offset for the tick labels.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.tick_size += 10
           >>> chart.x_axis.tick_labels_offset += 12
           >>> chart.show()

        """
        ...
    
    @tick_labels_offset.setter
    def tick_labels_offset(self, val):
        ...
    
    @property
    def tick_labels_visible(self):
        """Return or set the tick label visibility for this axis.

        Examples
        --------
        Create a 2D chart with hidden tick labels on the y-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.y_axis.tick_labels_visible = False
           >>> chart.show()

        """
        ...
    
    @tick_labels_visible.setter
    def tick_labels_visible(self, val):
        ...
    
    @property
    def ticks_visible(self):
        """Return or set the tick visibility for this axis.

        Examples
        --------
        Create a 2D chart with hidden ticks on the y-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.y_axis.ticks_visible = False
           >>> chart.show()

        """
        ...
    
    @ticks_visible.setter
    def ticks_visible(self, val):
        ...
    


class _CustomContextItem(_vtk.vtkPythonItem):
    class ItemWrapper:
        def Initialize(self, item):
            ...
        
        def Paint(self, item, painter):
            ...
        
    
    
    def __init__(self) -> None:
        ...
    
    def paint(self, painter):
        ...
    


class _ChartBackground(_CustomContextItem):
    """Utility class for chart backgrounds."""
    def __init__(self, chart) -> None:
        ...
    
    def paint(self, painter):
        ...
    


class _Chart(DocSubs):
    """Common pythonic interface for vtkChart, vtkChartBox, vtkChartPie and ChartMPL instances."""
    _DOC_SUBS: dict[str, str] | None = ...
    def __init__(self, size=..., loc=...) -> None:
        ...
    
    @property
    @doc_subs
    def size(self):
        """Return or set the chart size in normalized coordinates.

        A size of ``(1, 1)`` occupies the whole renderer.

        Examples
        --------
        Create a half-sized {chart_name} centered in the middle of the
        renderer.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.size = (0.5, 0.5)
           >>> chart.loc = (0.25, 0.25)
           >>> chart.show()

        """
        ...
    
    @size.setter
    def size(self, val):
        ...
    
    @property
    @doc_subs
    def loc(self):
        """Return or set the chart position in normalized coordinates.

        This denotes the location of the chart's bottom left corner.

        Examples
        --------
        Create a half-sized {chart_name} centered in the middle of the
        renderer.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.size = (0.5, 0.5)
           >>> chart.loc = (0.25, 0.25)
           >>> chart.show()

        """
        ...
    
    @loc.setter
    def loc(self, val):
        ...
    
    @property
    @doc_subs
    def border_color(self):
        """Return or set the chart's border color.

        Examples
        --------
        Create a {chart_name} with a thick, dashed red border.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.border_color = 'r'
           >>> chart.border_width = 5
           >>> chart.border_style = '--'
           >>> chart.show(interactive=False)

        """
        ...
    
    @border_color.setter
    def border_color(self, val):
        ...
    
    @property
    @doc_subs
    def border_width(self):
        """Return or set the chart's border width.

        Examples
        --------
        Create a {chart_name} with a thick, dashed red border.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.border_color = 'r'
           >>> chart.border_width = 5
           >>> chart.border_style = '--'
           >>> chart.show(interactive=False)

        """
        ...
    
    @border_width.setter
    def border_width(self, val):
        ...
    
    @property
    @doc_subs
    def border_style(self):
        """Return or set the chart's border style.

        Examples
        --------
        Create a {chart_name} with a thick, dashed red border.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.border_color = 'r'
           >>> chart.border_width = 5
           >>> chart.border_style = '--'
           >>> chart.show(interactive=False)

        """
        ...
    
    @border_style.setter
    def border_style(self, val):
        ...
    
    @property
    @doc_subs
    def active_border_color(self):
        """Return or set the chart's border color in interactive mode.

        Examples
        --------
        Create a {chart_name} with a thick, dashed red border.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.border_color = 'r'
           >>> chart.border_width = 5
           >>> chart.border_style = '--'
           >>> chart.show(interactive=False)

           Set the active border color to yellow and activate the chart.

           >>> chart.active_border_color = 'y'
           >>> chart.show(interactive=True)

        """
        ...
    
    @active_border_color.setter
    def active_border_color(self, val):
        ...
    
    @property
    @doc_subs
    def background_color(self):
        """Return or set the chart's background color.

        Examples
        --------
        Create a {chart_name} with a green background.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.background_color = (0.5, 0.9, 0.5)
           >>> chart.show(interactive=False)

        """
        ...
    
    @background_color.setter
    def background_color(self, val):
        ...
    
    @property
    @doc_subs
    def background_texture(self):
        """Return or set the chart's background texture.

        Examples
        --------
        Create a {chart_name} with an emoji as its background.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> from pyvista import examples
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.background_texture = examples.download_emoji_texture()
           >>> chart.show(interactive=False)

        """
        ...
    
    @background_texture.setter
    def background_texture(self, val):
        ...
    
    @property
    @doc_subs
    def active_background_color(self):
        """Return or set the chart's background color in interactive mode.

        Examples
        --------
        Create a {chart_name} with a green background.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.background_color = (0.5, 0.9, 0.5)
           >>> chart.show(interactive=False)

           Set the active background color to blue and activate the chart.

           >>> chart.active_background_color = 'b'
           >>> chart.show(interactive=True)

        """
        ...
    
    @active_background_color.setter
    def active_background_color(self, val):
        ...
    
    @property
    @doc_subs
    def visible(self):
        """Return or set the chart's visibility.

        Examples
        --------
        Create a {chart_name}.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.show()

           Hide it.

           >>> chart.visible = False
           >>> chart.show()

        """
        ...
    
    @visible.setter
    def visible(self, val):
        ...
    
    @doc_subs
    def toggle(self):
        """Toggle the chart's visibility.

        Examples
        --------
        Create a {chart_name}.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.show()

           Hide it.

           >>> chart.toggle()
           >>> chart.show()

        """
        ...
    
    @property
    @doc_subs
    def title(self):
        """Return or set the chart's title.

        Examples
        --------
        Create a {chart_name} with title 'My Chart'.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.title = 'My Chart'
           >>> chart.show()

        """
        ...
    
    @title.setter
    def title(self, val):
        ...
    
    @property
    @doc_subs
    def legend_visible(self):
        """Return or set the visibility of the chart's legend.

        Examples
        --------
        Create a {chart_name} with custom labels.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> {chart_set_labels}
           >>> chart.show()

           Hide the legend.

           >>> chart.legend_visible = False
           >>> chart.show()

        """
        ...
    
    @legend_visible.setter
    def legend_visible(self, val):
        ...
    
    @doc_subs
    def show(self, interactive=..., off_screen=..., full_screen=..., screenshot=..., window_size=..., notebook=..., background=..., dev_kwargs=...):
        """Show this chart in a self contained plotter.

        Parameters
        ----------
        interactive : bool, default: True
            Enable interaction with the chart. Interaction is not enabled
            when plotting off screen.

        off_screen : bool, optional
            Plots off screen when ``True``.  Helpful for saving screenshots
            without a window popping up. Defaults to active theme setting.

        full_screen : bool, optional
            Opens window in full screen.  When enabled, ignores
            ``window_size``. Defaults to active theme setting.

        screenshot : str | bool, default: False
            Saves screenshot to file when enabled.  See:
            :func:`Plotter.screenshot() <pyvista.Plotter.screenshot>`.

            When ``True``, takes screenshot and returns ``numpy`` array of
            image.

        window_size : list, optional
            Window size in pixels. Defaults to active theme setting.

        notebook : bool, optional
            When ``True``, the resulting plot is placed inline a
            jupyter notebook.  Assumes a jupyter console is active.

        background : ColorLike, default: "w"
            Use to make the entire mesh have a single solid color.
            Either a string, RGB list, or hex color string.  For example:
            ``color='white'``, ``color='w'``, ``color=[1.0, 1.0, 1.0]``, or
            ``color='#FFFFFF'``.

        dev_kwargs : dict, optional
            Optional developer keyword arguments.

        Returns
        -------
        np.ndarray
            Numpy array of the last image when ``screenshot=True``
            is set. Optionally contains alpha values. Sized:

            * [Window height x Window width x 3] if the theme sets
              ``transparent_background=False``.
            * [Window height x Window width x 4] if the theme sets
              ``transparent_background=True``.

        Examples
        --------
        Create a simple {chart_name} and show it.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.{cls}({chart_args}){chart_init}
           >>> chart.show()

        """
        ...
    


class _Plot(DocSubs):
    """Common pythonic interface for vtkPlot and vtkPlot3D instances."""
    _DOC_SUBS: dict[str, str] | None = ...
    def __init__(self, chart) -> None:
        ...
    
    @property
    @doc_subs
    def color(self):
        """Return or set the plot's color.

        This is the color used by the plot's pen and brush to draw lines and shapes.

        Examples
        --------
        Set the {plot_name}'s color to red.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> plot.color = 'r'
           >>> chart.show()

        """
        ...
    
    @color.setter
    def color(self, val):
        ...
    
    @property
    @doc_subs
    def pen(self):
        """Pen object controlling how lines in this plot are drawn.

        Returns
        -------
        Pen
            Pen object controlling how lines in this plot are drawn.

        Examples
        --------
        Increase the line width of the {plot_name}'s pen object.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> plot.line_style = '-'  # Make sure all lines are visible
           >>> plot.pen.width = 10
           >>> chart.show()

        """
        ...
    
    @property
    @doc_subs
    def brush(self):
        """Brush object controlling how shapes in this plot are filled.

        Returns
        -------
        Brush
            Brush object controlling how shapes in this plot are filled.

        Examples
        --------
        Use a custom texture for the {plot_name}'s brush object.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> from pyvista import examples
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> plot.brush.texture = examples.download_puppy_texture()
           >>> chart.show()

        """
        ...
    
    @property
    @doc_subs
    def line_width(self):
        """Return or set the line width of all lines drawn in this plot.

        This is equivalent to accessing/modifying the width of this plot's pen.

        Examples
        --------
        Set the line width to 10

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> plot.line_style = '-'  # Make sure all lines are visible
           >>> plot.line_width = 10
           >>> chart.show()

        """
        ...
    
    @line_width.setter
    def line_width(self, val):
        ...
    
    @property
    @doc_subs
    def line_style(self):
        """Return or set the line style of all lines drawn in this plot.

        This is equivalent to accessing/modifying the style of this plot's pen.

        Examples
        --------
        Set a custom line style.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> plot.line_style = '-.'
           >>> chart.show()

        """
        ...
    
    @line_style.setter
    def line_style(self, val):
        ...
    
    @property
    @doc_subs
    def label(self):
        """Return or set the this plot's label, as shown in the chart's legend.

        Examples
        --------
        Create a {plot_name} with custom label.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> plot.label = "My awesome plot"
           >>> chart.show()

        """
        ...
    
    @label.setter
    def label(self, val):
        ...
    
    @property
    @doc_subs
    def visible(self):
        """Return or set the this plot's visibility.

        Examples
        --------
        Create a {plot_name}.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> chart.show()

           Hide it.

           >>> plot.visible = False
           >>> chart.show()

        """
        ...
    
    @visible.setter
    def visible(self, val):
        ...
    
    @doc_subs
    def toggle(self):
        """Toggle the plot's visibility.

        Examples
        --------
        Create a {plot_name}.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> chart.show()

           Hide it.

           >>> plot.toggle()
           >>> chart.show()

        """
        ...
    


class _MultiCompPlot(_Plot):
    """Common pythonic interface for vtkPlot instances with multiple components.

    Example subclasses are BoxPlot, PiePlot, BarPlot and StackPlot.
    """
    DEFAULT_COLOR_SCHEME = ...
    _DOC_SUBS: dict[str, str] | None = ...
    def __init__(self, chart) -> None:
        ...
    
    @property
    @doc_subs
    def color_scheme(self):
        """Return or set the plot's color scheme.

        This scheme defines the colors of the different
        components drawn by this plot.
        See the table below for the available color
        schemes.

        Notes
        -----
        .. _plot_color_schemes:

        Overview of all available color schemes.

        .. include:: ../plot_color_schemes.rst

        Examples
        --------
        Set the {plot_name}'s color scheme to warm.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {multichart_init}
           >>> plot = {multiplot_init}
           >>> plot.color_scheme = "warm"
           >>> chart.show()

        """
        ...
    
    @color_scheme.setter
    def color_scheme(self, val):
        ...
    
    @property
    @doc_subs
    def colors(self):
        """Return or set the plot's colors.

        These are the colors used for the different
        components drawn by this plot.

        Examples
        --------
        Set the {plot_name}'s colors manually.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {multichart_init}
           >>> plot = {multiplot_init}
           >>> plot.colors = ["b", "g", "r", "c"]
           >>> chart.show()

        """
        ...
    
    @colors.setter
    def colors(self, val):
        ...
    
    @property
    @doc_subs
    def color(self):
        """Return or set the plot's color.

        This is the color used by the plot's brush
        to draw the different components.

        Examples
        --------
        Set the {plot_name}'s color to red.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> plot.color = 'r'
           >>> chart.show()

        """
        ...
    
    @color.setter
    def color(self, val):
        ...
    
    @property
    @doc_subs
    def labels(self):
        """Return or set the this plot's labels, as shown in the chart's legend.

        Examples
        --------
        Create a {plot_name}.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = {multichart_init}
           >>> plot = {multiplot_init}
           >>> chart.show()

           Modify the labels.

           >>> plot.labels = ["A", "B", "C", "D"]
           >>> chart.show()

        """
        ...
    
    @labels.setter
    def labels(self, val):
        ...
    
    @property
    @doc_subs
    def label(self):
        """Return or set the this plot's label, as shown in the chart's legend.

        Examples
        --------
        Create a {plot_name} with custom label.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> import numpy as np
           >>> chart = {chart_init}
           >>> plot = {plot_init}
           >>> chart.show()

           Modify the label.

           >>> plot.label = "My awesome plot"
           >>> chart.show()

        """
        ...
    
    @label.setter
    def label(self, val):
        ...
    


class LinePlot2D(_Plot, _vtk.vtkPlotLine):
    """Class representing a 2D line plot.

    Users should typically not directly create new plot instances, but use the dedicated 2D chart's plotting methods.

    Parameters
    ----------
    chart : Chart2D
        The chart containing this plot.

    x : array_like
        X coordinates of the points through which a line should be drawn.

    y : array_like
        Y coordinates of the points through which a line should be drawn.

    color : ColorLike, default: "b"
        Color of the line drawn in this plot. Any color parsable by :class:`pyvista.Color` is allowed.

    width : float, default: 1
        Width of the line drawn in this plot.

    style : str, default: "-"
        Style of the line drawn in this plot. See :ref:`Pen.LINE_STYLES <pen_line_styles>` for a list of allowed line
        styles.

    label : str, default: ""
        Label of this plot, as shown in the chart's legend.

    Examples
    --------
    Create a 2D chart plotting an approximate satellite
    trajectory.


    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> from pyvista import examples
       >>> import numpy as np
       >>> chart = pv.Chart2D()
       >>> x = np.linspace(0, 1, 100)
       >>> y = np.sin(6.5*x-1)
       >>> _ = chart.line(x, y, "y", 4)
       >>> chart.background_texture = examples.load_globe_texture()
       >>> chart.hide_axes()
       >>> chart.show()

    """
    _DOC_SUBS = ...
    def __init__(self, chart, x, y, color=..., width=..., style=..., label=...) -> None:
        """Initialize a new 2D line plot instance."""
        ...
    
    @property
    def x(self):
        """Retrieve the X coordinates of the points through which a line is drawn.

        Examples
        --------
        Create a line plot and display the x coordinates.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.line([0, 1, 2], [2, 1, 3])
           >>> plot.x
           pyvista_ndarray([0, 1, 2])
           >>> chart.show()

        """
        ...
    
    @property
    def y(self):
        """Retrieve the Y coordinates of the points through which a line is drawn.

        Examples
        --------
        Create a line plot and display the y coordinates.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.line([0, 1, 2], [2, 1, 3])
           >>> plot.y
           pyvista_ndarray([2, 1, 3])
           >>> chart.show()

        """
        ...
    
    def update(self, x, y):
        """Update this plot's points, through which a line is drawn.

        Parameters
        ----------
        x : array_like
            The new x coordinates of the points through which a line should be drawn.

        y : array_like
            The new y coordinates of the points through which a line should be drawn.

        Examples
        --------
        Create a line plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.show()

           Update the line's y coordinates.

           >>> plot.update([0, 1, 2], [3, 1, 2])
           >>> chart.show()

        """
        ...
    


class ScatterPlot2D(_Plot, _vtk.vtkPlotPoints):
    """Class representing a 2D scatter plot.

    Users should typically not directly create new plot instances, but use the dedicated 2D chart's plotting methods.

    Parameters
    ----------
    chart : Chart2D
        The chart containing this plot.

    x : array_like
        X coordinates of the points to draw.

    y : array_like
        Y coordinates of the points to draw.

    color : ColorLike, default: "b"
        Color of the points drawn in this plot. Any color parsable by :class:`pyvista.Color` is allowed.

    size : float, default: 10
        Size of the point markers drawn in this plot.

    style : str, default: "o"
        Style of the point markers drawn in this plot. See :ref:`ScatterPlot2D.MARKER_STYLES <scatter_marker_styles>`
        for a list of allowed marker styles.

    label : str, default: ""
        Label of this plot, as shown in the chart's legend.

    Notes
    -----
    .. _scatter_marker_styles:

    MARKER_STYLES : dict
        Dictionary containing all allowed marker styles as its keys.

        .. include:: ../scatter_marker_styles.rst

    Examples
    --------
    Plot a simple sine wave as a scatter plot.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> import numpy as np
       >>> x = np.linspace(0, 2*np.pi, 20)
       >>> y = np.sin(x)
       >>> chart = pv.Chart2D()
       >>> _ = chart.scatter(x, y)
       >>> chart.show()

    """
    MARKER_STYLES: ClassVar[dict[str, dict[str, int | str]]] = ...
    _DOC_SUBS = ...
    def __init__(self, chart, x, y, color=..., size=..., style=..., label=...) -> None:
        """Initialize a new 2D scatter plot instance."""
        ...
    
    @property
    def x(self):
        """Retrieve the X coordinates of this plot's points.

        Examples
        --------
        Create a scatter plot and display the x coordinates.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.scatter([0, 1, 2, 3, 4], [2, 1, 3, 4, 2])
           >>> plot.x
           pyvista_ndarray([0, 1, 2, 3, 4])
           >>> chart.show()

        """
        ...
    
    @property
    def y(self):
        """Retrieve the Y coordinates of this plot's points.

        Examples
        --------
        Create a scatter plot and display the y coordinates.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.scatter([0, 1, 2, 3, 4], [2, 1, 3, 4, 2])
           >>> plot.y
           pyvista_ndarray([2, 1, 3, 4, 2])
           >>> chart.show()

        """
        ...
    
    def update(self, x, y):
        """Update this plot's points.

        Parameters
        ----------
        x : array_like
            The new x coordinates of the points to draw.

        y : array_like
            The new y coordinates of the points to draw.

        Examples
        --------
        Create a scatter plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.scatter([0, 1, 2, 3, 4], [2, 1, 3, 4, 2])
           >>> chart.show()

           Update the marker locations.

           >>> plot.update([0, 1, 2, 3, 4], [3, 2, 4, 2, 1])
           >>> chart.show()

        """
        ...
    
    @property
    def marker_size(self):
        """Return or set the plot's marker size.

        Examples
        --------
        Create a 2D scatter plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.scatter([0, 1, 2, 3, 4], [2, 1, 3, 4, 2])
           >>> chart.show()

           Increase the marker size.

           >>> plot.marker_size = 30
           >>> chart.show()

        """
        ...
    
    @marker_size.setter
    def marker_size(self, val):
        ...
    
    @property
    def marker_style(self):
        """Return or set the plot's marker style.

        Examples
        --------
        Create a 2D scatter plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.scatter([0, 1, 2, 3, 4], [2, 1, 3, 4, 2])
           >>> chart.show()

           Change the marker style.

           >>> plot.marker_style = "d"
           >>> chart.show()

        """
        ...
    
    @marker_style.setter
    def marker_style(self, val):
        ...
    


class AreaPlot(_Plot, _vtk.vtkPlotArea):
    """Class representing a 2D area plot.

    Users should typically not directly create new plot instances, but use the dedicated 2D chart's plotting methods.

    Parameters
    ----------
    chart : Chart2D
        The chart containing this plot.

    x : array_like
        X coordinates of the points outlining the area to draw.

    y1 : array_like
        Y coordinates of the points on the first outline of the area to draw.

    y2 : array_like, optional
        Y coordinates of the points on the second outline of the area to
        draw. Defaults to ``numpy.zeros_like(x)``.

    color : ColorLike, default: "b"
        Color of the area drawn in this plot. Any color parsable by :class:`pyvista.Color` is allowed.

    label : str, default: ""
        Label of this plot, as shown in the chart's legend.

    Examples
    --------
    Create an area plot showing the minimum and maximum precipitation observed in each month.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> import numpy as np
       >>> x = np.arange(12)
       >>> p_min = [11, 0, 16, 2, 23, 18, 25, 17, 9, 12, 14, 21]
       >>> p_max = [87, 64, 92, 73, 91, 94, 107, 101, 84, 88, 95, 103]
       >>> chart = pv.Chart2D()
       >>> _ = chart.area(x, p_min, p_max)
       >>> chart.x_axis.tick_locations = x
       >>> chart.x_axis.tick_labels = ["Jan", "Feb", "Mar", "Apr", "May",
       ...                             "Jun", "Jul", "Aug", "Sep", "Oct",
       ...                             "Nov", "Dec"]
       >>> chart.x_axis.label = "Month"
       >>> chart.y_axis.label = "Precipitation [mm]"
       >>> chart.show()

    """
    _DOC_SUBS = ...
    def __init__(self, chart, x, y1, y2=..., color=..., label=...) -> None:
        """Initialize a new 2D area plot instance."""
        ...
    
    @property
    def x(self):
        """Retrieve the X coordinates of the points outlining the drawn area.

        Examples
        --------
        Create an area plot and display the x coordinates.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [2, 1, 3], [1, 0, 1])
           >>> plot.x
           pyvista_ndarray([0, 1, 2])
           >>> chart.show()

        """
        ...
    
    @property
    def y1(self):
        """Retrieve the Y coordinates of the points on the first outline of the drawn area.

        Examples
        --------
        Create an area plot and display the y1 coordinates.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [2, 1, 3], [1, 0, 1])
           >>> plot.y1
           pyvista_ndarray([2, 1, 3])
           >>> chart.show()

        """
        ...
    
    @property
    def y2(self):
        """Retrieve the Y coordinates of the points on the second outline of the drawn area.

        Examples
        --------
        Create an area plot and display the y2 coordinates.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [2, 1, 3], [1, 0, 1])
           >>> plot.y2
           pyvista_ndarray([1, 0, 1])
           >>> chart.show()

        """
        ...
    
    def update(self, x, y1, y2=...):
        """Update this plot's points, outlining the area to draw.

        Parameters
        ----------
        x : array_like
            The new x coordinates of the points outlining the area.

        y1 : array_like
            The new y coordinates of the points on the first outline of the area.

        y2 : array_like, optional
            The new y coordinates of the points on the second outline of the
            area. Default ``numpy.zeros_like(x)``.

        Examples
        --------
        Create an area plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [2, 1, 3])
           >>> chart.show()

           Update the points on the second outline of the area.

           >>> plot.update([0, 1, 2], [2, 1, 3], [1, 0, 1])
           >>> chart.show()

        """
        ...
    


class BarPlot(_MultiCompPlot, _vtk.vtkPlotBar):
    """Class representing a 2D bar plot.

    Users should typically not directly create new plot instances, but use the dedicated 2D chart's plotting methods.

    Parameters
    ----------
    chart : Chart2D
        The chart containing this plot.

    x : array_like
        Positions (along the x-axis for a vertical orientation, along the y-axis for
        a horizontal orientation) of the bars to draw.

    y : array_like
        Size of the bars to draw. Multiple bars can be stacked by passing a sequence of sequences.

    color : ColorLike, default: "b"
        Color of the bars drawn in this plot. Any color parsable by :class:`pyvista.Color` is allowed.

    orientation : str, default: "V"
        Orientation of the bars drawn in this plot. Either ``"H"`` for an horizontal orientation or ``"V"`` for a
        vertical orientation.

    label : str, default: ""
        Label of this plot, as shown in the chart's legend.

    Examples
    --------
    Create a stacked bar chart showing the average time spent on activities
    throughout the week.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> import numpy as np
       >>> x = np.arange(1, 8)
       >>> y_s = [7, 8, 7.5, 8, 7.5, 9, 10]
       >>> y_h = [2, 3, 2, 2.5, 1.5, 4, 6.5]
       >>> y_w = [8, 8, 7, 8, 7, 0, 0]
       >>> y_r = [5, 2.5, 4.5, 3.5, 6, 9, 6.5]
       >>> y_t = [2, 2.5, 3, 2, 2, 2, 1]
       >>> labels = ["Sleep", "Household", "Work", "Relax", "Transport"]
       >>> chart = pv.Chart2D()
       >>> _ = chart.bar(x, [y_s, y_h, y_w, y_r, y_t], label=labels)
       >>> chart.x_axis.tick_locations = x
       >>> chart.x_axis.tick_labels = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
       >>> chart.x_label = "Day of week"
       >>> chart.y_label = "Average time spent"
       >>> chart.grid = False  # Disable the grid lines
       >>> chart.show()

    """
    ORIENTATIONS: ClassVar[dict[str, int]] = ...
    _DOC_SUBS = ...
    def __init__(self, chart, x, y, color=..., orientation=..., label=...) -> None:
        """Initialize a new 2D bar plot instance."""
        ...
    
    @property
    def x(self):
        """Retrieve the positions of the drawn bars.

        Examples
        --------
        Create a bar plot and display the positions.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.bar([1, 2, 3], [[2, 1, 3], [1, 2, 0]])
           >>> plot.x
           pyvista_ndarray([1, 2, 3])
           >>> chart.show()

        """
        ...
    
    @property
    def y(self):
        """Retrieve the sizes of the drawn bars.

        Examples
        --------
        Create a bar plot and display the sizes.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.bar([1, 2, 3], [[2, 1, 3], [1, 2, 0]])
           >>> plot.y
           (pyvista_ndarray([2, 1, 3]), pyvista_ndarray([1, 2, 0]))
           >>> chart.show()

        """
        ...
    
    def update(self, x, y):
        """Update the positions and/or size of the bars in this plot.

        Parameters
        ----------
        x : array_like
            The new positions of the bars to draw.

        y : array_like
            The new sizes of the bars to draw.

        Examples
        --------
        Create a bar plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.bar([1, 2, 3], [2, 1, 3])
           >>> chart.show()

           Update the bar sizes.

           >>> plot.update([1, 2, 3], [3, 1, 2])
           >>> chart.show()

        """
        ...
    
    @property
    def orientation(self):
        """Return or set the orientation of the bars in this plot.

        Examples
        --------
        Create a bar plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.bar([1, 2, 3], [[2, 1, 3], [1, 3, 2]])
           >>> chart.show()

           Change the orientation to horizontal.

           >>> plot.orientation = "H"
           >>> chart.show()

        """
        ...
    
    @orientation.setter
    def orientation(self, val):
        ...
    


class StackPlot(_MultiCompPlot, _vtk.vtkPlotStacked):
    """Class representing a 2D stack plot.

    Users should typically not directly create new plot instances, but use the dedicated 2D chart's plotting methods.

    Parameters
    ----------
    chart : Chart2D
        The chart containing this plot.

    x : array_like
        X coordinates of the points outlining the stacks (areas) to draw.

    ys : sequence[array_like]
        Size of the stacks (areas) to draw at the corresponding X
        coordinates. Each sequence defines the sizes of one stack
        (area), which are stacked on top of each other.

    colors : sequence[ColorLike], optional
        Color of the stacks (areas) drawn in this plot. Any color
        parsable by :class:`pyvista.Color` is allowed.

    labels : sequence[str], default: []
        Label for each stack (area) drawn in this plot, as shown in
        the chart's legend.

    Examples
    --------
    Create a stack plot showing the amount of vehicles sold per type.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> import numpy as np
       >>> year = [f"{y}" for y in np.arange(2011, 2021)]
       >>> x = np.arange(len(year))
       >>> n_e = [1739, 4925, 9515, 21727, 31452, 29926, 40648,
       ...        57761, 76370, 93702]
       >>> n_h = [5563, 7642, 11937, 13905, 22807, 46700, 60875,
       ...        53689, 46650, 50321]
       >>> n_f = [166556, 157249, 151552, 138183, 129669,
       ...        113985, 92965, 73683, 57097, 29499]
       >>> chart = pv.Chart2D()
       >>> plot = chart.stack(x, [n_e, n_h, n_f])
       >>> plot.labels = ["Electric", "Hybrid", "Fossil"]
       >>> chart.x_axis.label = "Year"
       >>> chart.x_axis.tick_locations = x
       >>> chart.x_axis.tick_labels = year
       >>> chart.y_axis.label = "New car sales"
       >>> chart.show()

    """
    _DOC_SUBS = ...
    def __init__(self, chart, x, ys, colors=..., labels=...) -> None:
        """Initialize a new 2D stack plot instance."""
        ...
    
    @property
    def x(self):
        """Retrieve the X coordinates of the drawn stacks.

        Examples
        --------
        Create a stack plot and display the x coordinates.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.stack([0, 1, 2], [[2, 1, 3], [1, 2, 0]])
           >>> plot.x
           pyvista_ndarray([0, 1, 2])
           >>> chart.show()

        """
        ...
    
    @property
    def ys(self):
        """Retrieve the sizes of the drawn stacks.

        Examples
        --------
        Create a stack plot and display the sizes.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.stack([0, 1, 2], [[2, 1, 3], [1, 2, 0]])
           >>> plot.ys
           (pyvista_ndarray([2, 1, 3]), pyvista_ndarray([1, 2, 0]))
           >>> chart.show()

        """
        ...
    
    def update(self, x, ys):
        """Update the locations and/or size of the stacks (areas) in this plot.

        Parameters
        ----------
        x : array_like
            The new x coordinates of the stacks (areas) to draw.

        ys : sequence[array_like]
            The new sizes of the stacks (areas) to draw.

        Examples
        --------
        Create a stack plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.stack([0, 1, 2], [[2, 1, 3],[1, 2, 1]])
           >>> chart.show()

           Update the stack sizes.

           >>> plot.update([0, 1, 2], [[3, 1, 2], [0, 3, 1]])
           >>> chart.show()

        """
        ...
    


class Chart2D(_Chart, _vtk.vtkChartXY):
    """2D chart class similar to a ``matplotlib`` figure.

    Parameters
    ----------
    size : sequence[float], default: (1, 1)
        Size of the chart in normalized coordinates. A size of ``(0,
        0)`` is invisible, a size of ``(1, 1)`` occupies the whole
        renderer's width and height.

    loc : sequence[float], default: (0, 0)
        Location of the chart (its bottom left corner) in normalized
        coordinates. A location of ``(0, 0)`` corresponds to the
        renderer's bottom left corner, a location of ``(1, 1)``
        corresponds to the renderer's top right corner.

    x_label : str, default: "x"
        Label along the x-axis.

    y_label : str, default: "y"
        Label along the y-axis.

    grid : bool, default: True
        Show the background grid in the plot.

    Examples
    --------
    Plot a simple sine wave as a scatter and line plot.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> import numpy as np
       >>> x = np.linspace(0, 2*np.pi, 20)
       >>> y = np.sin(x)
       >>> chart = pv.Chart2D()
       >>> _ = chart.scatter(x, y)
       >>> _ = chart.line(x, y, 'r')
       >>> chart.show()

       Combine multiple types of plots in the same chart.

       >>> rng = np.random.default_rng(1)
       >>> x = np.arange(1, 8)
       >>> y = rng.integers(5, 15, 7)
       >>> e = np.abs(rng.normal(scale=2, size=7))
       >>> z = rng.integers(0, 5, 7)
       >>> chart = pv.Chart2D()
       >>> _ = chart.area(x, y-e, y+e, color=(0.12, 0.46, 0.71, 0.2))
       >>> _ = chart.line(x, y, color="tab:blue", style="--", label="Scores")
       >>> _ = chart.scatter(x, y, color="tab:blue", style="d")
       >>> _ = chart.bar(x, z, color="tab:orange", label="Violations")
       >>> chart.x_axis.tick_locations = x
       >>> chart.x_axis.tick_labels = ["Mon", "Tue", "Wed", "Thu", "Fri",
       ...                             "Sat", "Sun"]
       >>> chart.x_label = "Day of week"
       >>> chart.show()

    """
    PLOT_TYPES: ClassVar[dict[str, type[ScatterPlot2D | LinePlot2D | AreaPlot | BarPlot | StackPlot],]] = ...
    _PLOT_CLASSES: ClassVar[dict[type[ScatterPlot2D | LinePlot2D | AreaPlot | BarPlot | StackPlot], str,]] = ...
    _DOC_SUBS = ...
    def __init__(self, size=..., loc=..., x_label=..., y_label=..., grid=...) -> None:
        """Initialize the chart."""
        ...
    
    def plot(self, x, y=..., fmt=...):
        """Matplotlib like plot method.

        Parameters
        ----------
        x : array_like
            Values to plot on the X-axis. In case ``y`` is ``None``,
            these are the values to plot on the Y-axis instead.

        y : array_like, optional
            Values to plot on the Y-axis.

        fmt : str, default: "-"
            A format string, e.g. ``'ro'`` for red circles. See the Notes
            section for a full description of the format strings.

        Returns
        -------
        scatter_plot : plotting.charts.ScatterPlot2D, optional
            The created scatter plot when a valid marker style
            was present in the format string, ``None`` otherwise.

        line_plot : plotting.charts.LinePlot2D, optional
            The created line plot when a valid line style was
            present in the format string, ``None`` otherwise.

        Notes
        -----
        This plot method shares many of the same plotting features as
        the `matplotlib.pyplot.plot
        <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html>`_.
        Please reference the documentation there for a full
        description of the allowable format strings.

        Examples
        --------
        Generate a line plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _, line_plot = chart.plot(range(10), range(10))
           >>> chart.show()

           Generate a line and scatter plot.

           >>> chart = pv.Chart2D()
           >>> scatter_plot, line_plot = chart.plot(range(10), fmt='o-')
           >>> chart.show()

        """
        ...
    
    def scatter(self, x, y, color=..., size=..., style=..., label=...):
        """Add a scatter plot to this chart.

        Parameters
        ----------
        x : array_like
            X coordinates of the points to draw.

        y : array_like
            Y coordinates of the points to draw.

        color : ColorLike, default: "b"
            Color of the points drawn in this plot. Any color parsable
            by :class:`pyvista.Color` is allowed.

        size : float, default: 10
            Size of the point markers drawn in this plot.

        style : str, default: "o"
            Style of the point markers drawn in this plot. See
            :ref:`ScatterPlot2D.MARKER_STYLES <scatter_marker_styles>`
            for a list of allowed marker styles.

        label : str, default: ""
            Label of this plot, as shown in the chart's legend.

        Returns
        -------
        plotting.charts.ScatterPlot2D
            The created scatter plot.

        Examples
        --------
        Generate a scatter plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.scatter([0, 1, 2], [2, 1, 3])
           >>> chart.show()

        """
        ...
    
    def line(self, x, y, color=..., width=..., style=..., label=...):
        """Add a line plot to this chart.

        Parameters
        ----------
        x : array_like
            X coordinates of the points through which a line should be drawn.

        y : array_like
            Y coordinates of the points through which a line should be drawn.

        color : ColorLike, default: "b"
            Color of the line drawn in this plot. Any color parsable
            by :class:`pyvista.Color` is allowed.

        width : float, default: 1
            Width of the line drawn in this plot.

        style : str, default: "-"
            Style of the line drawn in this plot. See
            :ref:`Pen.LINE_STYLES <pen_line_styles>` for a list of
            allowed line styles.

        label : str, default: ""
            Label of this plot, as shown in the chart's legend.

        Returns
        -------
        plotting.charts.LinePlot2D
            The created line plot.

        Examples
        --------
        Generate a line plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.show()

        """
        ...
    
    def area(self, x, y1, y2=..., color=..., label=...):
        """Add an area plot to this chart.

        Parameters
        ----------
        x : array_like
            X coordinates of the points outlining the area to draw.

        y1 : array_like
            Y coordinates of the points on the first outline of the area to draw.

        y2 : array_like, optional
            Y coordinates of the points on the second outline of the
            area to draw. Defaults to ``np.zeros_like(x)``.

        color : ColorLike, default: "b"
            Color of the area drawn in this plot. Any color parsable
            by :class:`pyvista.Color` is allowed.

        label : str, default: ""
            Label of this plot, as shown in the chart's legend.

        Returns
        -------
        plotting.charts.AreaPlot
            The created area plot.

        Examples
        --------
        Generate an area plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.area([0, 1, 2], [2, 1, 3])
           >>> chart.show()

        """
        ...
    
    def bar(self, x, y, color=..., orientation=..., label=...):
        """Add a bar plot to this chart.

        Parameters
        ----------
        x : array_like
            Positions (along the x-axis for a vertical orientation,
            along the y-axis for a horizontal orientation) of the bars
            to draw.

        y : array_like
            Size of the bars to draw. Multiple bars can be stacked by
            passing a sequence of sequences.

        color : ColorLike, default: "b"
            Color of the bars drawn in this plot. Any color parsable
            by :class:`pyvista.Color` is allowed.

        orientation : str, default: "V"
            Orientation of the bars drawn in this plot. Either ``"H"``
            for an horizontal orientation or ``"V"`` for a vertical
            orientation.

        label : str, default: ""
            Label of this plot, as shown in the chart's legend.

        Returns
        -------
        plotting.charts.BarPlot
            The created bar plot.

        Examples
        --------
        Generate a bar plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.bar([0, 1, 2], [2, 1, 3])
           >>> chart.show()

        """
        ...
    
    def stack(self, x, ys, colors=..., labels=...):
        """Add a stack plot to this chart.

        Parameters
        ----------
        x : array_like
            X coordinates of the points outlining the stacks (areas) to draw.

        ys : sequence[array_like]
            Size of the stacks (areas) to draw at the corresponding X
            coordinates. Each sequence defines the sizes of one stack
            (area), which are stacked on top of each other.

        colors : sequence[ColorLike], optional
            Color of the stacks (areas) drawn in this plot. Any color
            parsable by :class:`pyvista.Color` is allowed.

        labels : sequence[str], default: []
            Label for each stack (area) drawn in this plot, as shown
            in the chart's legend.

        Returns
        -------
        plotting.charts.StackPlot
            The created stack plot.

        Examples
        --------
        Generate a stack plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> plot = chart.stack([0, 1, 2], [[2, 1, 3],[1, 2, 1]])
           >>> chart.show()

        """
        ...
    
    def plots(self, plot_type=...):
        """Return all plots of the specified type in this chart.

        Parameters
        ----------
        plot_type : str, optional
            The type of plots to return. Allowed types are
            ``"scatter"``, ``"line"``, ``"area"``, ``"bar"``
            and ``"stack"``.
            If no type is provided (``None``), all plots are returned,
            regardless of their type.

        Yields
        ------
        plot : plotting.charts.ScatterPlot2D | plotting.charts.LinePlot2D | plotting.charts.AreaPlot | plotting.charts.BarPlot | plotting.charts.StackPlot
            One of the plots (of the specified type) in this chart.

        Examples
        --------
        Create a 2D chart with a line and scatter plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> scatter_plot, line_plot = chart.plot([0, 1, 2], [2, 1, 3], "o-")
           >>> chart.show()

           Retrieve all plots in the chart.

           >>> plots = [*chart.plots()]
           >>> scatter_plot in plots and line_plot in plots
           True

           Retrieve all line plots in the chart.

           >>> line_plots = [*chart.plots("line")]
           >>> line_plot == line_plots[0]
           True

        """
        ...
    
    def remove_plot(self, plot):
        """Remove the given plot from this chart.

        Parameters
        ----------
        plot : plotting.charts.ScatterPlot2D | plotting.charts.LinePlot2D | plotting.charts.AreaPlot | plotting.charts.BarPlot | plotting.charts.StackPlot
            The plot to remove.

        Examples
        --------
        Create a 2D chart with a line and scatter plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> scatter_plot, line_plot = chart.plot([0, 1, 2], [2, 1, 3], "o-")
           >>> chart.show()

           Remove the scatter plot from the chart.

           >>> chart.remove_plot(scatter_plot)
           >>> chart.show()

        """
        ...
    
    def clear(self, plot_type=...):
        """Remove all plots of the specified type from this chart.

        Parameters
        ----------
        plot_type : str, optional
            The type of the plots to remove. Allowed types are
            ``"scatter"``, ``"line"``, ``"area"``, ``"bar"``
            and ``"stack"``.

            If no type is provided (``None``), all plots are removed,
            regardless of their type.

        Examples
        --------
        Create a 2D chart with multiple line and scatter plot.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.plot([0, 1, 2], [2, 1, 3], "o-b")
           >>> _ = chart.plot([-2, -1, 0], [3, 1, 2], "d-r")
           >>> chart.show()

           Remove all scatter plots from the chart.

           >>> chart.clear("scatter")
           >>> chart.show()

        """
        ...
    
    @property
    def x_axis(self):
        """Return this chart's horizontal (x) :class:`Axis <plotting.charts.Axis>`.

        Examples
        --------
        Create a 2D plot and hide the x-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_axis.toggle()
           >>> chart.show()

        """
        ...
    
    @property
    def y_axis(self):
        """Return this chart's vertical (y) :class:`Axis <plotting.charts.Axis>`.

        Examples
        --------
        Create a 2D plot and hide the y-axis.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.y_axis.toggle()
           >>> chart.show()

        """
        ...
    
    @property
    def x_label(self):
        """Return or set the label of this chart's x-axis.

        Examples
        --------
        Create a 2D plot and set custom axis labels.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_label = "Horizontal axis"
           >>> chart.y_label = "Vertical axis"
           >>> chart.show()

        """
        ...
    
    @x_label.setter
    def x_label(self, val):
        ...
    
    @property
    def y_label(self):
        """Return or set the label of this chart's y-axis.

        Examples
        --------
        Create a 2D plot and set custom axis labels.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_label = "Horizontal axis"
           >>> chart.y_label = "Vertical axis"
           >>> chart.show()

        """
        ...
    
    @y_label.setter
    def y_label(self, val):
        ...
    
    @property
    def x_range(self):
        """Return or set the range of this chart's x-axis.

        Examples
        --------
        Create a 2D plot and set custom axis ranges.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_range = [-2, 2]
           >>> chart.y_range = [0, 5]
           >>> chart.show()

        """
        ...
    
    @x_range.setter
    def x_range(self, val):
        ...
    
    @property
    def y_range(self):
        """Return or set the range of this chart's y-axis.

        Examples
        --------
        Create a 2D plot and set custom axis ranges.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.x_range = [-2, 2]
           >>> chart.y_range = [0, 5]
           >>> chart.show()

        """
        ...
    
    @y_range.setter
    def y_range(self, val):
        ...
    
    @property
    def grid(self):
        """Enable or disable the chart grid.

        Examples
        --------
        Create a 2D chart with the grid disabled.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> import numpy as np
           >>> x = np.linspace(0, 2*np.pi, 20)
           >>> y = np.sin(x)
           >>> chart = pv.Chart2D()
           >>> _ = chart.line(x, y, 'r')
           >>> chart.grid = False
           >>> chart.show()

           Enable the grid

           >>> chart.grid = True
           >>> chart.show()

        """
        ...
    
    @grid.setter
    def grid(self, val):
        ...
    
    def hide_axes(self):
        """Hide the x- and y-axis of this chart.

        This includes all labels, ticks and the grid.

        Examples
        --------
        Create a 2D plot and hide the axes.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.Chart2D()
           >>> _ = chart.line([0, 1, 2], [2, 1, 3])
           >>> chart.hide_axes()
           >>> chart.show()

        """
        ...
    


class BoxPlot(_MultiCompPlot, _vtk.vtkPlotBox):
    """Class representing a box plot.

    Users should typically not directly create new plot instances, but
    use the dedicated ``ChartBox`` class.

    Parameters
    ----------
    chart : ChartBox
        The chart containing this plot.

    data : sequence[array_like]
        Dataset(s) from which the relevant statistics will be
        calculated used to draw the box plot.

    colors : sequence[ColorLike], optional
        Color of the boxes drawn in this plot. Any color parsable by
        :class:`pyvista.Color` is allowed. If omitted (``None``), the
        default color scheme is used.

    labels : sequence[str], default: []
        Label for each box drawn in this plot, as shown in the chart's
        legend.

    Examples
    --------
    Create boxplots for datasets sampled from shifted normal distributions.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> import numpy as np
       >>> rng = np.random.default_rng(1)  # Seeded random number generator used for data generation
       >>> normal_data = [rng.normal(i, size=50) for i in range(5)]
       >>> chart = pv.ChartBox(normal_data, labels=[f"x ~ N({i},1)" for i in range(5)])
       >>> chart.show()

    """
    _DOC_SUBS = ...
    def __init__(self, chart, data, colors=..., labels=...) -> None:
        """Initialize a new box plot instance."""
        ...
    
    @property
    def data(self):
        """Retrieve the datasets of which the boxplots are drawn.

        Examples
        --------
        Create a box plot and display the datasets.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartBox([[0, 1, 1, 2, 3, 3, 4]])
           >>> chart.plot.data
           (pyvista_ndarray([0, 1, 1, 2, 3, 3, 4]),)
           >>> chart.show()

        """
        ...
    
    @property
    def stats(self):
        """Retrieve the statistics (quartiles and extremum values) of the datasets of which the boxplots are drawn.

        Examples
        --------
        Create a box plot and display the statistics.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartBox([[0, 1, 1, 2, 3, 3, 4]])
           >>> chart.plot.stats
           (pyvista_ndarray([0., 1., 2., 3., 4.]),)
           >>> chart.show()

        """
        ...
    
    def update(self, data):
        """Update the plot's underlying dataset(s).

        Parameters
        ----------
        data : sequence[array_like]
            The new dataset(s) used in this box plot.

        Examples
        --------
        Create a box plot from a standard Gaussian dataset.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> import numpy as np
           >>> rng = np.random.default_rng(1)  # Seeded random number generator for data generation
           >>> chart = pv.ChartBox([rng.normal(size=100)])
           >>> chart.show()

           Update the box plot (shift the standard Gaussian distribution).

           >>> chart.plot.update([rng.normal(loc=2, size=100)])
           >>> chart.show()

        """
        ...
    


class ChartBox(_Chart, _vtk.vtkChartBox):
    """Dedicated chart for drawing box plots.

    Parameters
    ----------
    data : sequence[array_like]
        Dataset(s) from which the relevant statistics will be
        calculated used to draw the box plot.

    colors : sequence[ColorLike], optional
        Color used for each drawn boxplot. If omitted (``None``), the
        default color scheme is used.

    labels : sequence[str], default: []
        Label for each drawn boxplot, as shown in the chart's
        legend.

    size : sequence[float], optional
        Size of the chart in normalized coordinates. A size of ``(0,
        0)`` is invisible, a size of ``(1, 1)`` occupies the whole
        renderer's width and height.

    loc : sequence[float], optional
        Location of the chart (its bottom left corner) in normalized
        coordinates. A location of ``(0, 0)`` corresponds to the
        renderer's bottom left corner, a location of ``(1, 1)``
        corresponds to the renderer's top right corner.

    Examples
    --------
    Create boxplots for datasets sampled from shifted normal distributions.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> import numpy as np
       >>> rng = np.random.default_rng(1)  # Seeded random number generator used for data generation
       >>> normal_data = [rng.normal(i, size=50) for i in range(5)]
       >>> chart = pv.ChartBox(normal_data, labels=[f"x ~ N({i},1)" for i in range(5)])
       >>> chart.show()

    """
    _DOC_SUBS = ...
    def __init__(self, data, colors=..., labels=..., size=..., loc=...) -> None:
        """Initialize a new chart containing box plots."""
        ...
    
    @property
    def plot(self):
        """Return the :class:`BoxPlot <plotting.charts.BoxPlot>` instance associated with this chart.

        Examples
        --------
        Create a box plot from a standard Gaussian dataset.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> import numpy as np
           >>> rng = np.random.default_rng(1)  # Seeded random number generator for data generation
           >>> chart = pv.ChartBox([rng.normal(size=100)])
           >>> chart.show()

           Update the box plot (shift the standard Gaussian distribution).

           >>> chart.plot.update([rng.normal(loc=2, size=100)])
           >>> chart.show()

        """
        ...
    
    @property
    def size(self):
        """Return or set the chart size in normalized coordinates.

        A size of ``(1, 1)`` occupies the whole renderer.

        Notes
        -----
        Customisable ChartBox geometry is only supported in VTK v9.2
        or newer. For older VTK versions, the size cannot be modified,
        filling up the entire viewport by default.

        Examples
        --------
        Create a half-sized boxplot chart centered in the middle of the
        renderer.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartBox([[0, 1, 1, 2, 3, 3, 4]])
           >>> chart.size = (0.5, 0.5)
           >>> chart.loc = (0.25, 0.25)
           >>> chart.show()

        """
        ...
    
    @size.setter
    def size(self, val):
        ...
    
    @property
    def loc(self):
        """Return or set the chart position in normalized coordinates.

        This denotes the location of the chart's bottom left corner.

        Notes
        -----
        Customisable ChartBox geometry is only supported in VTK v9.2
        or newer. For older VTK versions, the location cannot be modified,
        filling up the entire viewport by default.

        Examples
        --------
        Create a half-sized boxplot chart centered in the middle of the
        renderer.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartBox([[0, 1, 1, 2, 3, 3, 4]])
           >>> chart.size = (0.5, 0.5)
           >>> chart.loc = (0.25, 0.25)
           >>> chart.show()

        """
        ...
    
    @loc.setter
    def loc(self, val):
        ...
    


class PiePlot(_MultiCompPlot, _vtkWrapper, _vtk.vtkPlotPie):
    """Class representing a pie plot.

    Users should typically not directly create new plot instances, but
    use the dedicated :class:`ChartPie` class.

    Parameters
    ----------
    chart : ChartPie
        The chart containing this plot.

    data : array_like
        Relative size of each pie segment.

    colors : sequence[ColorLike], optional
        Color of the segments drawn in this plot. Any color parsable
        by :class:`pyvista.Color` is allowed. If omitted (``None``),
        the default color scheme is used.

    labels : sequence[str], default: []
        Label for each pie segment drawn in this plot, as shown in the
        chart's legend.

    Examples
    --------
    Create a pie plot showing the usage of tax money.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> x = [128.3, 32.9, 31.8, 29.3, 21.2]
       >>> l = ["Social benefits", "Governance", "Economic policy", "Education", "Other"]
       >>> chart = pv.ChartPie(x, labels=l)
       >>> chart.show()

    """
    _DOC_SUBS = ...
    def __init__(self, chart, data, colors=..., labels=...) -> None:
        """Initialize a new pie plot instance."""
        ...
    
    @property
    def data(self):
        """Retrieve the sizes of the drawn segments.

        Examples
        --------
        Create a pie plot and display the sizes.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartPie([1, 2, 3])
           >>> chart.plot.data
           pyvista_ndarray([1, 2, 3])
           >>> chart.show()

        """
        ...
    
    def update(self, data):
        """Update the size of the pie segments.

        Parameters
        ----------
        data : array_like
            The new relative size of each pie segment.

        Examples
        --------
        Create a pie plot with segments of increasing size.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartPie([1, 2, 3, 4, 5])
           >>> chart.show()

           Update the pie plot (segments of equal size).

           >>> chart.plot.update([1, 1, 1, 1, 1])
           >>> chart.show()

        """
        ...
    


class ChartPie(_Chart, _vtk.vtkChartPie):
    """Dedicated chart for drawing pie plots.

    Parameters
    ----------
    data : array_like
        Relative size of each pie segment.

    colors : sequence[ColorLike], optional
        Color used for each pie segment drawn in this plot. If
        omitted (``None``), the default color scheme is used.

    labels : sequence[str], default: []
        Label for each pie segment drawn in this plot, as shown in the
        chart's legend.

    size : sequence[float], optional
        Size of the chart in normalized coordinates. A size of ``(0,
        0)`` is invisible, a size of ``(1, 1)`` occupies the whole
        renderer's width and height.

    loc : sequence[float], optional
        Location of the chart (its bottom left corner) in normalized
        coordinates. A location of ``(0, 0)`` corresponds to the
        renderer's bottom left corner, a location of ``(1, 1)``
        corresponds to the renderer's top right corner.

    Examples
    --------
    Create a pie plot showing the usage of tax money.

    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> x = [128.3, 32.9, 31.8, 29.3, 21.2]
       >>> l = ["Social benefits", "Governance", "Economic policy", "Education", "Other"]
       >>> chart = pv.ChartPie(x, labels=l)
       >>> chart.show()

    """
    _DOC_SUBS = ...
    def __init__(self, data, colors=..., labels=..., size=..., loc=...) -> None:
        """Initialize a new chart containing a pie plot."""
        ...
    
    @property
    def plot(self):
        """Return the :class:`PiePlot <plotting.charts.PiePlot>` instance associated with this chart.

        Examples
        --------
        Create a pie plot with segments of increasing size.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartPie([1, 2, 3, 4, 5])
           >>> chart.show()

           Update the pie plot (segments of equal size).

           >>> chart.plot.update([1, 1, 1, 1, 1])
           >>> chart.show()

        """
        ...
    
    @property
    def size(self):
        """Return or set the chart size in normalized coordinates.

        A size of ``(1, 1)`` occupies the whole renderer.

        Notes
        -----
        Customisable ChartPie geometry is only supported in VTK v9.2
        or newer. For older VTK versions, the size cannot be modified,
        filling up the entire viewport by default.

        Examples
        --------
        Create a half-sized pie chart centered in the middle of the
        renderer.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartPie([5, 4, 3, 2, 1])
           >>> chart.size = (0.5, 0.5)
           >>> chart.loc = (0.25, 0.25)
           >>> chart.show()

        """
        ...
    
    @size.setter
    def size(self, val):
        ...
    
    @property
    def loc(self):
        """Return or set the chart position in normalized coordinates.

        This denotes the location of the chart's bottom left corner.

        Notes
        -----
        Customisable ChartPie geometry is only supported in VTK v9.2
        or newer. For older VTK versions, the location cannot be modified,
        filling up the entire viewport by default.

        Examples
        --------
        Create a half-sized pie chart centered in the middle of the
        renderer.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> chart = pv.ChartPie([5, 4, 3, 2, 1])
           >>> chart.size = (0.5, 0.5)
           >>> chart.loc = (0.25, 0.25)
           >>> chart.show()

        """
        ...
    
    @loc.setter
    def loc(self, val):
        ...
    


class ChartMPL(_Chart, _vtk.vtkImageItem):
    """Create new chart from an existing matplotlib figure.

    Parameters
    ----------
    figure : matplotlib.figure.Figure, optional
        The matplotlib figure to draw. If no figure is
        provided ( ``None`` ), a new figure is created.

    size : sequence[float], default: (1, 1)
        Size of the chart in normalized coordinates. A size of ``(0,
        0)`` is invisible, a size of ``(1, 1)`` occupies the whole
        renderer's width and height.

    loc : sequence[float], default: (0, 0)
        Location of the chart (its bottom left corner) in normalized
        coordinates. A location of ``(0, 0)`` corresponds to the
        renderer's bottom left corner, a location of ``(1, 1)``
        corresponds to the renderer's top right corner.

    redraw_on_render : bool, default: True
        Flag indicating whether the chart should be redrawn when
        the plotter is rendered. For static charts, setting this
        to ``False`` can improve performance.

    Examples
    --------
    Plot streamlines of a vector field with varying colors (based on `this example <https://matplotlib.org/stable/gallery/images_contours_and_fields/plot_streamplot.html>`_).


    .. pyvista-plot::
       :force_static:

       >>> import pyvista as pv
       >>> import numpy as np
       >>> import matplotlib.pyplot as plt

       >>> w = 3
       >>> Y, X = np.mgrid[-w:w:100j, -w:w:100j]
       >>> U = -1 - X**2 + Y
       >>> V = 1 + X - Y**2
       >>> speed = np.sqrt(U**2 + V**2)

       >>> f, ax = plt.subplots()
       >>> strm = ax.streamplot(X, Y, U, V, color=U, linewidth=2, cmap='autumn')
       >>> _ = f.colorbar(strm.lines)
       >>> _ = ax.set_title('Streamplot with varying Color')
       >>> plt.tight_layout()

       >>> chart = pv.ChartMPL(f)
       >>> chart.show()

    """
    _DOC_SUBS = ...
    def __init__(self, figure=..., size=..., loc=..., redraw_on_render=...) -> None:
        """Initialize chart."""
        ...
    
    @property
    def figure(self):
        """Retrieve the matplotlib figure associated with this chart.

        Examples
        --------
        Create a matplotlib chart from an existing figure.


        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> import matplotlib.pyplot as plt
           >>> f, ax = plt.subplots()
           >>> _ = ax.plot([0, 1, 2], [2, 1, 3])
           >>> chart = pv.ChartMPL(f)
           >>> chart.figure is f
           True
           >>> chart.show()
        """
        ...
    
    @property
    def redraw_on_render(self):
        """Return or set the chart's redraw-on-render behavior.

        Notes
        -----
        When disabled, the chart will only be redrawn when the
        Plotter window is resized or the matplotlib figure is
        manually redrawn using ``fig.canvas.draw()``.
        When enabled, the chart will also be automatically
        redrawn whenever the Plotter is rendered using
        ``plotter.render()``.

        """
        ...
    
    @redraw_on_render.setter
    def redraw_on_render(self, val):
        ...
    
    @property
    def position(self):
        """Chart position w.r.t the bottom left corner (in pixels)."""
        ...
    
    @position.setter
    def position(self, val):
        ...
    
    @property
    def title(self):
        """Return or set the chart's title.

        Examples
        --------
        Create a matplotlib chart with title 'My Chart'.


        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> import matplotlib.pyplot as plt
           >>> f, ax = plt.subplots()
           >>> _ = ax.plot([0, 1, 2], [2, 1, 3])
           >>> chart = pv.ChartMPL(f)
           >>> chart.title = 'My Chart'
           >>> chart.show()

        """
        ...
    
    @title.setter
    def title(self, val):
        ...
    
    @property
    def legend_visible(self):
        """Return or set the visibility of the chart's legend.

        Examples
        --------
        Create a matplotlib chart with custom labels and show the legend.

        .. pyvista-plot::
           :force_static:

           >>> import pyvista as pv
           >>> import matplotlib.pyplot as plt
           >>> f, ax = plt.subplots()
           >>> _ = ax.plot([0, 1, 2], [2, 1, 3], label="Line")
           >>> _ = ax.scatter([0, 1, 2], [3, 2, 1], label="Points")
           >>> chart = pv.ChartMPL(f)
           >>> chart.legend_visible = True
           >>> chart.show()

           Hide the legend.

           >>> chart.legend_visible = False
           >>> chart.show()

        """
        ...
    
    @legend_visible.setter
    def legend_visible(self, val):
        ...
    


class Charts:
    """Collection of charts for a renderer.

    Users should typically not directly create new instances of this
    class, but use the dedicated ``Plotter.add_chart`` method.

    Parameters
    ----------
    renderer : pyvista.Renderer
        The renderer to which the charts should be added.

    """
    def __init__(self, renderer) -> None:
        """Create a new collection of charts for the given renderer."""
        ...
    
    def deep_clean(self):
        """Remove all references to the chart objects and internal objects."""
        ...
    
    def add_chart(self, *charts):
        """Add charts to the collection.

        Parameters
        ----------
        *charts : Chart2D | Chart3D
            One or more chart objects to be added to the collection.

        """
        ...
    
    def set_interaction(self, interactive, toggle=...):
        """Set or toggle interaction with charts for this renderer.

        Interaction with other charts in this renderer is disabled when ``toggle``
        is ``False``.

        Parameters
        ----------
        interactive : bool | Chart | int | list[Chart] | list[int]
            Following parameter values are accepted:

            * A boolean to enable (``True``) or disable (``False``) interaction
              with all charts.
            * The chart or its index to enable interaction with. Interaction
              with multiple charts can be enabled by passing a list of charts
              or indices.

        toggle : bool, default: False
            Instead of enabling interaction with the provided chart(s), interaction
            with the provided chart(s) is toggled. Only applicable when ``interactive``
            is not a boolean.

        Returns
        -------
        list of Chart
            The list of all interactive charts for this renderer.

        """
        ...
    
    def remove_chart(self, chart_or_index):
        """Remove a chart from the collection.

        Parameters
        ----------
        chart_or_index : int or Chart
            The index or the chart object to be removed from the collection.

        Raises
        ------
        ValueError
            If the specified chart index is not present in the charts collection.

        """
        ...
    
    def get_charts_by_pos(self, pos):
        """Retrieve visible charts indicated by the given mouse position.

        Parameters
        ----------
        pos : sequence[float]
            Tuple containing the mouse position.

        Returns
        -------
        list of Chart
            Visible charts indicated by the given mouse position.

        """
        ...
    
    def __getitem__(self, index) -> Chart:
        """Return a chart based on an index."""
        ...
    
    def __len__(self):
        """Return number of charts."""
        ...
    
    def __iter__(self):
        """Return an iterable of charts."""
        ...
    
    def __del__(self):
        """Clean up before being destroyed."""
        ...
    


