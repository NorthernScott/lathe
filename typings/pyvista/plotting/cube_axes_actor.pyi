"""
This type stub file was generated by pyright.
"""

import pyvista
from typing import TYPE_CHECKING
from . import _vtk
from pyvista.core._typing_core import BoundsLike

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
def make_axis_labels(vmin, vmax, n, fmt):
    """
    Create axis labels as a vtkStringArray.

    Parameters
    ----------
    vmin : float
        The minimum value for the axis labels.
    vmax : float
        The maximum value for the axis labels.
    n : int
        The number of labels to create.
    fmt : str
        A format string for the labels. If the string starts with '%', the label will be formatted using the old-style string formatting method.
        Otherwise, the label will be formatted using the new-style string formatting method.

    Returns
    -------
    vtkStringArray
        The created labels as a vtkStringArray object.
    """
    ...

class CubeAxesActor(_vtk.vtkCubeAxesActor):
    """Wrap vtkCubeAxesActor.

    This class is created to wrap vtkCubeAxesActor, which is used to draw axes
    and labels for the input data bounds. This wrapping aims to provide a
    user-friendly interface to use `vtkCubeAxesActor
    <https://vtk.org/doc/nightly/html/classvtkCubeAxesActor.html>`_.

    Parameters
    ----------
    camera : pyvista.Camera
        Camera to link to the axes actor.

    minor_ticks : bool, default: False
        If ``True``, also plot minor ticks on all axes.

    tick_location : str, optional
        Set how the ticks are drawn on the axes grid. Options include:
        ``'inside', 'outside', 'both'``.

    x_title : str, default: "X Axis"
        Title of the x-axis.

    y_title : str, default: "Y Axis"
        Title of the y-axis.

    z_title : str, default: "Z Axis"
        Title of the z-axis.

    x_axis_visibility : bool, default: True
        Visibility of the x-axis.

    y_axis_visibility : bool, default: True
        Visibility of the y-axis.

    z_axis_visibility : bool, default: True
        Visibility of the z-axis.

    x_label_format : str, optional
        A format string defining how tick labels are generated from tick
        positions for the x-axis. Defaults to the theme format if set,
        otherwise ``'%.1f'``.

    y_label_format : str, optional
        A format string defining how tick labels are generated from tick
        positions for the y-axis. Defaults to the theme format if set,
        otherwise ``'%.1f'``.

    z_label_format : str, optional
        A format string defining how tick labels are generated from tick
        positions for the z-axis. Defaults to the theme format if set,
        otherwise ``'%.1f'``.

    x_label_visibility : bool, default: True
        The visibility of the x-axis labels.

    y_label_visibility : bool, default: True
        The visibility of the y-axis labels.

    z_label_visibility : bool, default: True
        The visibility of the z-axis labels.

    n_xlabels : int, default: 5
        Number of labels along the x-axis.

    n_ylabels : int, default: 5
        Number of labels along the y-axis.

    n_zlabels : int, default: 5
        Number of labels along the z-axis.

    Examples
    --------
    Create a 3D plotter and add a CubeAxesActor to it.

    >>> import pyvista as pv
    >>> mesh = pv.Cube()
    >>> pl = pv.Plotter()
    >>> actor = pl.add_mesh(mesh)
    >>> cube_axes_actor = pv.CubeAxesActor(pl.camera)
    >>> cube_axes_actor.bounds = mesh.bounds
    >>> actor, property = pl.add_actor(cube_axes_actor)
    >>> pl.show()

    """
    def __init__(self, camera, minor_ticks=..., tick_location=..., x_title=..., y_title=..., z_title=..., x_axis_visibility=..., y_axis_visibility=..., z_axis_visibility=..., x_label_format=..., y_label_format=..., z_label_format=..., x_label_visibility=..., y_label_visibility=..., z_label_visibility=..., n_xlabels=..., n_ylabels=..., n_zlabels=...) -> None:
        """Initialize CubeAxesActor."""
        ...
    
    @property
    def tick_location(self) -> str:
        """Return or set how the ticks are drawn on the axes grid.

        Options include: ``'inside', 'outside', 'both'``.
        """
        ...
    
    @tick_location.setter
    def tick_location(self, value: str):
        ...
    
    @property
    def bounds(self) -> BoundsLike:
        """Return or set the bounding box."""
        ...
    
    @bounds.setter
    def bounds(self, bounds: BoundsLike):
        ...
    
    @property
    def x_axis_range(self) -> tuple[float, float]:
        """Return or set the x-axis range."""
        ...
    
    @x_axis_range.setter
    def x_axis_range(self, value: tuple[float, float]):
        ...
    
    @property
    def y_axis_range(self) -> tuple[float, float]:
        """Return or set the y-axis range."""
        ...
    
    @y_axis_range.setter
    def y_axis_range(self, value: tuple[float, float]):
        ...
    
    @property
    def z_axis_range(self) -> tuple[float, float]:
        """Return or set the z-axis range."""
        ...
    
    @z_axis_range.setter
    def z_axis_range(self, value: tuple[float, float]):
        ...
    
    @property
    def label_offset(self) -> float:
        """Return or set the distance between labels and the axis."""
        ...
    
    @label_offset.setter
    def label_offset(self, offset: float):
        ...
    
    @property
    def title_offset(self) -> float:
        """Return or set the distance between title and labels."""
        ...
    
    @title_offset.setter
    def title_offset(self, offset: float):
        ...
    
    @property
    def camera(self) -> pyvista.Camera:
        """Return or set the camera that performs scaling and translation."""
        ...
    
    @camera.setter
    def camera(self, camera: pyvista.Camera):
        ...
    
    @property
    def x_axis_minor_tick_visibility(self) -> bool:
        """Return or set visibility of the x-axis minior tick."""
        ...
    
    @x_axis_minor_tick_visibility.setter
    def x_axis_minor_tick_visibility(self, value: bool):
        ...
    
    @property
    def y_axis_minor_tick_visibility(self) -> bool:
        """Return or set visibility of the y-axis minior tick."""
        ...
    
    @y_axis_minor_tick_visibility.setter
    def y_axis_minor_tick_visibility(self, value: bool):
        ...
    
    @property
    def z_axis_minor_tick_visibility(self) -> bool:
        """Return or set visibility of the z-axis minior tick."""
        ...
    
    @z_axis_minor_tick_visibility.setter
    def z_axis_minor_tick_visibility(self, value: bool):
        ...
    
    @property
    def x_label_visibility(self) -> bool:
        """Return or set the visibility of the x-axis labels."""
        ...
    
    @x_label_visibility.setter
    def x_label_visibility(self, value: bool):
        ...
    
    @property
    def y_label_visibility(self) -> bool:
        """Return or set the visibility of the y-axis labels."""
        ...
    
    @y_label_visibility.setter
    def y_label_visibility(self, value: bool):
        ...
    
    @property
    def z_label_visibility(self) -> bool:
        """Return or set the visibility of the z-axis labels."""
        ...
    
    @z_label_visibility.setter
    def z_label_visibility(self, value: bool):
        ...
    
    @property
    def x_axis_visibility(self) -> bool:
        """Return or set the visibility of the x-axis."""
        ...
    
    @x_axis_visibility.setter
    def x_axis_visibility(self, value: bool):
        ...
    
    @property
    def y_axis_visibility(self) -> bool:
        """Return or set the visibility of the y-axis."""
        ...
    
    @y_axis_visibility.setter
    def y_axis_visibility(self, value: bool):
        ...
    
    @property
    def z_axis_visibility(self) -> bool:
        """Return or set the visibility of the y-axis."""
        ...
    
    @z_axis_visibility.setter
    def z_axis_visibility(self, value: bool):
        ...
    
    @property
    def x_label_format(self) -> str:
        """Return or set the label of the x-axis."""
        ...
    
    @x_label_format.setter
    def x_label_format(self, value: str):
        ...
    
    @property
    def y_label_format(self) -> str:
        """Return or set the label of the y-axis."""
        ...
    
    @y_label_format.setter
    def y_label_format(self, value: str):
        ...
    
    @property
    def z_label_format(self) -> str:
        """Return or set the label of the z-axis."""
        ...
    
    @z_label_format.setter
    def z_label_format(self, value: str):
        ...
    
    @property
    def x_title(self) -> str:
        """Return or set the title of the x-axis."""
        ...
    
    @x_title.setter
    def x_title(self, value: str):
        ...
    
    @property
    def y_title(self) -> str:
        """Return or set the title of the y-axis."""
        ...
    
    @y_title.setter
    def y_title(self, value: str):
        ...
    
    @property
    def z_title(self) -> str:
        """Return or set the title of the z-axis."""
        ...
    
    @z_title.setter
    def z_title(self, value: str):
        ...
    
    @property
    def use_2d_mode(self) -> bool:
        """Use the 2d render mode.

        This can be enabled for smoother plotting.
        """
        ...
    
    @use_2d_mode.setter
    def use_2d_mode(self, value: bool):
        ...
    
    @property
    def n_xlabels(self):
        """Number of labels on the x-axis."""
        ...
    
    @n_xlabels.setter
    def n_xlabels(self, value: int):
        ...
    
    @property
    def n_ylabels(self):
        """Number of labels on the y-axis."""
        ...
    
    @n_ylabels.setter
    def n_ylabels(self, value: int):
        ...
    
    @property
    def n_zlabels(self):
        """Number of labels on the z-axis."""
        ...
    
    @n_zlabels.setter
    def n_zlabels(self, value: int):
        ...
    
    @property
    def x_labels(self) -> list[str]:
        """Return the x-axis labels."""
        ...
    
    @property
    def y_labels(self) -> list[str]:
        """Return the y-axis labels."""
        ...
    
    @property
    def z_labels(self) -> list[str]:
        """Return the z-axis labels."""
        ...
    
    def update_bounds(self, bounds):
        """Update the bounds of this actor.

        Unlike the :attr:`CubeAxesActor.bounds` attribute, updating the bounds
        also updates the axis labels.

        Parameters
        ----------
        bounds : sequence[float]
            Bounds in the form of ``[xmin, xmax, ymin, ymax, zmin, zmax]``.

        """
        ...
    


