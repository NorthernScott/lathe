"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING
from .opts import InterpolationType, RepresentationType
from . import _vtk

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
class ActorProperties:
    """Properties wrapper for ``vtkProperty``.

    Contains the surface properties of the object.

    Parameters
    ----------
    properties : vtk.vtkProperty
        VTK properties of the current object.

    Examples
    --------
    Access the properties of the z-axis shaft.

    >>> import pyvista as pv

    >>> axes = pv.Axes()
    >>> z_axes_prop = axes.axes_actor.z_axis_shaft_properties
    >>> z_axes_prop.color = (1.0, 1.0, 0.0)
    >>> z_axes_prop.opacity = 0.5
    >>> axes.axes_actor.shaft_type = axes.axes_actor.ShaftType.CYLINDER

    >>> pl = pv.Plotter()
    >>> _ = pl.add_actor(axes.axes_actor)
    >>> _ = pl.add_mesh(pv.Sphere())
    >>> pl.show()

    """
    def __init__(self, properties: _vtk.vtkProperty) -> None:
        ...
    
    @property
    def color(self):
        """Return or set the color of the actor."""
        ...
    
    @color.setter
    def color(self, color: tuple[float, float, float]):
        ...
    
    @property
    def metallic(self):
        """Return or set the metallic coefficient of the surface."""
        ...
    
    @metallic.setter
    def metallic(self, value: float):
        ...
    
    @property
    def roughness(self):
        """Return or set the roughness of the surface."""
        ...
    
    @roughness.setter
    def roughness(self, value: float):
        ...
    
    @property
    def anisotropy(self):
        """Return or set the anisotropy coefficient."""
        ...
    
    @anisotropy.setter
    def anisotropy(self, value: float):
        ...
    
    @property
    def anisotropy_rotation(self):
        """Return or set the anisotropy rotation coefficient."""
        ...
    
    @anisotropy_rotation.setter
    def anisotropy_rotation(self, value: float):
        ...
    
    @property
    def lighting(self):
        """Return or set the lighting activation flag."""
        ...
    
    @lighting.setter
    def lighting(self, flag: bool):
        ...
    
    @property
    def interpolation_model(self):
        """Return or set the interpolation model.

        Can be any of the options in :class:`pyvista.plotting.opts.InterpolationType` enum.
        """
        ...
    
    @interpolation_model.setter
    def interpolation_model(self, model: InterpolationType):
        ...
    
    @property
    def index_of_refraction(self):
        """Return or set the Index Of Refraction of the base layer."""
        ...
    
    @index_of_refraction.setter
    def index_of_refraction(self, value: float):
        ...
    
    @property
    def opacity(self):
        """Return or set the opacity of the actor."""
        ...
    
    @opacity.setter
    def opacity(self, value: float):
        ...
    
    @property
    def shading(self):
        """Return or set the flag to activate the shading."""
        ...
    
    @shading.setter
    def shading(self, is_active: bool):
        ...
    
    @property
    def representation(self) -> RepresentationType:
        """Return or set the representation of the actor.

        Can be any of the options in :class:`pyvista.plotting.opts.RepresentationType` enum.
        """
        ...
    
    @representation.setter
    def representation(self, value: RepresentationType):
        ...
    


