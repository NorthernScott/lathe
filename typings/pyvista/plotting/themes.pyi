"""
This type stub file was generated by pyright.
"""

import pathlib
import pyvista
from enum import Enum
from pathlib import Path
from typing import Any, TYPE_CHECKING
from .colors import Color
from .opts import InterpolationType
from collections.abc import Callable
from pyvista.core._typing_core import Number, VectorLike
from ._typing import ColorLike

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
def load_theme(filename):
    """Load a theme from a file.

    Parameters
    ----------
    filename : str
        Theme file. Must be json.

    Returns
    -------
    pyvista.Theme
        The loaded theme.

    Examples
    --------
    >>> import pyvista as pv
    >>> from pyvista.plotting.themes import DocumentTheme
    >>> theme = DocumentTheme()
    >>> theme.save('my_theme.json')  # doctest:+SKIP
    >>> loaded_theme = pv.load_theme('my_theme.json')  # doctest:+SKIP

    """
    ...

def set_plot_theme(theme):
    """Set the plotting parameters to a predefined theme using a string.

    Parameters
    ----------
    theme : str
        Theme name.  Either ``'default'``, ``'document'``, ``'dark'``,
        or ``'paraview'``.

    Examples
    --------
    Set to the default theme.

    >>> import pyvista as pv
    >>> pv.set_plot_theme('default')

    Set to the document theme.

    >>> pv.set_plot_theme('document')

    Set to the dark theme.

    >>> pv.set_plot_theme('dark')

    Set to the ParaView theme.

    >>> pv.set_plot_theme('paraview')

    """
    ...

class _ForceSlots(type):
    """Metaclass to force classes and subclasses to have __slots__."""
    @classmethod
    def __prepare__(metaclass, name, bases, **kwargs):
        ...
    


class _ThemeConfig(metaclass=_ForceSlots):
    """Provide common methods for theme configuration classes."""
    __slots__: list[str] = ...
    @classmethod
    def from_dict(cls, dict_):
        """Create from a dictionary."""
        ...
    
    def to_dict(self) -> dict[str, Any]:
        """Return theme config parameters as a dictionary.

        Returns
        -------
        dict
            This theme parameter represented as a dictionary.

        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __getitem__(self, key):
        """Get a value via a key.

        Implemented here for backwards compatibility.
        """
        ...
    
    def __setitem__(self, key, value):
        """Set a value via a key.

        Implemented here for backwards compatibility.
        """
        ...
    


class _LightingConfig(_ThemeConfig):
    """PyVista lighting configuration.

    This will control the lighting interpolation type, parameters,
    and Physically Based Rendering (PBR) options

    Examples
    --------
    Set global PBR parameters.

    >>> import pyvista as pv
    >>> pv.global_theme.lighting_params.interpolation = 'pbr'
    >>> pv.global_theme.lighting_params.metallic = 0.5
    >>> pv.global_theme.lighting_params.roughness = 0.25

    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    @property
    def interpolation(self) -> InterpolationType:
        """Return or set the default interpolation type.

        See :class:`pyvista.plotting.opts.InterpolationType`.

        Options are:

        * ``'Phong'``
        * ``'Flat'``
        * ``'Physically based rendering'``

        This is stored as an integer value of the ``InterpolationType``
        so that the theme can be JSON-serializable.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.lighting_params.interpolation = 'Phong'
        >>> pv.global_theme.lighting_params.interpolation
        <InterpolationType.PHONG: 2>


        """
        ...
    
    @interpolation.setter
    def interpolation(self, interpolation: str | int | InterpolationType):
        ...
    
    @property
    def metallic(self) -> float:
        """Return or set the metallic value.

        This requires that the interpolation be set to ``'Physically based
        rendering'``. Must be between 0 and 1.

        Examples
        --------
        Set the global metallic value used in physically based rendering to
        ``0.5``.

        >>> import pyvista as pv
        >>> pv.global_theme.lighting_params.metallic = 0.5
        >>> pv.global_theme.lighting_params.metallic
        0.5

        """
        ...
    
    @metallic.setter
    def metallic(self, metallic: float):
        ...
    
    @property
    def roughness(self) -> float:
        """Return or set the roughness value.

        This value has to be between 0 (glossy) and 1 (rough). A glossy
        material has reflections and a high specular part. This parameter is
        only used by PBR interpolation.

        Examples
        --------
        Set the global roughness value used in physically based rendering to
        ``0.25``.

        >>> import pyvista as pv
        >>> pv.global_theme.lighting_params.roughness = 0.25
        >>> pv.global_theme.lighting_params.roughness
        0.25

        """
        ...
    
    @roughness.setter
    def roughness(self, roughness: float):
        ...
    
    @property
    def ambient(self) -> float:
        """Return or set the ambient value.

        When lighting is enabled, this is the amount of light in the range of 0
        to 1 that reaches the actor when not directed at the light source
        emitted from the viewer.

        Examples
        --------
        Set the global ambient lighting value to ``0.2``.

        >>> import pyvista as pv
        >>> pv.global_theme.lighting_params.ambient = 0.2
        >>> pv.global_theme.lighting_params.ambient
        0.2

        """
        ...
    
    @ambient.setter
    def ambient(self, ambient: float):
        ...
    
    @property
    def diffuse(self) -> float:
        """Return or set the diffuse value.

        This is the scattering of light by reflection or
        transmission. Diffuse reflection results when light strikes an
        irregular surface such as a frosted window or the surface of a
        frosted or coated light bulb. Must be between 0 and 1.

        Examples
        --------
        Set the global diffuse lighting value to ``0.5``.

        >>> import pyvista as pv
        >>> pv.global_theme.lighting_params.diffuse = 0.5
        >>> pv.global_theme.lighting_params.diffuse
        0.5

        """
        ...
    
    @diffuse.setter
    def diffuse(self, diffuse: float):
        ...
    
    @property
    def specular(self) -> float:
        """Return or set the specular value.

        Specular lighting simulates the bright spot of a light that appears
        on shiny objects. Must be between 0 and 1.

        Examples
        --------
        Set the global specular value to ``0.1``.

        >>> import pyvista as pv
        >>> pv.global_theme.lighting_params.specular = 0.1
        >>> pv.global_theme.lighting_params.specular
        0.1

        """
        ...
    
    @specular.setter
    def specular(self, specular: float):
        ...
    
    @property
    def specular_power(self) -> float:
        """Return or set the specular power value.

        Must be between 0.0 and 128.0.

        Examples
        --------
        Set the global specular power value to ``50``.

        >>> import pyvista as pv
        >>> pv.global_theme.lighting_params.specular_power = 50
        >>> pv.global_theme.lighting_params.specular_power
        50

        """
        ...
    
    @specular_power.setter
    def specular_power(self, specular_power: float):
        ...
    
    @property
    def emissive(self) -> bool:
        """Return or set if emissive is used with point Gaussian style.

        Examples
        --------
        Globally enable emissive lighting when using the point Gaussian style.

        >>> import pyvista as pv
        >>> pv.global_theme.lighting_params.emissive = True
        >>> pv.global_theme.lighting_params.emissive
        True

        """
        ...
    
    @emissive.setter
    def emissive(self, emissive: bool):
        ...
    


class _DepthPeelingConfig(_ThemeConfig):
    """PyVista depth peeling configuration.

    Examples
    --------
    Set global depth peeling parameters.

    >>> import pyvista as pv
    >>> pv.global_theme.depth_peeling.number_of_peels = 1
    >>> pv.global_theme.depth_peeling.occlusion_ratio = 0.0
    >>> pv.global_theme.depth_peeling.enabled = True

    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    @property
    def number_of_peels(self) -> int:
        """Return or set the number of peels in depth peeling.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.depth_peeling.number_of_peels = 1

        """
        ...
    
    @number_of_peels.setter
    def number_of_peels(self, number_of_peels: int):
        ...
    
    @property
    def occlusion_ratio(self) -> float:
        """Return or set the occlusion ratio in depth peeling.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.depth_peeling.occlusion_ratio = 0.0

        """
        ...
    
    @occlusion_ratio.setter
    def occlusion_ratio(self, occlusion_ratio: float):
        ...
    
    @property
    def enabled(self) -> bool:
        """Return or set if depth peeling is enabled.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.depth_peeling.enabled = True

        """
        ...
    
    @enabled.setter
    def enabled(self, enabled: bool):
        ...
    
    def __repr__(self):
        ...
    


class _SilhouetteConfig(_ThemeConfig):
    """PyVista silhouette configuration.

    Examples
    --------
    Set global silhouette parameters.

    >>> import pyvista as pv
    >>> pv.global_theme.silhouette.enabled = True
    >>> pv.global_theme.silhouette.color = 'grey'
    >>> pv.global_theme.silhouette.line_width = 2
    >>> pv.global_theme.silhouette.feature_angle = 20

    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    @property
    def enabled(self) -> bool:
        """Return or set whether silhouette is on or off."""
        ...
    
    @enabled.setter
    def enabled(self, enabled: bool):
        ...
    
    @property
    def color(self) -> Color:
        """Return or set the silhouette color.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.silhouette.color = 'red'

        """
        ...
    
    @color.setter
    def color(self, color: ColorLike):
        ...
    
    @property
    def line_width(self) -> float:
        """Return or set the silhouette line width.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.silhouette.line_width = 2.0

        """
        ...
    
    @line_width.setter
    def line_width(self, line_width: float):
        ...
    
    @property
    def opacity(self) -> float:
        """Return or set the silhouette opacity.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.silhouette.opacity = 1.0

        """
        ...
    
    @opacity.setter
    def opacity(self, opacity: float):
        ...
    
    @property
    def feature_angle(self) -> float | None:
        """Return or set the silhouette feature angle.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.silhouette.feature_angle = 20.0

        """
        ...
    
    @feature_angle.setter
    def feature_angle(self, feature_angle: float | None):
        ...
    
    @property
    def decimate(self) -> float:
        """Return or set the amount to decimate the silhouette.

        Parameter must be between 0 and 1.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.silhouette.decimate = 0.9

        """
        ...
    
    @decimate.setter
    def decimate(self, decimate: float):
        ...
    
    def __repr__(self):
        ...
    


class _ColorbarConfig(_ThemeConfig):
    """PyVista colorbar configuration.

    Examples
    --------
    Set the colorbar width.

    >>> import pyvista as pv
    >>> pv.global_theme.colorbar_horizontal.width = 0.2

    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    @property
    def width(self) -> float:
        """Return or set colorbar width.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.colorbar_horizontal.width = 0.2

        """
        ...
    
    @width.setter
    def width(self, width: float):
        ...
    
    @property
    def height(self) -> float:
        """Return or set colorbar height.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.colorbar_horizontal.height = 0.2

        """
        ...
    
    @height.setter
    def height(self, height: float):
        ...
    
    @property
    def position_x(self) -> float:
        """Return or set colorbar x position.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.colorbar_horizontal.position_x = 0.2

        """
        ...
    
    @position_x.setter
    def position_x(self, position_x: float):
        ...
    
    @property
    def position_y(self) -> float:
        """Return or set colorbar y position.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.colorbar_horizontal.position_y = 0.2

        """
        ...
    
    @position_y.setter
    def position_y(self, position_y: float):
        ...
    
    def __repr__(self):
        ...
    


class _AxesConfig(_ThemeConfig):
    """PyVista axes configuration.

    Examples
    --------
    Show the default axes configuration values.

    >>> import pyvista as pv
    >>> pv.global_theme.axes.x_color
    Color(name='tomato', hex='#ff6347ff', opacity=255)

    >>> pv.global_theme.axes.y_color
    Color(name='seagreen', hex='#2e8b57ff', opacity=255)

    >>> pv.global_theme.axes.z_color
    Color(name='blue', hex='#0000ffff', opacity=255)

    >>> pv.global_theme.axes.box
    False

    >>> pv.global_theme.axes.show
    True

    Set the x-axis color to black.

    >>> pv.global_theme.axes.x_color = 'black'

    Show the axes orientation widget by default.

    >>> pv.global_theme.axes.show = True

    Use the :func:`axes orientation box <pyvista.create_axes_orientation_box>` as the orientation widget.

    >>> pv.global_theme.axes.box = True

    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __repr__(self):
        ...
    
    @property
    def x_color(self) -> Color:
        """Return or set x-axis color.

        Examples
        --------
        Get the default x-axis color

        >>> import pyvista as pv
        >>> pv.global_theme.axes.x_color
        Color(name='tomato', hex='#ff6347ff', opacity=255)

        Change the default color.
        >>> pv.global_theme.axes.x_color = 'red'
        """
        ...
    
    @x_color.setter
    def x_color(self, color: ColorLike):
        ...
    
    @property
    def y_color(self) -> Color:
        """Return or set y-axis color.

        Examples
        --------
        Get the default y-axis color

        >>> import pyvista as pv
        >>> pv.global_theme.axes.y_color
        Color(name='seagreen', hex='#2e8b57ff', opacity=255)

        Change the default color.
        >>> pv.global_theme.axes.y_color = 'green'
        """
        ...
    
    @y_color.setter
    def y_color(self, color: ColorLike):
        ...
    
    @property
    def z_color(self) -> Color:
        """Return or set z-axis color.

        Examples
        --------
        Get the default z-axis color

        >>> import pyvista as pv
        >>> pv.global_theme.axes.z_color
        Color(name='blue', hex='#0000ffff', opacity=255)

        Change the default color.
        >>> pv.global_theme.axes.z_color = 'purple'
        """
        ...
    
    @z_color.setter
    def z_color(self, color: ColorLike):
        ...
    
    @property
    def box(self) -> bool:
        """Use a box axes orientation widget.

        If ``True``, Use the :func:`axes orientation box <pyvista.create_axes_orientation_box>`
        instead of the :class:`pyvista.AxesActor` as the orientation widget for plots.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.axes.box = True

        """
        ...
    
    @box.setter
    def box(self, box: bool):
        ...
    
    @property
    def show(self) -> bool:
        """Show or hide the axes actor.

        Examples
        --------
        Hide the axes by default.

        >>> import pyvista as pv
        >>> pv.global_theme.axes.show = False

        """
        ...
    
    @show.setter
    def show(self, show: bool):
        ...
    


class _Font(_ThemeConfig):
    """PyVista plotter font configuration.

    Examples
    --------
    Set the default font family to 'arial'.  Must be either
    'arial', 'courier', or 'times'.

    >>> import pyvista as pv
    >>> pv.global_theme.font.family = 'arial'

    Set the default font size to 20.

    >>> pv.global_theme.font.size = 20

    Set the default title size to 40

    >>> pv.global_theme.font.title_size = 40

    Set the default label size to 10

    >>> pv.global_theme.font.label_size = 10

    Set the default text color to 'grey'

    >>> pv.global_theme.font.color = 'grey'

    Set the string formatter used to format numerical data to '%.6e'

    >>> pv.global_theme.font.fmt = '%.6e'

    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __repr__(self):
        ...
    
    @property
    def family(self) -> str:
        """Return or set the font family.

        Must be one of the following:

        * ``"arial"``
        * ``"courier"``
        * ``"times"``

        Examples
        --------
        Set the default global font family to 'courier'.

        >>> import pyvista as pv
        >>> pv.global_theme.font.family = 'courier'

        """
        ...
    
    @family.setter
    def family(self, family: str):
        ...
    
    @property
    def size(self) -> int:
        """Return or set the font size.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.font.size = 20

        """
        ...
    
    @size.setter
    def size(self, size: int):
        ...
    
    @property
    def title_size(self) -> int:
        """Return or set the title size.

        If ``None``, then VTK uses ``UnconstrainedFontSizeOn`` for titles.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.font.title_size = 20
        """
        ...
    
    @title_size.setter
    def title_size(self, title_size: int):
        ...
    
    @property
    def label_size(self) -> int:
        """Return or set the label size.

        If ``None``, then VTK uses ``UnconstrainedFontSizeOn`` for labels.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.font.label_size = 20
        """
        ...
    
    @label_size.setter
    def label_size(self, label_size: int):
        ...
    
    @property
    def color(self) -> Color:
        """Return or set the font color.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.font.color = 'black'
        """
        ...
    
    @color.setter
    def color(self, color: ColorLike):
        ...
    
    @property
    def fmt(self) -> str:
        """Return or set the string formatter used to format numerical data.

        Examples
        --------
        Set the string formatter used to format numerical data to '%.6e'.

        >>> import pyvista as pv
        >>> pv.global_theme.font.fmt = '%.6e'

        """
        ...
    
    @fmt.setter
    def fmt(self, fmt: str):
        ...
    


class _SliderStyleConfig(_ThemeConfig):
    """PyVista configuration for a single slider style."""
    __slots__ = ...
    def __init__(self) -> None:
        """Initialize the slider style configuration."""
        ...
    
    @property
    def name(self) -> str:
        """Return the name of the slider style configuration."""
        ...
    
    @name.setter
    def name(self, name: str):
        ...
    
    @property
    def cap_width(self) -> float:
        """Return or set the cap width.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.slider_styles.modern.cap_width = 0.02

        """
        ...
    
    @cap_width.setter
    def cap_width(self, cap_width: float):
        ...
    
    @property
    def cap_length(self) -> float:
        """Return or set the cap length.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.slider_styles.modern.cap_length = 0.01

        """
        ...
    
    @cap_length.setter
    def cap_length(self, cap_length: float):
        ...
    
    @property
    def cap_opacity(self) -> float:
        """Return or set the cap opacity.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.slider_styles.modern.cap_opacity = 1.0

        """
        ...
    
    @cap_opacity.setter
    def cap_opacity(self, cap_opacity: float):
        ...
    
    @property
    def tube_color(self) -> Color:
        """Return or set the tube color.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.slider_styles.modern.tube_color = 'black'
        """
        ...
    
    @tube_color.setter
    def tube_color(self, tube_color: ColorLike):
        ...
    
    @property
    def tube_width(self) -> float:
        """Return or set the tube_width.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.slider_styles.modern.tube_width = 0.005

        """
        ...
    
    @tube_width.setter
    def tube_width(self, tube_width: float):
        ...
    
    @property
    def slider_color(self) -> Color:
        """Return or set the slider color.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.slider_styles.modern.slider_color = 'grey'

        """
        ...
    
    @slider_color.setter
    def slider_color(self, slider_color: ColorLike):
        ...
    
    @property
    def slider_width(self) -> float:
        """Return or set the slider width.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.slider_styles.modern.slider_width = 0.04

        """
        ...
    
    @slider_width.setter
    def slider_width(self, slider_width: float):
        ...
    
    @property
    def slider_length(self) -> float:
        """Return or set the slider_length.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.slider_styles.modern.slider_length = 0.02

        """
        ...
    
    @slider_length.setter
    def slider_length(self, slider_length: float):
        ...
    
    def __repr__(self):
        ...
    


class _SliderConfig(_ThemeConfig):
    """PyVista configuration encompassing all slider styles.

    Examples
    --------
    Set the classic slider configuration.

    >>> import pyvista as pv
    >>> slider_styles = pv.global_theme.slider_styles
    >>> slider_styles.classic.slider_length = 0.02
    >>> slider_styles.classic.slider_width = 0.04
    >>> slider_styles.classic.slider_color = (0.5, 0.5, 0.5)
    >>> slider_styles.classic.tube_width = 0.005
    >>> slider_styles.classic.tube_color = (1.0, 1.0, 1.0)
    >>> slider_styles.classic.cap_opacity = 1
    >>> slider_styles.classic.cap_length = 0.01
    >>> slider_styles.classic.cap_width = 0.02

    Set the modern slider configuration.

    >>> slider_styles.modern.slider_length = 0.02
    >>> slider_styles.modern.slider_width = 0.04
    >>> slider_styles.modern.slider_color = (0.43, 0.44, 0.45)
    >>> slider_styles.modern.tube_width = 0.04
    >>> slider_styles.modern.tube_color = (0.69, 0.70, 0.709)
    >>> slider_styles.modern.cap_opacity = 0
    >>> slider_styles.modern.cap_length = 0.01
    >>> slider_styles.modern.cap_width = 0.02

    """
    __slots__ = ...
    def __init__(self) -> None:
        """Initialize the slider configuration."""
        ...
    
    @property
    def classic(self) -> _SliderStyleConfig:
        """Return the Classic slider configuration."""
        ...
    
    @classic.setter
    def classic(self, config: _SliderStyleConfig):
        ...
    
    @property
    def modern(self) -> _SliderStyleConfig:
        """Return the Modern slider configuration."""
        ...
    
    @modern.setter
    def modern(self, config: _SliderStyleConfig):
        ...
    
    def __repr__(self):
        ...
    
    def __iter__(self):
        ...
    


class _TrameConfig(_ThemeConfig):
    """PyVista Trame configuration.

    Examples
    --------
    Set global trame view parameters.

    >>> import pyvista as pv
    >>> pv.global_theme.trame.interactive_ratio = 2
    >>> pv.global_theme.trame.still_ratio = 2

    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    @property
    def interactive_ratio(self) -> Number:
        """Return or set the interactive ratio for PyVista Trame views.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.trame.interactive_ratio = 2

        """
        ...
    
    @interactive_ratio.setter
    def interactive_ratio(self, interactive_ratio: Number):
        ...
    
    @property
    def still_ratio(self) -> Number:
        """Return or set the still ratio for PyVista Trame views.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.trame.still_ratio = 2

        """
        ...
    
    @still_ratio.setter
    def still_ratio(self, still_ratio: Number):
        ...
    
    @property
    def jupyter_server_name(self):
        """Return or set the trame server name PyVista uses in Jupyter.

        This defaults to ``'pyvista-jupyter'``.

        This must be set before running :func:`pyvista.set_jupyter_backend`
        to ensure a server of this name is launched.

        Most users should not need to modify this.

        """
        ...
    
    @jupyter_server_name.setter
    def jupyter_server_name(self, name: str):
        ...
    
    @property
    def jupyter_server_port(self) -> int:
        """Return or set the port for the Trame Jupyter server."""
        ...
    
    @jupyter_server_port.setter
    def jupyter_server_port(self, port: int):
        ...
    
    @property
    def server_proxy_enabled(self) -> bool:
        """Return or set if use of relative URLs is enabled for the Jupyter interface."""
        ...
    
    @server_proxy_enabled.setter
    def server_proxy_enabled(self, enabled: bool):
        ...
    
    @property
    def server_proxy_prefix(self):
        """Return or set URL prefix when using relative URLs with the Jupyter interface."""
        ...
    
    @server_proxy_prefix.setter
    def server_proxy_prefix(self, prefix: str):
        ...
    
    @property
    def jupyter_extension_available(self) -> bool:
        """Return whether the trame_jupyter_extension is detected."""
        ...
    
    @jupyter_extension_available.setter
    def jupyter_extension_available(self, _available: bool):
        ...
    
    @property
    def jupyter_extension_enabled(self) -> bool:
        """Return or set whether to use the trame_jupyter_extension to communicate with clients."""
        ...
    
    @jupyter_extension_enabled.setter
    def jupyter_extension_enabled(self, enabled: bool):
        ...
    
    @property
    def default_mode(self):
        """Return or set the default mode of the Trame backend.

        * ``'trame'``: Uses a view that can switch between client and server
          rendering modes.
        * ``'server'``: Uses a view that is purely server rendering.
        * ``'client'``: Uses a view that is purely client rendering (generally
          safe without a virtual frame buffer)

        """
        ...
    
    @default_mode.setter
    def default_mode(self, mode: str):
        ...
    


class _CameraConfig(_ThemeConfig):
    """PyVista camera configuration.

    Examples
    --------
    Set global camera parameters.

    >>> import pyvista as pv
    >>> pv.global_theme.camera.position = [1.0, 1.0, 1.0]
    >>> pv.global_theme.camera.viewup = [0.0, 0.0, 1.0]

    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    @property
    def position(self) -> VectorLike[float]:
        """Return or set the camera position.

        Examples
        --------
        Set camera position.

        >>> import pyvista as pv
        >>> pv.global_theme.camera.position = [1.0, 1.0, 1.0]

        """
        ...
    
    @position.setter
    def position(self, position: VectorLike[float]):
        ...
    
    @property
    def viewup(self) -> VectorLike[float]:
        """Return or set the camera viewup.

        Examples
        --------
        Set camera viewup.

        >>> import pyvista as pv
        >>> pv.global_theme.camera.viewup = [0.0, 0.0, 1.0]

        """
        ...
    
    @viewup.setter
    def viewup(self, viewup: VectorLike[float]):
        ...
    
    @property
    def parallel_projection(self) -> bool:
        """Return or set parallel projection mode.

        Examples
        --------
        Enable parallel projection.

        >>> import pyvista as pv
        >>> pv.global_theme.camera.parallel_projection = True

        """
        ...
    
    @parallel_projection.setter
    def parallel_projection(self, value: bool) -> None:
        ...
    
    @property
    def parallel_scale(self) -> bool:
        """Return or set parallel scale.

        Examples
        --------
        Set parallel scale.

        >>> import pyvista as pv
        >>> pv.global_theme.camera.parallel_scale = 2.0

        """
        ...
    
    @parallel_scale.setter
    def parallel_scale(self, value: bool) -> None:
        ...
    


class Theme(_ThemeConfig):
    """Base VTK theme.

    Examples
    --------
    Change the global default background color to white.

    >>> import pyvista as pv
    >>> pv.global_theme.color = 'white'

    Show edges by default.

    >>> pv.global_theme.show_edges = True

    Create a new theme from the default theme and apply it globally.

    >>> from pyvista.plotting.themes import DocumentTheme
    >>> my_theme = DocumentTheme()
    >>> my_theme.color = 'red'
    >>> my_theme.background = 'white'
    >>> pv.global_theme.load_theme(my_theme)

    """
    __slots__ = ...
    def __init__(self) -> None:
        """Initialize the theme."""
        ...
    
    @property
    def hidden_line_removal(self) -> bool:
        """Return or set hidden line removal.

        Wireframe geometry will be drawn using hidden line removal if
        the rendering engine supports it.

        See Also
        --------
        pyvista.Plotter.enable_hidden_line_removal

        Examples
        --------
        Enable hidden line removal.

        >>> import pyvista as pv
        >>> pv.global_theme.hidden_line_removal = True
        >>> pv.global_theme.hidden_line_removal
        True

        """
        ...
    
    @hidden_line_removal.setter
    def hidden_line_removal(self, value: bool):
        ...
    
    @property
    def interpolate_before_map(self) -> bool:
        """Return or set whether to interpolate colors before mapping.

        If the ``interpolate_before_map`` is turned off, the color
        mapping occurs at polygon points and colors are interpolated,
        which is generally less accurate whereas if the
        ``interpolate_before_map`` is on (the default), then the scalars
        will be interpolated across the topology of the dataset which is
        more accurate.

        See also :ref:`interpolate_before_mapping_example`.

        Examples
        --------
        Enable hidden line removal.

        >>> import pyvista as pv

        Load a cylinder which has cells with a wide spread

        >>> cyl = pv.Cylinder(direction=(0, 0, 1), height=2).elevation()

        Common display argument to make sure all else is constant

        >>> dargs = dict(
        ...     scalars='Elevation', cmap='rainbow', show_edges=True
        ... )

        >>> p = pv.Plotter(shape=(1, 2))
        >>> _ = p.add_mesh(
        ...     cyl,
        ...     interpolate_before_map=False,
        ...     scalar_bar_args={'title': 'Elevation - interpolated'},
        ...     **dargs
        ... )
        >>> p.subplot(0, 1)
        >>> _ = p.add_mesh(
        ...     cyl,
        ...     interpolate_before_map=True,
        ...     scalar_bar_args={'title': 'Elevation - interpolated'},
        ...     **dargs
        ... )
        >>> p.link_views()
        >>> p.camera_position = [
        ...     (-1.67, -5.10, 2.06),
        ...     (0.0, 0.0, 0.0),
        ...     (0.00, 0.37, 0.93),
        ... ]
        >>> p.show()  # doctest: +SKIP

        """
        ...
    
    @interpolate_before_map.setter
    def interpolate_before_map(self, value: bool):
        ...
    
    @property
    def opacity(self) -> float:
        """Return or set the opacity.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.opacity = 0.5

        """
        ...
    
    @opacity.setter
    def opacity(self, opacity: float):
        ...
    
    @property
    def edge_opacity(self) -> float:
        """Return or set the edges opacity.

        .. note::
            `edge_opacity` uses ``SetEdgeOpacity`` as the underlying method which
            requires VTK version 9.3 or higher. If ``SetEdgeOpacity`` is not
            available, `edge_opacity` is set to 1.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.edge_opacity = 0.5

        """
        ...
    
    @edge_opacity.setter
    def edge_opacity(self, edge_opacity: float):
        ...
    
    @property
    def above_range_color(self) -> Color:
        """Return or set the default above range color.

        Examples
        --------
        Set the above range color to red.

        >>> import pyvista as pv
        >>> pv.global_theme.above_range_color = 'r'
        >>> pv.global_theme.above_range_color
        Color(name='red', hex='#ff0000ff', opacity=255)

        """
        ...
    
    @above_range_color.setter
    def above_range_color(self, value: ColorLike):
        ...
    
    @property
    def below_range_color(self) -> Color:
        """Return or set the default below range color.

        Examples
        --------
        Set the below range color to blue.

        >>> import pyvista as pv
        >>> pv.global_theme.below_range_color = 'b'
        >>> pv.global_theme.below_range_color
        Color(name='blue', hex='#0000ffff', opacity=255)

        """
        ...
    
    @below_range_color.setter
    def below_range_color(self, value: ColorLike):
        ...
    
    @property
    def return_cpos(self) -> bool:
        """Return or set the default behavior of returning the camera position.

        Examples
        --------
        Disable returning camera position by ``show`` and ``plot`` methods.

        >>> import pyvista as pv
        >>> pv.global_theme.return_cpos = False
        """
        ...
    
    @return_cpos.setter
    def return_cpos(self, value: bool):
        ...
    
    @property
    def background(self) -> Color:
        """Return or set the default background color of pyvista plots.

        Examples
        --------
        Set the default global background of all plots to white.

        >>> import pyvista as pv
        >>> pv.global_theme.background = 'white'
        """
        ...
    
    @background.setter
    def background(self, new_background: ColorLike) -> None:
        ...
    
    @property
    def jupyter_backend(self) -> str:
        """Return or set the jupyter notebook plotting backend.

        Jupyter backend to use when plotting.  Must be one of the
        following:

        * ``'static'`` : Display a single static image within the
          Jupyterlab environment.  Still requires that a virtual
          framebuffer be set up when displaying on a headless server,
          but does not require any additional modules to be installed.

        * ``'client'`` : Export/serialize the scene graph to be rendered
          with VTK.js client-side through ``trame``. Requires ``trame``
          and ``jupyter-server-proxy`` to be installed.

        * ``'server'``: Render remotely and stream the resulting VTK
          images back to the client using ``trame``. This replaces the
          ``'ipyvtklink'`` backend with better performance.
          Supports the most VTK features, but suffers from minor lag due
          to remote rendering. Requires that a virtual framebuffer be set
          up when displaying on a headless server. Must have at least ``trame``
          and ``jupyter-server-proxy`` installed for cloud/remote Jupyter
          instances. This mode is also aliased by ``'trame'``.

        * ``'trame'``: The full Trame-based backend that combines both
          ``'server'`` and ``'client'`` into one backend. This requires a
          virtual frame buffer.

        * ``'html'``: The ``'client'`` backend, but able to be embedded.

        * ``'none'`` : Do not display any plots within jupyterlab,
          instead display using dedicated VTK render windows.  This
          will generate nothing on headless servers even with a
          virtual framebuffer.

        Examples
        --------
        Just show static images.

        >>> pv.set_jupyter_backend('static')  # doctest:+SKIP

        Disable all plotting within JupyterLab and display using a
        standard desktop VTK render window.

        >>> pv.set_jupyter_backend(None)  # doctest:+SKIP

        """
        ...
    
    @jupyter_backend.setter
    def jupyter_backend(self, backend: str):
        ...
    
    @property
    def trame(self) -> _TrameConfig:
        """Return or set the default trame parameters."""
        ...
    
    @trame.setter
    def trame(self, config: _TrameConfig):
        ...
    
    @property
    def auto_close(self) -> bool:
        """Automatically close the figures when finished plotting.

        .. DANGER::
           Set to ``False`` with extreme caution.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.auto_close = False

        """
        ...
    
    @auto_close.setter
    def auto_close(self, value: bool):
        ...
    
    @property
    def full_screen(self) -> bool:
        """Return if figures are shown in full screen.

        Examples
        --------
        Set windows to be full screen by default.

        >>> import pyvista as pv
        >>> pv.global_theme.full_screen = True
        """
        ...
    
    @full_screen.setter
    def full_screen(self, value: bool):
        ...
    
    @property
    def enable_camera_orientation_widget(self) -> bool:
        """Enable the camera orientation widget in all plotters.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.enable_camera_orientation_widget = True
        >>> pv.global_theme.enable_camera_orientation_widget
        True

        """
        ...
    
    @enable_camera_orientation_widget.setter
    def enable_camera_orientation_widget(self, value: bool):
        ...
    
    @property
    def camera(self):
        """Return or set the default camera position.

        Examples
        --------
        Set both the position and viewup of the camera.

        >>> import pyvista as pv
        >>> pv.global_theme.camera.position = [1.0, 1.0, 1.0]
        >>> pv.global_theme.camera.viewup = [0.0, 0.0, 1.0]

        """
        ...
    
    @camera.setter
    def camera(self, camera):
        ...
    
    @property
    def notebook(self) -> bool | None:
        """Return or set the state of notebook plotting.

        Setting this to ``True`` always enables notebook plotting,
        while setting it to ``False`` disables plotting even when
        plotting within a jupyter notebook and plots externally.

        Examples
        --------
        Disable all jupyter notebook plotting.

        >>> import pyvista as pv
        >>> pv.global_theme.notebook = False

        """
        ...
    
    @notebook.setter
    def notebook(self, value: bool | None):
        ...
    
    @property
    def window_size(self) -> list[int]:
        """Return or set the default render window size.

        Examples
        --------
        Set window size to ``[400, 400]``.

        >>> import pyvista as pv
        >>> pv.global_theme.window_size = [400, 400]

        """
        ...
    
    @window_size.setter
    def window_size(self, window_size: list[int]):
        ...
    
    @property
    def image_scale(self) -> int:
        """Return or set the default image scale factor."""
        ...
    
    @image_scale.setter
    def image_scale(self, value: int):
        ...
    
    @property
    def font(self) -> _Font:
        """Return or set the default font size, family, and/or color.

        Examples
        --------
        Set the default font family to 'arial'.  Must be either
        'arial', 'courier', or 'times'.

        >>> import pyvista as pv
        >>> pv.global_theme.font.family = 'arial'

        Set the default font size to 20.

        >>> pv.global_theme.font.size = 20

        Set the default title size to 40.

        >>> pv.global_theme.font.title_size = 40

        Set the default label size to 10.

        >>> pv.global_theme.font.label_size = 10

        Set the default text color to 'grey'.

        >>> pv.global_theme.font.color = 'grey'

        String formatter used to format numerical data to '%.6e'.

        >>> pv.global_theme.font.fmt = '%.6e'

        """
        ...
    
    @font.setter
    def font(self, config: _Font):
        ...
    
    @property
    def cmap(self):
        """Return or set the default colormap of pyvista.

        See available Matplotlib colormaps.  Only applicable for when
        displaying ``scalars``.  If ``colorcet`` or ``cmocean`` are
        installed, their colormaps can be specified by name.

        You can also specify a list of colors to override an existing
        colormap with a custom one.  For example, to create a three
        color colormap you might specify ``['green', 'red', 'blue']``

        Examples
        --------
        Set the default global colormap to 'jet'.

        >>> import pyvista as pv
        >>> pv.global_theme.cmap = 'jet'

        """
        ...
    
    @cmap.setter
    def cmap(self, cmap):
        ...
    
    @property
    def color(self) -> Color:
        """Return or set the default color of meshes in pyvista.

        Used for meshes without ``scalars``.

        When setting, the value must be either a string, rgb list,
        or hex color string.  For example:

        * ``color='white'``
        * ``color='w'``
        * ``color=[1.0, 1.0, 1.0]``
        * ``color='#FFFFFF'``

        Examples
        --------
        Set the default mesh color to 'red'.

        >>> import pyvista as pv
        >>> pv.global_theme.color = 'red'

        """
        ...
    
    @color.setter
    def color(self, color: ColorLike):
        ...
    
    @property
    def color_cycler(self):
        """Return or set the default color cycler used to color meshes.

        This color cycler is iterated over by each renderer to sequentially
        color datasets when displaying them through ``add_mesh``.

        When setting, the value must be either a list of color-like objects,
        or a cycler of color-like objects. If the value passed is a single
        string, it must be one of:

            * ``'default'`` - Use the default color cycler (matches matplotlib's default)
            * ``'matplotlib`` - Dynamically get matplotlib's current theme's color cycler.
            * ``'all'`` - Cycle through all of the available colors in ``pyvista.plotting.colors.hexcolors``

        Setting to ``None`` will disable the use of the color cycler.

        Examples
        --------
        Set the default color cycler to iterate through red, green, and blue.

        >>> import pyvista as pv
        >>> pv.global_theme.color_cycler = ['red', 'green', 'blue']

        >>> pl = pv.Plotter()
        >>> _ = pl.add_mesh(pv.Cone(center=(0, 0, 0)))  # red
        >>> _ = pl.add_mesh(pv.Cube(center=(1, 0, 0)))  # green
        >>> _ = pl.add_mesh(pv.Sphere(center=(1, 1, 0)))  # blue
        >>> _ = pl.add_mesh(pv.Cylinder(center=(0, 1, 0)))  # red again
        >>> pl.show()  # doctest: +SKIP

        """
        ...
    
    @color_cycler.setter
    def color_cycler(self, color_cycler):
        ...
    
    @property
    def nan_color(self) -> Color:
        """Return or set the default NaN color.

        This color is used to plot all NaN values.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.nan_color = 'darkgray'

        """
        ...
    
    @nan_color.setter
    def nan_color(self, nan_color: ColorLike):
        ...
    
    @property
    def edge_color(self) -> Color:
        """Return or set the default edge color.

        Examples
        --------
        Set the global edge color to 'blue'.

        >>> import pyvista as pv
        >>> pv.global_theme.edge_color = 'blue'

        """
        ...
    
    @edge_color.setter
    def edge_color(self, edge_color: ColorLike):
        ...
    
    @property
    def line_width(self) -> float:
        """Return or set the default line width.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.line_width = 2.0

        """
        ...
    
    @line_width.setter
    def line_width(self, line_width: float):
        ...
    
    @property
    def point_size(self) -> float:
        """Return or set the default point size.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.line_width = 10.0

        """
        ...
    
    @point_size.setter
    def point_size(self, point_size: float):
        ...
    
    @property
    def outline_color(self) -> Color:
        """Return or set the default outline color.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.outline_color = 'white'

        """
        ...
    
    @outline_color.setter
    def outline_color(self, outline_color: ColorLike):
        ...
    
    @property
    def floor_color(self) -> Color:
        """Return or set the default floor color.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.floor_color = 'black'

        """
        ...
    
    @floor_color.setter
    def floor_color(self, floor_color: ColorLike):
        ...
    
    @property
    def colorbar_orientation(self) -> str:
        """Return or set the default colorbar orientation.

        Must be either ``'vertical'`` or ``'horizontal'``.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.colorbar_orientation = 'horizontal'

        """
        ...
    
    @colorbar_orientation.setter
    def colorbar_orientation(self, colorbar_orientation: str):
        ...
    
    @property
    def colorbar_horizontal(self) -> _ColorbarConfig:
        """Return or set the default parameters of a horizontal colorbar.

        Examples
        --------
        Set the default horizontal colorbar width to 0.6.

        >>> import pyvista as pv
        >>> pv.global_theme.colorbar_horizontal.width = 0.6

        Set the default horizontal colorbar height to 0.2.

        >>> pv.global_theme.colorbar_horizontal.height = 0.2

        """
        ...
    
    @colorbar_horizontal.setter
    def colorbar_horizontal(self, config: _ColorbarConfig):
        ...
    
    @property
    def colorbar_vertical(self) -> _ColorbarConfig:
        """Return or set the default parameters of a vertical colorbar.

        Examples
        --------
        Set the default colorbar width to 0.45.

        >>> import pyvista as pv
        >>> pv.global_theme.colorbar_vertical.width = 0.45

        Set the default colorbar height to 0.8.

        >>> import pyvista as pv
        >>> pv.global_theme.colorbar_vertical.height = 0.8

        """
        ...
    
    @colorbar_vertical.setter
    def colorbar_vertical(self, config: _ColorbarConfig):
        ...
    
    @property
    def show_scalar_bar(self) -> bool:
        """Return or set the default color bar visibility.

        Examples
        --------
        Show the scalar bar by default when scalars are available.

        >>> import pyvista as pv
        >>> pv.global_theme.show_scalar_bar = True

        """
        ...
    
    @show_scalar_bar.setter
    def show_scalar_bar(self, show_scalar_bar: bool):
        ...
    
    @property
    def show_edges(self) -> bool:
        """Return or set the default edge visibility.

        Examples
        --------
        Show edges globally by default.

        >>> import pyvista as pv
        >>> pv.global_theme.show_edges = True

        """
        ...
    
    @show_edges.setter
    def show_edges(self, show_edges: bool):
        ...
    
    @property
    def show_vertices(self) -> bool:
        """Return or set the default vertex visibility.

        Examples
        --------
        Show vertices globally by default.

        >>> import pyvista as pv
        >>> pv.global_theme.show_vertices = True

        """
        ...
    
    @show_vertices.setter
    def show_vertices(self, show_vertices: bool):
        ...
    
    @property
    def lighting(self) -> bool:
        """Return or set the default ``lighting``.

        Examples
        --------
        Disable lighting globally.

        >>> import pyvista as pv
        >>> pv.global_theme.lighting = False
        """
        ...
    
    @lighting.setter
    def lighting(self, lighting: bool):
        ...
    
    @property
    def interactive(self) -> bool:
        """Return or set the default ``interactive`` parameter.

        Examples
        --------
        Make all plots non-interactive globally.

        >>> import pyvista as pv
        >>> pv.global_theme.interactive = False
        """
        ...
    
    @interactive.setter
    def interactive(self, interactive: bool):
        ...
    
    @property
    def render_points_as_spheres(self) -> bool:
        """Return or set the default ``render_points_as_spheres`` parameter.

        Examples
        --------
        Render points as spheres by default globally.

        >>> import pyvista as pv
        >>> pv.global_theme.render_points_as_spheres = True
        """
        ...
    
    @render_points_as_spheres.setter
    def render_points_as_spheres(self, render_points_as_spheres: bool):
        ...
    
    @property
    def render_lines_as_tubes(self) -> bool:
        """Return or set the default ``render_lines_as_tubes`` parameter.

        Examples
        --------
        Render points as spheres by default globally.

        >>> import pyvista as pv
        >>> pv.global_theme.render_lines_as_tubes = True
        """
        ...
    
    @render_lines_as_tubes.setter
    def render_lines_as_tubes(self, render_lines_as_tubes: bool):
        ...
    
    @property
    def transparent_background(self) -> bool:
        """Return or set the default ``transparent_background`` parameter.

        Examples
        --------
        Set transparent_background globally to ``True``.

        >>> import pyvista as pv
        >>> pv.global_theme.transparent_background = True

        """
        ...
    
    @transparent_background.setter
    def transparent_background(self, transparent_background: bool):
        ...
    
    @property
    def title(self) -> str:
        """Return or set the default ``title`` parameter.

        This is the VTK render window title.

        Examples
        --------
        Set title globally to 'plot'.

        >>> import pyvista as pv
        >>> pv.global_theme.title = 'plot'

        """
        ...
    
    @title.setter
    def title(self, title: str):
        ...
    
    @property
    def anti_aliasing(self) -> str | None:
        """Enable or disable anti-aliasing.

        Should be either ``"ssaa"``, ``"msaa"``, ``"fxaa"``, or ``None``.

        Examples
        --------
        Use super-sampling anti-aliasing in the global theme.

        >>> import pyvista as pv
        >>> pv.global_theme.anti_aliasing = 'ssaa'
        >>> pv.global_theme.anti_aliasing
        'ssaa'

        Disable anti-aliasing in the global theme.

        >>> import pyvista as pv
        >>> pv.global_theme.anti_aliasing = None

        See :ref:`anti_aliasing_example` for more information regarding
        anti-aliasing.

        """
        ...
    
    @anti_aliasing.setter
    def anti_aliasing(self, anti_aliasing: str | None):
        ...
    
    @property
    def multi_samples(self) -> int:
        """Return or set the default ``multi_samples`` parameter.

        Set the number of multisamples to used with hardware anti_aliasing. This
        is only used when :attr:`anti_aliasing <Theme.anti_aliasing>` is
        set to ``"msaa"``.

        Examples
        --------
        Set the default number of multisamples to 2 and enable ``"msaa"``

        >>> import pyvista as pv
        >>> pv.global_theme.anti_aliasing = 'msaa'
        >>> pv.global_theme.multi_samples = 2

        """
        ...
    
    @multi_samples.setter
    def multi_samples(self, multi_samples: int):
        ...
    
    @property
    def multi_rendering_splitting_position(self) -> float:
        """Return or set the default ``multi_rendering_splitting_position`` parameter.

        Examples
        --------
        Set multi_rendering_splitting_position globally to 0.5 (the
        middle of the window).

        >>> import pyvista as pv
        >>> pv.global_theme.multi_rendering_splitting_position = 0.5

        """
        ...
    
    @multi_rendering_splitting_position.setter
    def multi_rendering_splitting_position(self, multi_rendering_splitting_position: float):
        ...
    
    @property
    def volume_mapper(self) -> str:
        """Return or set the default ``volume_mapper`` parameter.

        Must be one of the following strings, which are mapped to the
        following VTK volume mappers.

        * ``'fixed_point'`` : ``vtk.vtkFixedPointVolumeRayCastMapper``
        * ``'gpu'`` : ``vtk.vtkGPUVolumeRayCastMapper``
        * ``'open_gl'`` : ``vtk.vtkOpenGLGPUVolumeRayCastMapper``
        * ``'smart'`` : ``vtk.vtkSmartVolumeMapper``

        Examples
        --------
        Set default volume mapper globally to 'gpu'.

        >>> import pyvista as pv
        >>> pv.global_theme.volume_mapper = 'gpu'

        """
        ...
    
    @volume_mapper.setter
    def volume_mapper(self, mapper: str):
        ...
    
    @property
    def smooth_shading(self) -> bool:
        """Return or set the default ``smooth_shading`` parameter.

        Examples
        --------
        Set the global smooth_shading parameter default to ``True``.

        >>> import pyvista as pv
        >>> pv.global_theme.smooth_shading = True

        """
        ...
    
    @smooth_shading.setter
    def smooth_shading(self, smooth_shading: bool):
        ...
    
    @property
    def depth_peeling(self) -> _DepthPeelingConfig:
        """Return or set the default depth peeling parameters.

        Examples
        --------
        Set the global depth_peeling parameter default to be enabled
        with 8 peels.

        >>> import pyvista as pv
        >>> pv.global_theme.depth_peeling.number_of_peels = 8
        >>> pv.global_theme.depth_peeling.occlusion_ratio = 0.0
        >>> pv.global_theme.depth_peeling.enabled = True

        """
        ...
    
    @depth_peeling.setter
    def depth_peeling(self, config: _DepthPeelingConfig):
        ...
    
    @property
    def silhouette(self) -> _SilhouetteConfig:
        """Return or set the default ``silhouette`` configuration.

        Examples
        --------
        Set parameters of the silhouette.

        >>> import pyvista as pv
        >>> pv.global_theme.silhouette.color = 'grey'
        >>> pv.global_theme.silhouette.line_width = 2.0
        >>> pv.global_theme.silhouette.feature_angle = 20

        """
        ...
    
    @silhouette.setter
    def silhouette(self, config: _SilhouetteConfig):
        ...
    
    @property
    def slider_styles(self) -> _SliderConfig:
        """Return the default slider style configurations."""
        ...
    
    @slider_styles.setter
    def slider_styles(self, config: _SliderConfig):
        ...
    
    @property
    def axes(self) -> _AxesConfig:
        """Return or set the default ``axes`` configuration.

        Examples
        --------
        Set the x-axis color to black.

        >>> import pyvista as pv
        >>> pv.global_theme.axes.x_color = 'black'

        Show the axes orientation widget by default.

        >>> pv.global_theme.axes.show = True

        Use the :func:`axes orientation box <pyvista.create_axes_orientation_box>` as the orientation widget.

        >>> pv.global_theme.axes.box = True

        """
        ...
    
    @axes.setter
    def axes(self, config: _AxesConfig):
        ...
    
    @property
    def before_close_callback(self) -> Callable[[pyvista.Plotter], None]:
        """Return the default before_close_callback function for Plotter."""
        ...
    
    @before_close_callback.setter
    def before_close_callback(self, value: Callable[[pyvista.Plotter], None]):
        ...
    
    @property
    def allow_empty_mesh(self) -> bool:
        """Return or set whether to allow plotting empty meshes.

        Examples
        --------
        Enable plotting of empty meshes.

        >>> import pyvista as pv
        >>> pv.global_theme.allow_empty_mesh = True

        Now add an empty mesh to a plotter

        >>> pl = pv.Plotter()
        >>> _ = pl.add_mesh(pv.PolyData())
        >>> pl.show()  # doctest: +SKIP

        """
        ...
    
    @allow_empty_mesh.setter
    def allow_empty_mesh(self, allow_empty_mesh: bool):
        ...
    
    def restore_defaults(self):
        """Restore the theme defaults.

        Examples
        --------
        >>> import pyvista as pv
        >>> pv.global_theme.restore_defaults()

        """
        ...
    
    def __repr__(self):
        """User friendly representation of the current theme."""
        ...
    
    @property
    def name(self) -> str:
        """Return or set the name of the theme."""
        ...
    
    @name.setter
    def name(self, name: str):
        ...
    
    def load_theme(self, theme: str | Theme) -> None:
        """Overwrite the current theme with a theme.

        Parameters
        ----------
        theme : pyvista.plotting.themes.Theme
            Theme to use to overwrite this theme.

        Examples
        --------
        Create a custom theme from the default theme and load it into
        the global theme of pyvista.

        >>> import pyvista as pv
        >>> from pyvista.plotting.themes import DocumentTheme
        >>> my_theme = DocumentTheme()
        >>> my_theme.font.size = 20
        >>> my_theme.font.title_size = 40
        >>> my_theme.cmap = 'jet'
        >>> pv.global_theme.load_theme(my_theme)
        >>> pv.global_theme.font.size
        20

        Create a custom theme from the dark theme and load it into
        pyvista.

        >>> from pyvista.plotting.themes import DarkTheme
        >>> my_theme = DarkTheme()
        >>> my_theme.show_edges = True
        >>> pv.global_theme.load_theme(my_theme)
        >>> pv.global_theme.show_edges
        True

        """
        ...
    
    def save(self, filename: str) -> None:
        """Serialize this theme to a json file.

        ``before_close_callback`` is non-serializable and is omitted.

        Parameters
        ----------
        filename : str
            Path to save the theme to.  Should end in ``'.json'``.

        Examples
        --------
        Export and then load back in a theme.

        >>> import pyvista as pv
        >>> theme = pv.themes.DocumentTheme()
        >>> theme.background = 'white'
        >>> theme.save('my_theme.json')  # doctest:+SKIP
        >>> loaded_theme = pv.load_theme('my_theme.json')  # doctest:+SKIP

        """
        ...
    
    @property
    def split_sharp_edges(self) -> bool:
        """Set or return splitting sharp edges.

        See :ref:`shading_example` for an example showing split sharp edges.

        Examples
        --------
        Enable the splitting of sharp edges globally.

        >>> import pyvista as pv
        >>> pv.global_theme.split_sharp_edges = True
        >>> pv.global_theme.split_sharp_edges
        True

        Disable the splitting of sharp edges globally.

        >>> import pyvista as pv
        >>> pv.global_theme.split_sharp_edges = False
        >>> pv.global_theme.split_sharp_edges
        False

        """
        ...
    
    @split_sharp_edges.setter
    def split_sharp_edges(self, value: bool):
        ...
    
    @property
    def sharp_edges_feature_angle(self) -> float:
        """Set or return the angle of the sharp edges feature angle.

        See :ref:`shading_example` for an example showing split sharp edges.

        Examples
        --------
        Change the sharp edges feature angle to 45 degrees.

        >>> import pyvista as pv
        >>> pv.global_theme.sharp_edges_feature_angle = 45.0
        >>> pv.global_theme.sharp_edges_feature_angle
        45.0

        """
        ...
    
    @sharp_edges_feature_angle.setter
    def sharp_edges_feature_angle(self, value: float):
        ...
    
    @property
    def lighting_params(self) -> _LightingConfig:
        """Return or set the default lighting configuration."""
        ...
    
    @lighting_params.setter
    def lighting_params(self, config: _LightingConfig):
        ...
    
    @property
    def logo_file(self) -> str | None:
        """Return or set the logo file.

        .. note::

            :func:`pyvista.Plotter.add_logo_widget` will default to
            PyVista's logo if this is unset.

        Examples
        --------
        Set the logo file to a custom logo.

        >>> import pyvista as pv
        >>> from pyvista import examples
        >>> logo_file = examples.download_file('vtk.png')
        >>> pv.global_theme.logo_file = logo_file

        Now the logo will be used by default for :func:`pyvista.Plotter.add_logo_widget`.

        >>> pl = pv.Plotter()
        >>> _ = pl.add_logo_widget()
        >>> _ = pl.add_mesh(pv.Sphere(), show_edges=True)
        >>> pl.show()

        """
        ...
    
    @logo_file.setter
    def logo_file(self, logo_file: str | pathlib.Path | None):
        ...
    


class DarkTheme(Theme):
    """Dark mode theme.

    Black background, "viridis" colormap, tan meshes, white (hidden) edges.

    Examples
    --------
    Make the dark theme the global default.

    >>> import pyvista as pv
    >>> from pyvista import themes
    >>> pv.set_plot_theme(themes.DarkTheme())

    Alternatively, set via a string.

    >>> pv.set_plot_theme('dark')

    """
    def __init__(self) -> None:
        """Initialize the theme."""
        ...
    


class ParaViewTheme(Theme):
    """A paraview-like theme.

    Examples
    --------
    Make the paraview-like theme the global default.

    >>> import pyvista as pv
    >>> from pyvista import themes
    >>> pv.set_plot_theme(themes.ParaViewTheme())

    Alternatively, set via a string.

    >>> pv.set_plot_theme('paraview')

    """
    def __init__(self) -> None:
        """Initialize theme."""
        ...
    


class DocumentTheme(Theme):
    """A document theme well suited for papers and presentations.

    This theme uses:

    * A white background
    * Black fonts
    * The "viridis" colormap
    * disables edges for surface plots
    * Hidden edge removal

    Best used for presentations, papers, etc.

    Examples
    --------
    Make the document theme the global default.

    >>> import pyvista as pv
    >>> from pyvista import themes
    >>> pv.set_plot_theme(themes.DocumentTheme())

    Alternatively, set via a string.

    >>> pv.set_plot_theme('document')

    """
    def __init__(self) -> None:
        """Initialize the theme."""
        ...
    


class DocumentProTheme(DocumentTheme):
    """A more professional document theme.

    This theme extends the base document theme with:

    * Default color cycling
    * Rendering points as spheres
    * MSAA anti aliassing
    * Depth peeling

    """
    def __init__(self) -> None:
        """Initialize the theme."""
        ...
    


class _TestingTheme(Theme):
    """Low resolution testing theme for ``pytest``.

    Necessary for image regression.  Xvfb doesn't support
    multi-sampling, it's disabled for consistency between desktops and
    remote testing.

    Also disables ``return_cpos`` to make it easier for us to write
    examples without returning camera positions.

    """
    def __init__(self) -> None:
        ...
    


class _NATIVE_THEMES(Enum):
    """Global built-in themes available to PyVista."""
    paraview = ParaViewTheme
    document = DocumentTheme
    document_pro = DocumentProTheme
    dark = DarkTheme
    default = document
    testing = _TestingTheme
    vtk = Theme


