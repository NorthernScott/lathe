"""
This type stub file was generated by pyright.
"""

"""Built-in examples that ship with PyVista and do not need to be downloaded.

Examples
--------
>>> from pyvista import examples
>>> mesh = examples.load_ant()
>>> mesh.plot()

"""
dir_path = ...
antfile = ...
planefile = ...
hexbeamfile = ...
spherefile = ...
uniformfile = ...
rectfile = ...
globefile = ...
mapfile = ...
channelsfile = ...
logofile = ...
nutfile = ...
frogtissuesfile = ...
def load_ant(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load ply ant mesh.

    Returns
    -------
    pyvista.PolyData
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_ant()
    >>> dataset.plot()

    .. seealso::

        :ref:`Ant Dataset <ant_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_ant = ...
def load_airplane(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load ply airplane mesh.

    Returns
    -------
    pyvista.PolyData
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_airplane()
    >>> dataset.plot()

    .. seealso::

        :ref:`Airplane Dataset <airplane_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_airplane = ...
def load_sphere(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load sphere ply mesh.

    Returns
    -------
    pyvista.PolyData
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_sphere()
    >>> dataset.plot()

    .. seealso::

        :ref:`Sphere Dataset <sphere_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_sphere = ...
def load_uniform(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load a sample uniform grid.

    Returns
    -------
    pyvista.ImageData
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_uniform()
    >>> dataset.plot()

    .. seealso::

        :ref:`Uniform Dataset <uniform_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_uniform = ...
def load_rectilinear(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load a sample uniform grid.

    Returns
    -------
    pyvista.RectilinearGrid
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_rectilinear()
    >>> dataset.plot()

    .. seealso::

        :ref:`Rectilinear Dataset <rectilinear_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_rectilinear = ...
def load_hexbeam(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load a sample UnstructuredGrid.

    Returns
    -------
    pyvista.UnstructuredGrid
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_hexbeam()
    >>> dataset.plot()

    .. seealso::

        :ref:`Hexbeam Dataset <hexbeam_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_hexbeam = ...
def load_tetbeam(): # -> DatasetObject:
    """Load a sample UnstructuredGrid containing only tetrahedral cells.

    Returns
    -------
    pyvista.UnstructuredGrid
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_tetbeam()
    >>> dataset.plot()

    .. seealso::

        :ref:`Tetbeam Dataset <tetbeam_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_tetbeam = ...
def load_structured(): # -> DatasetObject:
    """Load a simple StructuredGrid.

    Returns
    -------
    pyvista.StructuredGrid
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_structured()
    >>> dataset.plot()

    .. seealso::

        :ref:`Structured Dataset <structured_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_structured = ...
def load_globe(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load a globe source.

    Returns
    -------
    pyvista.PolyData
        Globe dataset with earth texture.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_globe()
    >>> texture = examples.load_globe_texture()
    >>> dataset.plot(texture=texture)

    .. seealso::

        :ref:`Globe Dataset <globe_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_globe = ...
def load_globe_texture(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load a pyvista.Texture that can be applied to the globe source.

    Returns
    -------
    pyvista.Texture
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_globe_texture()
    >>> dataset.plot()

    .. seealso::

        :ref:`Globe Texture Dataset <globe_texture_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_globe_texture = ...
def load_channels(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load a uniform grid of fluvial channels in the subsurface.

    Returns
    -------
    pyvista.ImageData
        Dataset.

    Examples
    --------
    >>> from pyvista import examples
    >>> dataset = examples.load_channels()
    >>> dataset.plot()

    .. seealso::

        :ref:`Channels Dataset <channels_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_channels = ...
def load_spline(): # -> DatasetObject:
    """Load an example spline mesh.

    This example data was created with:

    .. code:: python

       >>> import numpy as np
       >>> import pyvista as pv
       >>> theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)
       >>> z = np.linspace(-2, 2, 100)
       >>> r = z**2 + 1
       >>> x = r * np.sin(theta)
       >>> y = r * np.cos(theta)
       >>> points = np.column_stack((x, y, z))
       >>> mesh = pv.Spline(points, 1000)

    Returns
    -------
    pyvista.PolyData
        Spline mesh.

    Examples
    --------
    >>> from pyvista import examples
    >>> spline = examples.load_spline()
    >>> spline.plot()

    .. seealso::

        :ref:`Spline Dataset <spline_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_spline = ...
def load_random_hills(): # -> DatasetObject:
    """Create random hills toy example.

    Uses the parametric random hill function to create hills oriented
    like topography and adds an elevation array.

    This example dataset was created with:

    .. code:: python

       >>> mesh = pv.ParametricRandomHills()  # doctest:+SKIP
       >>> mesh = mesh.elevation()  # doctest:+SKIP

    Returns
    -------
    pyvista.PolyData
        Random hills mesh.

    Examples
    --------
    >>> from pyvista import examples
    >>> mesh = examples.load_random_hills()
    >>> mesh.plot()

    .. seealso::

        :ref:`Random Hills Dataset <random_hills_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_random_hills = ...
def load_sphere_vectors(): # -> DatasetObject:
    """Create example sphere with a swirly vector field defined on nodes.

    Returns
    -------
    pyvista.PolyData
        Mesh containing vectors.

    Examples
    --------
    >>> from pyvista import examples
    >>> mesh = examples.load_sphere_vectors()
    >>> mesh.point_data
    pyvista DataSetAttributes
    Association     : POINT
    Active Scalars  : vectors
    Active Vectors  : vectors
    Active Texture  : None
    Active Normals  : Normals
    Contains arrays :
        Normals                 float32    (842, 3)             NORMALS
        vectors                 float32    (842, 3)             VECTORS

    .. seealso::

        :ref:`Sphere Vectors Dataset <sphere_vectors_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_sphere_vectors = ...
def load_explicit_structured(dimensions=..., spacing=...): # -> DatasetObject:
    """Load a simple explicit structured grid.

    Parameters
    ----------
    dimensions : tuple(int), optional
        Grid dimensions. Default is (5, 6, 7).
    spacing : tuple(int), optional
        Grid spacing. Default is (20, 10, 1).

    Returns
    -------
    pyvista.ExplicitStructuredGrid
        An explicit structured grid.

    Examples
    --------
    >>> from pyvista import examples
    >>> grid = examples.load_explicit_structured()
    >>> grid.plot(show_edges=True)

    .. seealso::

        :ref:`Explicit Structured Dataset <explicit_structured_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_explicit_structured = ...
def load_nut(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load an example nut mesh.

    Returns
    -------
    pyvista.PolyData
        A sample nut surface dataset.

    Examples
    --------
    Load an example nut and plot with smooth shading.

    >>> from pyvista import examples
    >>> mesh = examples.load_nut()
    >>> mesh.plot(smooth_shading=True, split_sharp_edges=True)

    .. seealso::

        :ref:`Nut Dataset <nut_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_nut = ...
def load_hydrogen_orbital(n=..., l=..., m=..., zoom_fac=...): # -> DatasetObject:
    """Load the hydrogen wave function for a :class:`pyvista.ImageData`.

    This is the solution to the Schrödinger equation for hydrogen
    evaluated in three-dimensional Cartesian space.

    Inspired by `Hydrogen Wave Function
    <http://staff.ustc.edu.cn/~zqj/posts/Hydrogen-Wavefunction/>`_.

    Parameters
    ----------
    n : int, default: 1
        Principal quantum number. Must be a positive integer. This is often
        referred to as the "energy level" or "shell".

    l : int, default: 0
        Azimuthal quantum number. Must be a non-negative integer strictly
        smaller than ``n``. By convention this value is represented by the
        letters s, p, d, f, etc.

    m : int, default: 0
        Magnetic quantum number. Must be an integer ranging from ``-l`` to
        ``l`` (inclusive). This is the orientation of the angular momentum in
        space.

    zoom_fac : float, default: 1.0
        Zoom factor for the electron cloud. Increase this value to focus on the
        center of the electron cloud.

    Returns
    -------
    pyvista.ImageData
        ImageData containing two ``point_data`` arrays:

        * ``'real_wf'`` - Real part of the wave function.
        * ``'wf'`` - Complex wave function.

    Notes
    -----
    This example requires `sympy <https://www.sympy.org/>`_.

    Examples
    --------
    Plot the 3dxy orbital of a hydrogen atom. This corresponds to the quantum
    numbers ``n=3``, ``l=2``, and ``m=-2``.

    >>> from pyvista import examples
    >>> grid = examples.load_hydrogen_orbital(3, 2, -2)
    >>> grid.plot(volume=True, opacity=[1, 0, 1], cmap='magma')

    See :ref:`plot_atomic_orbitals_example` for additional examples using
    this function.

    .. seealso::

        :ref:`Hydrogen Orbital Dataset <hydrogen_orbital_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_hydrogen_orbital = ...
def load_logo(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load the PyVista logo as a :class:`pyvista.ImageData`.

    Returns
    -------
    pyvista.ImageData
        ImageData of the PyVista logo.

    Examples
    --------
    >>> from pyvista import examples
    >>> image = examples.load_logo()
    >>> image.plot(cpos='xy', zoom='tight', rgb=True, show_axes=False)

    .. seealso::

        :ref:`Logo Dataset <logo_dataset>`
            See this dataset in the Dataset Gallery for more info.

    """
    ...

_dataset_logo = ...
def load_frog_tissues(): # -> DatasetType | UnstructuredGrid | pyvista_ndarray | type[DataSet] | type[Texture] | type[ndarray[Any, dtype[Any]]] | type[MultiBlock] | None:
    """Load frog tissues dataset.

    This dataset contains tissue segmentation labels for the frog dataset.

    .. versionadded:: 0.44.0

    Returns
    -------
    pyvista.ImageData
        Dataset.

    Examples
    --------
    Load data

    >>> import numpy as np
    >>> import pyvista as pv
    >>> from pyvista import examples
    >>> data = examples.load_frog_tissues()

    Plot tissue labels as a volume

    First, define plotting parameters

    >>> # Configure colors / color bar
    >>> clim = data.get_data_range()  # Set color bar limits to match data
    >>> cmap = 'glasbey'  # Use a categorical colormap
    >>> categories = True  # Ensure n_colors matches number of labels
    >>> opacity = (
    ...     'foreground'  # Make foreground opaque, background transparent
    ... )
    >>> opacity_unit_distance = 1

    Set plotting resolution to half the image's spacing

    >>> res = np.array(data.spacing) / 2

    Define rendering parameters

    >>> mapper = 'gpu'
    >>> shade = True
    >>> ambient = 0.3
    >>> diffuse = 0.6
    >>> specular = 0.5
    >>> specular_power = 40

    Make and show plot

    >>> p = pv.Plotter()
    >>> _ = p.add_volume(
    ...     data,
    ...     clim=clim,
    ...     ambient=ambient,
    ...     shade=shade,
    ...     diffuse=diffuse,
    ...     specular=specular,
    ...     specular_power=specular_power,
    ...     mapper=mapper,
    ...     opacity=opacity,
    ...     opacity_unit_distance=opacity_unit_distance,
    ...     categories=categories,
    ...     cmap=cmap,
    ...     resolution=res,
    ... )
    >>> p.camera_position = 'yx'  # Set camera to provide a dorsal view
    >>> p.show()

    .. seealso::

        :ref:`Frog Tissues Dataset <frog_tissues_dataset>`
            See this dataset in the Dataset Gallery for more info.

        :ref:`Frog Dataset <frog_dataset>`

        :ref:`medical_dataset_gallery`
            Browse other medical datasets.

    """
    ...

_dataset_frog_tissues = ...
